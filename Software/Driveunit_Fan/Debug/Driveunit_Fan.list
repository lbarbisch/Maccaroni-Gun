
Driveunit_Fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005028  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f8  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080061d8  080061d8  00008014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080061d8  080061d8  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061dc  080061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080061e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000014  080061f4  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080061f4  00008288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fd9  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f01  00000000  00000000  0002a015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e02b  00000000  00000000  0002df16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001463  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ecf  00000000  00000000  0003e64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002171e  00000000  00000000  0005651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097264  00000000  00000000  00077c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ee9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003598  00000000  00000000  0010eee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00112478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080050c8 	.word	0x080050c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	080050c8 	.word	0x080050c8

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			@ (mov r8, r8)

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <__aeabi_cfrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0008      	movs	r0, r1
 8000230:	4661      	mov	r1, ip
 8000232:	e7ff      	b.n	8000234 <__aeabi_cfcmpeq>

08000234 <__aeabi_cfcmpeq>:
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000236:	f000 fbc3 	bl	80009c0 <__lesf2>
 800023a:	2800      	cmp	r0, #0
 800023c:	d401      	bmi.n	8000242 <__aeabi_cfcmpeq+0xe>
 800023e:	2100      	movs	r1, #0
 8000240:	42c8      	cmn	r0, r1
 8000242:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000244 <__aeabi_fcmpeq>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb4b 	bl	80008e0 <__eqsf2>
 800024a:	4240      	negs	r0, r0
 800024c:	3001      	adds	r0, #1
 800024e:	bd10      	pop	{r4, pc}

08000250 <__aeabi_fcmplt>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fbb5 	bl	80009c0 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	db01      	blt.n	800025e <__aeabi_fcmplt+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_fcmple>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fbab 	bl	80009c0 <__lesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dd01      	ble.n	8000272 <__aeabi_fcmple+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)

08000278 <__aeabi_fcmpgt>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fb59 	bl	8000930 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dc01      	bgt.n	8000286 <__aeabi_fcmpgt+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__aeabi_fcmpge>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 fb4f 	bl	8000930 <__gesf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	da01      	bge.n	800029a <__aeabi_fcmpge+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			@ (mov r8, r8)

080002a0 <__aeabi_f2uiz>:
 80002a0:	219e      	movs	r1, #158	@ 0x9e
 80002a2:	b510      	push	{r4, lr}
 80002a4:	05c9      	lsls	r1, r1, #23
 80002a6:	1c04      	adds	r4, r0, #0
 80002a8:	f7ff fff0 	bl	800028c <__aeabi_fcmpge>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d103      	bne.n	80002b8 <__aeabi_f2uiz+0x18>
 80002b0:	1c20      	adds	r0, r4, #0
 80002b2:	f000 ff8b 	bl	80011cc <__aeabi_f2iz>
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	219e      	movs	r1, #158	@ 0x9e
 80002ba:	1c20      	adds	r0, r4, #0
 80002bc:	05c9      	lsls	r1, r1, #23
 80002be:	f000 fd21 	bl	8000d04 <__aeabi_fsub>
 80002c2:	f000 ff83 	bl	80011cc <__aeabi_f2iz>
 80002c6:	2380      	movs	r3, #128	@ 0x80
 80002c8:	061b      	lsls	r3, r3, #24
 80002ca:	469c      	mov	ip, r3
 80002cc:	4460      	add	r0, ip
 80002ce:	e7f2      	b.n	80002b6 <__aeabi_f2uiz+0x16>

080002d0 <__aeabi_fadd>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	024b      	lsls	r3, r1, #9
 80002d4:	0a5a      	lsrs	r2, r3, #9
 80002d6:	4694      	mov	ip, r2
 80002d8:	004a      	lsls	r2, r1, #1
 80002da:	0fc9      	lsrs	r1, r1, #31
 80002dc:	46ce      	mov	lr, r9
 80002de:	4647      	mov	r7, r8
 80002e0:	4689      	mov	r9, r1
 80002e2:	0045      	lsls	r5, r0, #1
 80002e4:	0246      	lsls	r6, r0, #9
 80002e6:	0e2d      	lsrs	r5, r5, #24
 80002e8:	0e12      	lsrs	r2, r2, #24
 80002ea:	b580      	push	{r7, lr}
 80002ec:	0999      	lsrs	r1, r3, #6
 80002ee:	0a77      	lsrs	r7, r6, #9
 80002f0:	0fc4      	lsrs	r4, r0, #31
 80002f2:	09b6      	lsrs	r6, r6, #6
 80002f4:	1aab      	subs	r3, r5, r2
 80002f6:	454c      	cmp	r4, r9
 80002f8:	d020      	beq.n	800033c <__aeabi_fadd+0x6c>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	dd0c      	ble.n	8000318 <__aeabi_fadd+0x48>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d134      	bne.n	800036c <__aeabi_fadd+0x9c>
 8000302:	2900      	cmp	r1, #0
 8000304:	d02a      	beq.n	800035c <__aeabi_fadd+0x8c>
 8000306:	1e5a      	subs	r2, r3, #1
 8000308:	2b01      	cmp	r3, #1
 800030a:	d100      	bne.n	800030e <__aeabi_fadd+0x3e>
 800030c:	e08f      	b.n	800042e <__aeabi_fadd+0x15e>
 800030e:	2bff      	cmp	r3, #255	@ 0xff
 8000310:	d100      	bne.n	8000314 <__aeabi_fadd+0x44>
 8000312:	e0cd      	b.n	80004b0 <__aeabi_fadd+0x1e0>
 8000314:	0013      	movs	r3, r2
 8000316:	e02f      	b.n	8000378 <__aeabi_fadd+0xa8>
 8000318:	2b00      	cmp	r3, #0
 800031a:	d060      	beq.n	80003de <__aeabi_fadd+0x10e>
 800031c:	1b53      	subs	r3, r2, r5
 800031e:	2d00      	cmp	r5, #0
 8000320:	d000      	beq.n	8000324 <__aeabi_fadd+0x54>
 8000322:	e0ee      	b.n	8000502 <__aeabi_fadd+0x232>
 8000324:	2e00      	cmp	r6, #0
 8000326:	d100      	bne.n	800032a <__aeabi_fadd+0x5a>
 8000328:	e13e      	b.n	80005a8 <__aeabi_fadd+0x2d8>
 800032a:	1e5c      	subs	r4, r3, #1
 800032c:	2b01      	cmp	r3, #1
 800032e:	d100      	bne.n	8000332 <__aeabi_fadd+0x62>
 8000330:	e16b      	b.n	800060a <__aeabi_fadd+0x33a>
 8000332:	2bff      	cmp	r3, #255	@ 0xff
 8000334:	d100      	bne.n	8000338 <__aeabi_fadd+0x68>
 8000336:	e0b9      	b.n	80004ac <__aeabi_fadd+0x1dc>
 8000338:	0023      	movs	r3, r4
 800033a:	e0e7      	b.n	800050c <__aeabi_fadd+0x23c>
 800033c:	2b00      	cmp	r3, #0
 800033e:	dc00      	bgt.n	8000342 <__aeabi_fadd+0x72>
 8000340:	e0a4      	b.n	800048c <__aeabi_fadd+0x1bc>
 8000342:	2a00      	cmp	r2, #0
 8000344:	d069      	beq.n	800041a <__aeabi_fadd+0x14a>
 8000346:	2dff      	cmp	r5, #255	@ 0xff
 8000348:	d100      	bne.n	800034c <__aeabi_fadd+0x7c>
 800034a:	e0b1      	b.n	80004b0 <__aeabi_fadd+0x1e0>
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	04d2      	lsls	r2, r2, #19
 8000350:	4311      	orrs	r1, r2
 8000352:	2b1b      	cmp	r3, #27
 8000354:	dc00      	bgt.n	8000358 <__aeabi_fadd+0x88>
 8000356:	e0e9      	b.n	800052c <__aeabi_fadd+0x25c>
 8000358:	002b      	movs	r3, r5
 800035a:	3605      	adds	r6, #5
 800035c:	08f7      	lsrs	r7, r6, #3
 800035e:	2bff      	cmp	r3, #255	@ 0xff
 8000360:	d100      	bne.n	8000364 <__aeabi_fadd+0x94>
 8000362:	e0a5      	b.n	80004b0 <__aeabi_fadd+0x1e0>
 8000364:	027a      	lsls	r2, r7, #9
 8000366:	0a52      	lsrs	r2, r2, #9
 8000368:	b2d8      	uxtb	r0, r3
 800036a:	e030      	b.n	80003ce <__aeabi_fadd+0xfe>
 800036c:	2dff      	cmp	r5, #255	@ 0xff
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0xa2>
 8000370:	e09e      	b.n	80004b0 <__aeabi_fadd+0x1e0>
 8000372:	2280      	movs	r2, #128	@ 0x80
 8000374:	04d2      	lsls	r2, r2, #19
 8000376:	4311      	orrs	r1, r2
 8000378:	2001      	movs	r0, #1
 800037a:	2b1b      	cmp	r3, #27
 800037c:	dc08      	bgt.n	8000390 <__aeabi_fadd+0xc0>
 800037e:	0008      	movs	r0, r1
 8000380:	2220      	movs	r2, #32
 8000382:	40d8      	lsrs	r0, r3
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4099      	lsls	r1, r3
 8000388:	000b      	movs	r3, r1
 800038a:	1e5a      	subs	r2, r3, #1
 800038c:	4193      	sbcs	r3, r2
 800038e:	4318      	orrs	r0, r3
 8000390:	1a36      	subs	r6, r6, r0
 8000392:	0173      	lsls	r3, r6, #5
 8000394:	d400      	bmi.n	8000398 <__aeabi_fadd+0xc8>
 8000396:	e071      	b.n	800047c <__aeabi_fadd+0x1ac>
 8000398:	01b6      	lsls	r6, r6, #6
 800039a:	09b7      	lsrs	r7, r6, #6
 800039c:	0038      	movs	r0, r7
 800039e:	f000 ff85 	bl	80012ac <__clzsi2>
 80003a2:	003b      	movs	r3, r7
 80003a4:	3805      	subs	r0, #5
 80003a6:	4083      	lsls	r3, r0
 80003a8:	4285      	cmp	r5, r0
 80003aa:	dd4d      	ble.n	8000448 <__aeabi_fadd+0x178>
 80003ac:	4eb4      	ldr	r6, [pc, #720]	@ (8000680 <__aeabi_fadd+0x3b0>)
 80003ae:	1a2d      	subs	r5, r5, r0
 80003b0:	401e      	ands	r6, r3
 80003b2:	075a      	lsls	r2, r3, #29
 80003b4:	d068      	beq.n	8000488 <__aeabi_fadd+0x1b8>
 80003b6:	220f      	movs	r2, #15
 80003b8:	4013      	ands	r3, r2
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d064      	beq.n	8000488 <__aeabi_fadd+0x1b8>
 80003be:	3604      	adds	r6, #4
 80003c0:	0173      	lsls	r3, r6, #5
 80003c2:	d561      	bpl.n	8000488 <__aeabi_fadd+0x1b8>
 80003c4:	1c68      	adds	r0, r5, #1
 80003c6:	2dfe      	cmp	r5, #254	@ 0xfe
 80003c8:	d154      	bne.n	8000474 <__aeabi_fadd+0x1a4>
 80003ca:	20ff      	movs	r0, #255	@ 0xff
 80003cc:	2200      	movs	r2, #0
 80003ce:	05c0      	lsls	r0, r0, #23
 80003d0:	4310      	orrs	r0, r2
 80003d2:	07e4      	lsls	r4, r4, #31
 80003d4:	4320      	orrs	r0, r4
 80003d6:	bcc0      	pop	{r6, r7}
 80003d8:	46b9      	mov	r9, r7
 80003da:	46b0      	mov	r8, r6
 80003dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003de:	22fe      	movs	r2, #254	@ 0xfe
 80003e0:	4690      	mov	r8, r2
 80003e2:	1c68      	adds	r0, r5, #1
 80003e4:	0002      	movs	r2, r0
 80003e6:	4640      	mov	r0, r8
 80003e8:	4210      	tst	r0, r2
 80003ea:	d16b      	bne.n	80004c4 <__aeabi_fadd+0x1f4>
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d000      	beq.n	80003f2 <__aeabi_fadd+0x122>
 80003f0:	e0dd      	b.n	80005ae <__aeabi_fadd+0x2de>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d100      	bne.n	80003f8 <__aeabi_fadd+0x128>
 80003f6:	e102      	b.n	80005fe <__aeabi_fadd+0x32e>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0b3      	beq.n	8000364 <__aeabi_fadd+0x94>
 80003fc:	2280      	movs	r2, #128	@ 0x80
 80003fe:	1a77      	subs	r7, r6, r1
 8000400:	04d2      	lsls	r2, r2, #19
 8000402:	4217      	tst	r7, r2
 8000404:	d100      	bne.n	8000408 <__aeabi_fadd+0x138>
 8000406:	e136      	b.n	8000676 <__aeabi_fadd+0x3a6>
 8000408:	464c      	mov	r4, r9
 800040a:	1b8e      	subs	r6, r1, r6
 800040c:	d061      	beq.n	80004d2 <__aeabi_fadd+0x202>
 800040e:	2001      	movs	r0, #1
 8000410:	4216      	tst	r6, r2
 8000412:	d130      	bne.n	8000476 <__aeabi_fadd+0x1a6>
 8000414:	2300      	movs	r3, #0
 8000416:	08f7      	lsrs	r7, r6, #3
 8000418:	e7a4      	b.n	8000364 <__aeabi_fadd+0x94>
 800041a:	2900      	cmp	r1, #0
 800041c:	d09e      	beq.n	800035c <__aeabi_fadd+0x8c>
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	2b01      	cmp	r3, #1
 8000422:	d100      	bne.n	8000426 <__aeabi_fadd+0x156>
 8000424:	e0ca      	b.n	80005bc <__aeabi_fadd+0x2ec>
 8000426:	2bff      	cmp	r3, #255	@ 0xff
 8000428:	d042      	beq.n	80004b0 <__aeabi_fadd+0x1e0>
 800042a:	0013      	movs	r3, r2
 800042c:	e791      	b.n	8000352 <__aeabi_fadd+0x82>
 800042e:	1a71      	subs	r1, r6, r1
 8000430:	014b      	lsls	r3, r1, #5
 8000432:	d400      	bmi.n	8000436 <__aeabi_fadd+0x166>
 8000434:	e0d1      	b.n	80005da <__aeabi_fadd+0x30a>
 8000436:	018f      	lsls	r7, r1, #6
 8000438:	09bf      	lsrs	r7, r7, #6
 800043a:	0038      	movs	r0, r7
 800043c:	f000 ff36 	bl	80012ac <__clzsi2>
 8000440:	003b      	movs	r3, r7
 8000442:	3805      	subs	r0, #5
 8000444:	4083      	lsls	r3, r0
 8000446:	2501      	movs	r5, #1
 8000448:	2220      	movs	r2, #32
 800044a:	1b40      	subs	r0, r0, r5
 800044c:	3001      	adds	r0, #1
 800044e:	1a12      	subs	r2, r2, r0
 8000450:	001e      	movs	r6, r3
 8000452:	4093      	lsls	r3, r2
 8000454:	40c6      	lsrs	r6, r0
 8000456:	1e5a      	subs	r2, r3, #1
 8000458:	4193      	sbcs	r3, r2
 800045a:	431e      	orrs	r6, r3
 800045c:	d039      	beq.n	80004d2 <__aeabi_fadd+0x202>
 800045e:	0773      	lsls	r3, r6, #29
 8000460:	d100      	bne.n	8000464 <__aeabi_fadd+0x194>
 8000462:	e11b      	b.n	800069c <__aeabi_fadd+0x3cc>
 8000464:	230f      	movs	r3, #15
 8000466:	2500      	movs	r5, #0
 8000468:	4033      	ands	r3, r6
 800046a:	2b04      	cmp	r3, #4
 800046c:	d1a7      	bne.n	80003be <__aeabi_fadd+0xee>
 800046e:	2001      	movs	r0, #1
 8000470:	0172      	lsls	r2, r6, #5
 8000472:	d57c      	bpl.n	800056e <__aeabi_fadd+0x29e>
 8000474:	b2c0      	uxtb	r0, r0
 8000476:	01b2      	lsls	r2, r6, #6
 8000478:	0a52      	lsrs	r2, r2, #9
 800047a:	e7a8      	b.n	80003ce <__aeabi_fadd+0xfe>
 800047c:	0773      	lsls	r3, r6, #29
 800047e:	d003      	beq.n	8000488 <__aeabi_fadd+0x1b8>
 8000480:	230f      	movs	r3, #15
 8000482:	4033      	ands	r3, r6
 8000484:	2b04      	cmp	r3, #4
 8000486:	d19a      	bne.n	80003be <__aeabi_fadd+0xee>
 8000488:	002b      	movs	r3, r5
 800048a:	e767      	b.n	800035c <__aeabi_fadd+0x8c>
 800048c:	2b00      	cmp	r3, #0
 800048e:	d023      	beq.n	80004d8 <__aeabi_fadd+0x208>
 8000490:	1b53      	subs	r3, r2, r5
 8000492:	2d00      	cmp	r5, #0
 8000494:	d17b      	bne.n	800058e <__aeabi_fadd+0x2be>
 8000496:	2e00      	cmp	r6, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fadd+0x1cc>
 800049a:	e086      	b.n	80005aa <__aeabi_fadd+0x2da>
 800049c:	1e5d      	subs	r5, r3, #1
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x1d4>
 80004a2:	e08b      	b.n	80005bc <__aeabi_fadd+0x2ec>
 80004a4:	2bff      	cmp	r3, #255	@ 0xff
 80004a6:	d002      	beq.n	80004ae <__aeabi_fadd+0x1de>
 80004a8:	002b      	movs	r3, r5
 80004aa:	e075      	b.n	8000598 <__aeabi_fadd+0x2c8>
 80004ac:	464c      	mov	r4, r9
 80004ae:	4667      	mov	r7, ip
 80004b0:	2f00      	cmp	r7, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x1e6>
 80004b4:	e789      	b.n	80003ca <__aeabi_fadd+0xfa>
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	03d2      	lsls	r2, r2, #15
 80004ba:	433a      	orrs	r2, r7
 80004bc:	0252      	lsls	r2, r2, #9
 80004be:	20ff      	movs	r0, #255	@ 0xff
 80004c0:	0a52      	lsrs	r2, r2, #9
 80004c2:	e784      	b.n	80003ce <__aeabi_fadd+0xfe>
 80004c4:	1a77      	subs	r7, r6, r1
 80004c6:	017b      	lsls	r3, r7, #5
 80004c8:	d46b      	bmi.n	80005a2 <__aeabi_fadd+0x2d2>
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_fadd+0x200>
 80004ce:	e765      	b.n	800039c <__aeabi_fadd+0xcc>
 80004d0:	2400      	movs	r4, #0
 80004d2:	2000      	movs	r0, #0
 80004d4:	2200      	movs	r2, #0
 80004d6:	e77a      	b.n	80003ce <__aeabi_fadd+0xfe>
 80004d8:	22fe      	movs	r2, #254	@ 0xfe
 80004da:	1c6b      	adds	r3, r5, #1
 80004dc:	421a      	tst	r2, r3
 80004de:	d149      	bne.n	8000574 <__aeabi_fadd+0x2a4>
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fadd+0x216>
 80004e4:	e09f      	b.n	8000626 <__aeabi_fadd+0x356>
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x21c>
 80004ea:	e0ba      	b.n	8000662 <__aeabi_fadd+0x392>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x222>
 80004f0:	e0cf      	b.n	8000692 <__aeabi_fadd+0x3c2>
 80004f2:	1872      	adds	r2, r6, r1
 80004f4:	0153      	lsls	r3, r2, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x22a>
 80004f8:	e0cd      	b.n	8000696 <__aeabi_fadd+0x3c6>
 80004fa:	0192      	lsls	r2, r2, #6
 80004fc:	2001      	movs	r0, #1
 80004fe:	0a52      	lsrs	r2, r2, #9
 8000500:	e765      	b.n	80003ce <__aeabi_fadd+0xfe>
 8000502:	2aff      	cmp	r2, #255	@ 0xff
 8000504:	d0d2      	beq.n	80004ac <__aeabi_fadd+0x1dc>
 8000506:	2080      	movs	r0, #128	@ 0x80
 8000508:	04c0      	lsls	r0, r0, #19
 800050a:	4306      	orrs	r6, r0
 800050c:	2001      	movs	r0, #1
 800050e:	2b1b      	cmp	r3, #27
 8000510:	dc08      	bgt.n	8000524 <__aeabi_fadd+0x254>
 8000512:	0030      	movs	r0, r6
 8000514:	2420      	movs	r4, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	1ae3      	subs	r3, r4, r3
 800051a:	409e      	lsls	r6, r3
 800051c:	0033      	movs	r3, r6
 800051e:	1e5c      	subs	r4, r3, #1
 8000520:	41a3      	sbcs	r3, r4
 8000522:	4318      	orrs	r0, r3
 8000524:	464c      	mov	r4, r9
 8000526:	0015      	movs	r5, r2
 8000528:	1a0e      	subs	r6, r1, r0
 800052a:	e732      	b.n	8000392 <__aeabi_fadd+0xc2>
 800052c:	0008      	movs	r0, r1
 800052e:	2220      	movs	r2, #32
 8000530:	40d8      	lsrs	r0, r3
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4099      	lsls	r1, r3
 8000536:	000b      	movs	r3, r1
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	4193      	sbcs	r3, r2
 800053c:	4303      	orrs	r3, r0
 800053e:	18f6      	adds	r6, r6, r3
 8000540:	0173      	lsls	r3, r6, #5
 8000542:	d59b      	bpl.n	800047c <__aeabi_fadd+0x1ac>
 8000544:	3501      	adds	r5, #1
 8000546:	2dff      	cmp	r5, #255	@ 0xff
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x27c>
 800054a:	e73e      	b.n	80003ca <__aeabi_fadd+0xfa>
 800054c:	2301      	movs	r3, #1
 800054e:	494d      	ldr	r1, [pc, #308]	@ (8000684 <__aeabi_fadd+0x3b4>)
 8000550:	0872      	lsrs	r2, r6, #1
 8000552:	4033      	ands	r3, r6
 8000554:	400a      	ands	r2, r1
 8000556:	431a      	orrs	r2, r3
 8000558:	0016      	movs	r6, r2
 800055a:	0753      	lsls	r3, r2, #29
 800055c:	d004      	beq.n	8000568 <__aeabi_fadd+0x298>
 800055e:	230f      	movs	r3, #15
 8000560:	4013      	ands	r3, r2
 8000562:	2b04      	cmp	r3, #4
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x298>
 8000566:	e72a      	b.n	80003be <__aeabi_fadd+0xee>
 8000568:	0173      	lsls	r3, r6, #5
 800056a:	d500      	bpl.n	800056e <__aeabi_fadd+0x29e>
 800056c:	e72a      	b.n	80003c4 <__aeabi_fadd+0xf4>
 800056e:	002b      	movs	r3, r5
 8000570:	08f7      	lsrs	r7, r6, #3
 8000572:	e6f7      	b.n	8000364 <__aeabi_fadd+0x94>
 8000574:	2bff      	cmp	r3, #255	@ 0xff
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x2aa>
 8000578:	e727      	b.n	80003ca <__aeabi_fadd+0xfa>
 800057a:	1871      	adds	r1, r6, r1
 800057c:	0849      	lsrs	r1, r1, #1
 800057e:	074a      	lsls	r2, r1, #29
 8000580:	d02f      	beq.n	80005e2 <__aeabi_fadd+0x312>
 8000582:	220f      	movs	r2, #15
 8000584:	400a      	ands	r2, r1
 8000586:	2a04      	cmp	r2, #4
 8000588:	d02b      	beq.n	80005e2 <__aeabi_fadd+0x312>
 800058a:	1d0e      	adds	r6, r1, #4
 800058c:	e6e6      	b.n	800035c <__aeabi_fadd+0x8c>
 800058e:	2aff      	cmp	r2, #255	@ 0xff
 8000590:	d08d      	beq.n	80004ae <__aeabi_fadd+0x1de>
 8000592:	2080      	movs	r0, #128	@ 0x80
 8000594:	04c0      	lsls	r0, r0, #19
 8000596:	4306      	orrs	r6, r0
 8000598:	2b1b      	cmp	r3, #27
 800059a:	dd24      	ble.n	80005e6 <__aeabi_fadd+0x316>
 800059c:	0013      	movs	r3, r2
 800059e:	1d4e      	adds	r6, r1, #5
 80005a0:	e6dc      	b.n	800035c <__aeabi_fadd+0x8c>
 80005a2:	464c      	mov	r4, r9
 80005a4:	1b8f      	subs	r7, r1, r6
 80005a6:	e6f9      	b.n	800039c <__aeabi_fadd+0xcc>
 80005a8:	464c      	mov	r4, r9
 80005aa:	000e      	movs	r6, r1
 80005ac:	e6d6      	b.n	800035c <__aeabi_fadd+0x8c>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d149      	bne.n	8000646 <__aeabi_fadd+0x376>
 80005b2:	2900      	cmp	r1, #0
 80005b4:	d068      	beq.n	8000688 <__aeabi_fadd+0x3b8>
 80005b6:	4667      	mov	r7, ip
 80005b8:	464c      	mov	r4, r9
 80005ba:	e77c      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 80005bc:	1870      	adds	r0, r6, r1
 80005be:	0143      	lsls	r3, r0, #5
 80005c0:	d574      	bpl.n	80006ac <__aeabi_fadd+0x3dc>
 80005c2:	4930      	ldr	r1, [pc, #192]	@ (8000684 <__aeabi_fadd+0x3b4>)
 80005c4:	0840      	lsrs	r0, r0, #1
 80005c6:	4001      	ands	r1, r0
 80005c8:	0743      	lsls	r3, r0, #29
 80005ca:	d009      	beq.n	80005e0 <__aeabi_fadd+0x310>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4003      	ands	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d005      	beq.n	80005e0 <__aeabi_fadd+0x310>
 80005d4:	2302      	movs	r3, #2
 80005d6:	1d0e      	adds	r6, r1, #4
 80005d8:	e6c0      	b.n	800035c <__aeabi_fadd+0x8c>
 80005da:	2301      	movs	r3, #1
 80005dc:	08cf      	lsrs	r7, r1, #3
 80005de:	e6c1      	b.n	8000364 <__aeabi_fadd+0x94>
 80005e0:	2302      	movs	r3, #2
 80005e2:	08cf      	lsrs	r7, r1, #3
 80005e4:	e6be      	b.n	8000364 <__aeabi_fadd+0x94>
 80005e6:	2520      	movs	r5, #32
 80005e8:	0030      	movs	r0, r6
 80005ea:	40d8      	lsrs	r0, r3
 80005ec:	1aeb      	subs	r3, r5, r3
 80005ee:	409e      	lsls	r6, r3
 80005f0:	0033      	movs	r3, r6
 80005f2:	1e5d      	subs	r5, r3, #1
 80005f4:	41ab      	sbcs	r3, r5
 80005f6:	4303      	orrs	r3, r0
 80005f8:	0015      	movs	r5, r2
 80005fa:	185e      	adds	r6, r3, r1
 80005fc:	e7a0      	b.n	8000540 <__aeabi_fadd+0x270>
 80005fe:	2900      	cmp	r1, #0
 8000600:	d100      	bne.n	8000604 <__aeabi_fadd+0x334>
 8000602:	e765      	b.n	80004d0 <__aeabi_fadd+0x200>
 8000604:	464c      	mov	r4, r9
 8000606:	4667      	mov	r7, ip
 8000608:	e6ac      	b.n	8000364 <__aeabi_fadd+0x94>
 800060a:	1b8f      	subs	r7, r1, r6
 800060c:	017b      	lsls	r3, r7, #5
 800060e:	d52e      	bpl.n	800066e <__aeabi_fadd+0x39e>
 8000610:	01bf      	lsls	r7, r7, #6
 8000612:	09bf      	lsrs	r7, r7, #6
 8000614:	0038      	movs	r0, r7
 8000616:	f000 fe49 	bl	80012ac <__clzsi2>
 800061a:	003b      	movs	r3, r7
 800061c:	3805      	subs	r0, #5
 800061e:	4083      	lsls	r3, r0
 8000620:	464c      	mov	r4, r9
 8000622:	3501      	adds	r5, #1
 8000624:	e710      	b.n	8000448 <__aeabi_fadd+0x178>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x35c>
 800062a:	e740      	b.n	80004ae <__aeabi_fadd+0x1de>
 800062c:	2900      	cmp	r1, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0x362>
 8000630:	e741      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	429f      	cmp	r7, r3
 8000638:	d200      	bcs.n	800063c <__aeabi_fadd+0x36c>
 800063a:	e73c      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 800063c:	459c      	cmp	ip, r3
 800063e:	d300      	bcc.n	8000642 <__aeabi_fadd+0x372>
 8000640:	e739      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 8000642:	4667      	mov	r7, ip
 8000644:	e737      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 8000646:	2900      	cmp	r1, #0
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x37c>
 800064a:	e734      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	03db      	lsls	r3, r3, #15
 8000650:	429f      	cmp	r7, r3
 8000652:	d200      	bcs.n	8000656 <__aeabi_fadd+0x386>
 8000654:	e72f      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 8000656:	459c      	cmp	ip, r3
 8000658:	d300      	bcc.n	800065c <__aeabi_fadd+0x38c>
 800065a:	e72c      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 800065c:	464c      	mov	r4, r9
 800065e:	4667      	mov	r7, ip
 8000660:	e729      	b.n	80004b6 <__aeabi_fadd+0x1e6>
 8000662:	2900      	cmp	r1, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x398>
 8000666:	e734      	b.n	80004d2 <__aeabi_fadd+0x202>
 8000668:	2300      	movs	r3, #0
 800066a:	08cf      	lsrs	r7, r1, #3
 800066c:	e67a      	b.n	8000364 <__aeabi_fadd+0x94>
 800066e:	464c      	mov	r4, r9
 8000670:	2301      	movs	r3, #1
 8000672:	08ff      	lsrs	r7, r7, #3
 8000674:	e676      	b.n	8000364 <__aeabi_fadd+0x94>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x3ac>
 800067a:	e729      	b.n	80004d0 <__aeabi_fadd+0x200>
 800067c:	08ff      	lsrs	r7, r7, #3
 800067e:	e671      	b.n	8000364 <__aeabi_fadd+0x94>
 8000680:	fbffffff 	.word	0xfbffffff
 8000684:	7dffffff 	.word	0x7dffffff
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	2400      	movs	r4, #0
 800068c:	20ff      	movs	r0, #255	@ 0xff
 800068e:	03d2      	lsls	r2, r2, #15
 8000690:	e69d      	b.n	80003ce <__aeabi_fadd+0xfe>
 8000692:	2300      	movs	r3, #0
 8000694:	e666      	b.n	8000364 <__aeabi_fadd+0x94>
 8000696:	2300      	movs	r3, #0
 8000698:	08d7      	lsrs	r7, r2, #3
 800069a:	e663      	b.n	8000364 <__aeabi_fadd+0x94>
 800069c:	2001      	movs	r0, #1
 800069e:	0172      	lsls	r2, r6, #5
 80006a0:	d500      	bpl.n	80006a4 <__aeabi_fadd+0x3d4>
 80006a2:	e6e7      	b.n	8000474 <__aeabi_fadd+0x1a4>
 80006a4:	0031      	movs	r1, r6
 80006a6:	2300      	movs	r3, #0
 80006a8:	08cf      	lsrs	r7, r1, #3
 80006aa:	e65b      	b.n	8000364 <__aeabi_fadd+0x94>
 80006ac:	2301      	movs	r3, #1
 80006ae:	08c7      	lsrs	r7, r0, #3
 80006b0:	e658      	b.n	8000364 <__aeabi_fadd+0x94>
 80006b2:	46c0      	nop			@ (mov r8, r8)

080006b4 <__aeabi_fdiv>:
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	4646      	mov	r6, r8
 80006b8:	464f      	mov	r7, r9
 80006ba:	46d6      	mov	lr, sl
 80006bc:	0245      	lsls	r5, r0, #9
 80006be:	b5c0      	push	{r6, r7, lr}
 80006c0:	0fc3      	lsrs	r3, r0, #31
 80006c2:	0047      	lsls	r7, r0, #1
 80006c4:	4698      	mov	r8, r3
 80006c6:	1c0e      	adds	r6, r1, #0
 80006c8:	0a6d      	lsrs	r5, r5, #9
 80006ca:	0e3f      	lsrs	r7, r7, #24
 80006cc:	d05b      	beq.n	8000786 <__aeabi_fdiv+0xd2>
 80006ce:	2fff      	cmp	r7, #255	@ 0xff
 80006d0:	d021      	beq.n	8000716 <__aeabi_fdiv+0x62>
 80006d2:	2380      	movs	r3, #128	@ 0x80
 80006d4:	00ed      	lsls	r5, r5, #3
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431d      	orrs	r5, r3
 80006da:	2300      	movs	r3, #0
 80006dc:	4699      	mov	r9, r3
 80006de:	469a      	mov	sl, r3
 80006e0:	3f7f      	subs	r7, #127	@ 0x7f
 80006e2:	0274      	lsls	r4, r6, #9
 80006e4:	0073      	lsls	r3, r6, #1
 80006e6:	0a64      	lsrs	r4, r4, #9
 80006e8:	0e1b      	lsrs	r3, r3, #24
 80006ea:	0ff6      	lsrs	r6, r6, #31
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d020      	beq.n	8000732 <__aeabi_fdiv+0x7e>
 80006f0:	2bff      	cmp	r3, #255	@ 0xff
 80006f2:	d043      	beq.n	800077c <__aeabi_fdiv+0xc8>
 80006f4:	2280      	movs	r2, #128	@ 0x80
 80006f6:	2000      	movs	r0, #0
 80006f8:	00e4      	lsls	r4, r4, #3
 80006fa:	04d2      	lsls	r2, r2, #19
 80006fc:	4314      	orrs	r4, r2
 80006fe:	3b7f      	subs	r3, #127	@ 0x7f
 8000700:	4642      	mov	r2, r8
 8000702:	1aff      	subs	r7, r7, r3
 8000704:	464b      	mov	r3, r9
 8000706:	4072      	eors	r2, r6
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d900      	bls.n	800070e <__aeabi_fdiv+0x5a>
 800070c:	e09d      	b.n	800084a <__aeabi_fdiv+0x196>
 800070e:	4971      	ldr	r1, [pc, #452]	@ (80008d4 <__aeabi_fdiv+0x220>)
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	58cb      	ldr	r3, [r1, r3]
 8000714:	469f      	mov	pc, r3
 8000716:	2d00      	cmp	r5, #0
 8000718:	d15a      	bne.n	80007d0 <__aeabi_fdiv+0x11c>
 800071a:	2308      	movs	r3, #8
 800071c:	4699      	mov	r9, r3
 800071e:	3b06      	subs	r3, #6
 8000720:	0274      	lsls	r4, r6, #9
 8000722:	469a      	mov	sl, r3
 8000724:	0073      	lsls	r3, r6, #1
 8000726:	27ff      	movs	r7, #255	@ 0xff
 8000728:	0a64      	lsrs	r4, r4, #9
 800072a:	0e1b      	lsrs	r3, r3, #24
 800072c:	0ff6      	lsrs	r6, r6, #31
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1de      	bne.n	80006f0 <__aeabi_fdiv+0x3c>
 8000732:	2c00      	cmp	r4, #0
 8000734:	d13b      	bne.n	80007ae <__aeabi_fdiv+0xfa>
 8000736:	2301      	movs	r3, #1
 8000738:	4642      	mov	r2, r8
 800073a:	4649      	mov	r1, r9
 800073c:	4072      	eors	r2, r6
 800073e:	4319      	orrs	r1, r3
 8000740:	290e      	cmp	r1, #14
 8000742:	d818      	bhi.n	8000776 <__aeabi_fdiv+0xc2>
 8000744:	4864      	ldr	r0, [pc, #400]	@ (80008d8 <__aeabi_fdiv+0x224>)
 8000746:	0089      	lsls	r1, r1, #2
 8000748:	5841      	ldr	r1, [r0, r1]
 800074a:	468f      	mov	pc, r1
 800074c:	4653      	mov	r3, sl
 800074e:	2b02      	cmp	r3, #2
 8000750:	d100      	bne.n	8000754 <__aeabi_fdiv+0xa0>
 8000752:	e0b8      	b.n	80008c6 <__aeabi_fdiv+0x212>
 8000754:	2b03      	cmp	r3, #3
 8000756:	d06e      	beq.n	8000836 <__aeabi_fdiv+0x182>
 8000758:	4642      	mov	r2, r8
 800075a:	002c      	movs	r4, r5
 800075c:	2b01      	cmp	r3, #1
 800075e:	d140      	bne.n	80007e2 <__aeabi_fdiv+0x12e>
 8000760:	2000      	movs	r0, #0
 8000762:	2400      	movs	r4, #0
 8000764:	05c0      	lsls	r0, r0, #23
 8000766:	4320      	orrs	r0, r4
 8000768:	07d2      	lsls	r2, r2, #31
 800076a:	4310      	orrs	r0, r2
 800076c:	bce0      	pop	{r5, r6, r7}
 800076e:	46ba      	mov	sl, r7
 8000770:	46b1      	mov	r9, r6
 8000772:	46a8      	mov	r8, r5
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	20ff      	movs	r0, #255	@ 0xff
 8000778:	2400      	movs	r4, #0
 800077a:	e7f3      	b.n	8000764 <__aeabi_fdiv+0xb0>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d120      	bne.n	80007c2 <__aeabi_fdiv+0x10e>
 8000780:	2302      	movs	r3, #2
 8000782:	3fff      	subs	r7, #255	@ 0xff
 8000784:	e7d8      	b.n	8000738 <__aeabi_fdiv+0x84>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d105      	bne.n	8000796 <__aeabi_fdiv+0xe2>
 800078a:	2304      	movs	r3, #4
 800078c:	4699      	mov	r9, r3
 800078e:	3b03      	subs	r3, #3
 8000790:	2700      	movs	r7, #0
 8000792:	469a      	mov	sl, r3
 8000794:	e7a5      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 8000796:	0028      	movs	r0, r5
 8000798:	f000 fd88 	bl	80012ac <__clzsi2>
 800079c:	2776      	movs	r7, #118	@ 0x76
 800079e:	1f43      	subs	r3, r0, #5
 80007a0:	409d      	lsls	r5, r3
 80007a2:	2300      	movs	r3, #0
 80007a4:	427f      	negs	r7, r7
 80007a6:	4699      	mov	r9, r3
 80007a8:	469a      	mov	sl, r3
 80007aa:	1a3f      	subs	r7, r7, r0
 80007ac:	e799      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f000 fd7c 	bl	80012ac <__clzsi2>
 80007b4:	1f43      	subs	r3, r0, #5
 80007b6:	409c      	lsls	r4, r3
 80007b8:	2376      	movs	r3, #118	@ 0x76
 80007ba:	425b      	negs	r3, r3
 80007bc:	1a1b      	subs	r3, r3, r0
 80007be:	2000      	movs	r0, #0
 80007c0:	e79e      	b.n	8000700 <__aeabi_fdiv+0x4c>
 80007c2:	2303      	movs	r3, #3
 80007c4:	464a      	mov	r2, r9
 80007c6:	431a      	orrs	r2, r3
 80007c8:	4691      	mov	r9, r2
 80007ca:	2003      	movs	r0, #3
 80007cc:	33fc      	adds	r3, #252	@ 0xfc
 80007ce:	e797      	b.n	8000700 <__aeabi_fdiv+0x4c>
 80007d0:	230c      	movs	r3, #12
 80007d2:	4699      	mov	r9, r3
 80007d4:	3b09      	subs	r3, #9
 80007d6:	27ff      	movs	r7, #255	@ 0xff
 80007d8:	469a      	mov	sl, r3
 80007da:	e782      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007dc:	2803      	cmp	r0, #3
 80007de:	d02c      	beq.n	800083a <__aeabi_fdiv+0x186>
 80007e0:	0032      	movs	r2, r6
 80007e2:	0038      	movs	r0, r7
 80007e4:	307f      	adds	r0, #127	@ 0x7f
 80007e6:	2800      	cmp	r0, #0
 80007e8:	dd47      	ble.n	800087a <__aeabi_fdiv+0x1c6>
 80007ea:	0763      	lsls	r3, r4, #29
 80007ec:	d004      	beq.n	80007f8 <__aeabi_fdiv+0x144>
 80007ee:	230f      	movs	r3, #15
 80007f0:	4023      	ands	r3, r4
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fdiv+0x144>
 80007f6:	3404      	adds	r4, #4
 80007f8:	0123      	lsls	r3, r4, #4
 80007fa:	d503      	bpl.n	8000804 <__aeabi_fdiv+0x150>
 80007fc:	0038      	movs	r0, r7
 80007fe:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <__aeabi_fdiv+0x228>)
 8000800:	3080      	adds	r0, #128	@ 0x80
 8000802:	401c      	ands	r4, r3
 8000804:	28fe      	cmp	r0, #254	@ 0xfe
 8000806:	dcb6      	bgt.n	8000776 <__aeabi_fdiv+0xc2>
 8000808:	01a4      	lsls	r4, r4, #6
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	b2c0      	uxtb	r0, r0
 800080e:	e7a9      	b.n	8000764 <__aeabi_fdiv+0xb0>
 8000810:	2480      	movs	r4, #128	@ 0x80
 8000812:	2200      	movs	r2, #0
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	03e4      	lsls	r4, r4, #15
 8000818:	e7a4      	b.n	8000764 <__aeabi_fdiv+0xb0>
 800081a:	2380      	movs	r3, #128	@ 0x80
 800081c:	03db      	lsls	r3, r3, #15
 800081e:	421d      	tst	r5, r3
 8000820:	d001      	beq.n	8000826 <__aeabi_fdiv+0x172>
 8000822:	421c      	tst	r4, r3
 8000824:	d00b      	beq.n	800083e <__aeabi_fdiv+0x18a>
 8000826:	2480      	movs	r4, #128	@ 0x80
 8000828:	03e4      	lsls	r4, r4, #15
 800082a:	432c      	orrs	r4, r5
 800082c:	0264      	lsls	r4, r4, #9
 800082e:	4642      	mov	r2, r8
 8000830:	20ff      	movs	r0, #255	@ 0xff
 8000832:	0a64      	lsrs	r4, r4, #9
 8000834:	e796      	b.n	8000764 <__aeabi_fdiv+0xb0>
 8000836:	4646      	mov	r6, r8
 8000838:	002c      	movs	r4, r5
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	03db      	lsls	r3, r3, #15
 800083e:	431c      	orrs	r4, r3
 8000840:	0264      	lsls	r4, r4, #9
 8000842:	0032      	movs	r2, r6
 8000844:	20ff      	movs	r0, #255	@ 0xff
 8000846:	0a64      	lsrs	r4, r4, #9
 8000848:	e78c      	b.n	8000764 <__aeabi_fdiv+0xb0>
 800084a:	016d      	lsls	r5, r5, #5
 800084c:	0160      	lsls	r0, r4, #5
 800084e:	4285      	cmp	r5, r0
 8000850:	d22d      	bcs.n	80008ae <__aeabi_fdiv+0x1fa>
 8000852:	231b      	movs	r3, #27
 8000854:	2400      	movs	r4, #0
 8000856:	3f01      	subs	r7, #1
 8000858:	2601      	movs	r6, #1
 800085a:	0029      	movs	r1, r5
 800085c:	0064      	lsls	r4, r4, #1
 800085e:	006d      	lsls	r5, r5, #1
 8000860:	2900      	cmp	r1, #0
 8000862:	db01      	blt.n	8000868 <__aeabi_fdiv+0x1b4>
 8000864:	4285      	cmp	r5, r0
 8000866:	d301      	bcc.n	800086c <__aeabi_fdiv+0x1b8>
 8000868:	1a2d      	subs	r5, r5, r0
 800086a:	4334      	orrs	r4, r6
 800086c:	3b01      	subs	r3, #1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f3      	bne.n	800085a <__aeabi_fdiv+0x1a6>
 8000872:	1e6b      	subs	r3, r5, #1
 8000874:	419d      	sbcs	r5, r3
 8000876:	432c      	orrs	r4, r5
 8000878:	e7b3      	b.n	80007e2 <__aeabi_fdiv+0x12e>
 800087a:	2301      	movs	r3, #1
 800087c:	1a1b      	subs	r3, r3, r0
 800087e:	2b1b      	cmp	r3, #27
 8000880:	dd00      	ble.n	8000884 <__aeabi_fdiv+0x1d0>
 8000882:	e76d      	b.n	8000760 <__aeabi_fdiv+0xac>
 8000884:	0021      	movs	r1, r4
 8000886:	379e      	adds	r7, #158	@ 0x9e
 8000888:	40d9      	lsrs	r1, r3
 800088a:	40bc      	lsls	r4, r7
 800088c:	000b      	movs	r3, r1
 800088e:	1e61      	subs	r1, r4, #1
 8000890:	418c      	sbcs	r4, r1
 8000892:	4323      	orrs	r3, r4
 8000894:	0759      	lsls	r1, r3, #29
 8000896:	d004      	beq.n	80008a2 <__aeabi_fdiv+0x1ee>
 8000898:	210f      	movs	r1, #15
 800089a:	4019      	ands	r1, r3
 800089c:	2904      	cmp	r1, #4
 800089e:	d000      	beq.n	80008a2 <__aeabi_fdiv+0x1ee>
 80008a0:	3304      	adds	r3, #4
 80008a2:	0159      	lsls	r1, r3, #5
 80008a4:	d413      	bmi.n	80008ce <__aeabi_fdiv+0x21a>
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	2000      	movs	r0, #0
 80008aa:	0a5c      	lsrs	r4, r3, #9
 80008ac:	e75a      	b.n	8000764 <__aeabi_fdiv+0xb0>
 80008ae:	231a      	movs	r3, #26
 80008b0:	2401      	movs	r4, #1
 80008b2:	1a2d      	subs	r5, r5, r0
 80008b4:	e7d0      	b.n	8000858 <__aeabi_fdiv+0x1a4>
 80008b6:	1e98      	subs	r0, r3, #2
 80008b8:	4243      	negs	r3, r0
 80008ba:	4158      	adcs	r0, r3
 80008bc:	4240      	negs	r0, r0
 80008be:	0032      	movs	r2, r6
 80008c0:	2400      	movs	r4, #0
 80008c2:	b2c0      	uxtb	r0, r0
 80008c4:	e74e      	b.n	8000764 <__aeabi_fdiv+0xb0>
 80008c6:	4642      	mov	r2, r8
 80008c8:	20ff      	movs	r0, #255	@ 0xff
 80008ca:	2400      	movs	r4, #0
 80008cc:	e74a      	b.n	8000764 <__aeabi_fdiv+0xb0>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2400      	movs	r4, #0
 80008d2:	e747      	b.n	8000764 <__aeabi_fdiv+0xb0>
 80008d4:	080050e0 	.word	0x080050e0
 80008d8:	08005120 	.word	0x08005120
 80008dc:	f7ffffff 	.word	0xf7ffffff

080008e0 <__eqsf2>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	0042      	lsls	r2, r0, #1
 80008e4:	024e      	lsls	r6, r1, #9
 80008e6:	004c      	lsls	r4, r1, #1
 80008e8:	0245      	lsls	r5, r0, #9
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	0e12      	lsrs	r2, r2, #24
 80008ee:	0fc3      	lsrs	r3, r0, #31
 80008f0:	0a76      	lsrs	r6, r6, #9
 80008f2:	0e24      	lsrs	r4, r4, #24
 80008f4:	0fc9      	lsrs	r1, r1, #31
 80008f6:	2aff      	cmp	r2, #255	@ 0xff
 80008f8:	d010      	beq.n	800091c <__eqsf2+0x3c>
 80008fa:	2cff      	cmp	r4, #255	@ 0xff
 80008fc:	d00c      	beq.n	8000918 <__eqsf2+0x38>
 80008fe:	2001      	movs	r0, #1
 8000900:	42a2      	cmp	r2, r4
 8000902:	d10a      	bne.n	800091a <__eqsf2+0x3a>
 8000904:	42b5      	cmp	r5, r6
 8000906:	d108      	bne.n	800091a <__eqsf2+0x3a>
 8000908:	428b      	cmp	r3, r1
 800090a:	d00f      	beq.n	800092c <__eqsf2+0x4c>
 800090c:	2a00      	cmp	r2, #0
 800090e:	d104      	bne.n	800091a <__eqsf2+0x3a>
 8000910:	0028      	movs	r0, r5
 8000912:	1e43      	subs	r3, r0, #1
 8000914:	4198      	sbcs	r0, r3
 8000916:	e000      	b.n	800091a <__eqsf2+0x3a>
 8000918:	2001      	movs	r0, #1
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	2001      	movs	r0, #1
 800091e:	2cff      	cmp	r4, #255	@ 0xff
 8000920:	d1fb      	bne.n	800091a <__eqsf2+0x3a>
 8000922:	4335      	orrs	r5, r6
 8000924:	d1f9      	bne.n	800091a <__eqsf2+0x3a>
 8000926:	404b      	eors	r3, r1
 8000928:	0018      	movs	r0, r3
 800092a:	e7f6      	b.n	800091a <__eqsf2+0x3a>
 800092c:	2000      	movs	r0, #0
 800092e:	e7f4      	b.n	800091a <__eqsf2+0x3a>

08000930 <__gesf2>:
 8000930:	b530      	push	{r4, r5, lr}
 8000932:	0042      	lsls	r2, r0, #1
 8000934:	0244      	lsls	r4, r0, #9
 8000936:	024d      	lsls	r5, r1, #9
 8000938:	0fc3      	lsrs	r3, r0, #31
 800093a:	0048      	lsls	r0, r1, #1
 800093c:	0a64      	lsrs	r4, r4, #9
 800093e:	0e12      	lsrs	r2, r2, #24
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e00      	lsrs	r0, r0, #24
 8000944:	0fc9      	lsrs	r1, r1, #31
 8000946:	2aff      	cmp	r2, #255	@ 0xff
 8000948:	d018      	beq.n	800097c <__gesf2+0x4c>
 800094a:	28ff      	cmp	r0, #255	@ 0xff
 800094c:	d00a      	beq.n	8000964 <__gesf2+0x34>
 800094e:	2a00      	cmp	r2, #0
 8000950:	d11e      	bne.n	8000990 <__gesf2+0x60>
 8000952:	2800      	cmp	r0, #0
 8000954:	d10a      	bne.n	800096c <__gesf2+0x3c>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d029      	beq.n	80009ae <__gesf2+0x7e>
 800095a:	2c00      	cmp	r4, #0
 800095c:	d12d      	bne.n	80009ba <__gesf2+0x8a>
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	3801      	subs	r0, #1
 8000962:	bd30      	pop	{r4, r5, pc}
 8000964:	2d00      	cmp	r5, #0
 8000966:	d125      	bne.n	80009b4 <__gesf2+0x84>
 8000968:	2a00      	cmp	r2, #0
 800096a:	d101      	bne.n	8000970 <__gesf2+0x40>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d0f6      	beq.n	800095e <__gesf2+0x2e>
 8000970:	428b      	cmp	r3, r1
 8000972:	d019      	beq.n	80009a8 <__gesf2+0x78>
 8000974:	2001      	movs	r0, #1
 8000976:	425b      	negs	r3, r3
 8000978:	4318      	orrs	r0, r3
 800097a:	e7f2      	b.n	8000962 <__gesf2+0x32>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d119      	bne.n	80009b4 <__gesf2+0x84>
 8000980:	28ff      	cmp	r0, #255	@ 0xff
 8000982:	d1f7      	bne.n	8000974 <__gesf2+0x44>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d115      	bne.n	80009b4 <__gesf2+0x84>
 8000988:	2000      	movs	r0, #0
 800098a:	428b      	cmp	r3, r1
 800098c:	d1f2      	bne.n	8000974 <__gesf2+0x44>
 800098e:	e7e8      	b.n	8000962 <__gesf2+0x32>
 8000990:	2800      	cmp	r0, #0
 8000992:	d0ef      	beq.n	8000974 <__gesf2+0x44>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1ed      	bne.n	8000974 <__gesf2+0x44>
 8000998:	4282      	cmp	r2, r0
 800099a:	dceb      	bgt.n	8000974 <__gesf2+0x44>
 800099c:	db04      	blt.n	80009a8 <__gesf2+0x78>
 800099e:	42ac      	cmp	r4, r5
 80009a0:	d8e8      	bhi.n	8000974 <__gesf2+0x44>
 80009a2:	2000      	movs	r0, #0
 80009a4:	42ac      	cmp	r4, r5
 80009a6:	d2dc      	bcs.n	8000962 <__gesf2+0x32>
 80009a8:	0058      	lsls	r0, r3, #1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7d9      	b.n	8000962 <__gesf2+0x32>
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d0d7      	beq.n	8000962 <__gesf2+0x32>
 80009b2:	e7df      	b.n	8000974 <__gesf2+0x44>
 80009b4:	2002      	movs	r0, #2
 80009b6:	4240      	negs	r0, r0
 80009b8:	e7d3      	b.n	8000962 <__gesf2+0x32>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d1da      	bne.n	8000974 <__gesf2+0x44>
 80009be:	e7ee      	b.n	800099e <__gesf2+0x6e>

080009c0 <__lesf2>:
 80009c0:	b530      	push	{r4, r5, lr}
 80009c2:	0042      	lsls	r2, r0, #1
 80009c4:	0244      	lsls	r4, r0, #9
 80009c6:	024d      	lsls	r5, r1, #9
 80009c8:	0fc3      	lsrs	r3, r0, #31
 80009ca:	0048      	lsls	r0, r1, #1
 80009cc:	0a64      	lsrs	r4, r4, #9
 80009ce:	0e12      	lsrs	r2, r2, #24
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	0e00      	lsrs	r0, r0, #24
 80009d4:	0fc9      	lsrs	r1, r1, #31
 80009d6:	2aff      	cmp	r2, #255	@ 0xff
 80009d8:	d017      	beq.n	8000a0a <__lesf2+0x4a>
 80009da:	28ff      	cmp	r0, #255	@ 0xff
 80009dc:	d00a      	beq.n	80009f4 <__lesf2+0x34>
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d11b      	bne.n	8000a1a <__lesf2+0x5a>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d10a      	bne.n	80009fc <__lesf2+0x3c>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d01d      	beq.n	8000a26 <__lesf2+0x66>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d12d      	bne.n	8000a4a <__lesf2+0x8a>
 80009ee:	0048      	lsls	r0, r1, #1
 80009f0:	3801      	subs	r0, #1
 80009f2:	e011      	b.n	8000a18 <__lesf2+0x58>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d10e      	bne.n	8000a16 <__lesf2+0x56>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d101      	bne.n	8000a00 <__lesf2+0x40>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d0f6      	beq.n	80009ee <__lesf2+0x2e>
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d10c      	bne.n	8000a1e <__lesf2+0x5e>
 8000a04:	0058      	lsls	r0, r3, #1
 8000a06:	3801      	subs	r0, #1
 8000a08:	e006      	b.n	8000a18 <__lesf2+0x58>
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d103      	bne.n	8000a16 <__lesf2+0x56>
 8000a0e:	28ff      	cmp	r0, #255	@ 0xff
 8000a10:	d105      	bne.n	8000a1e <__lesf2+0x5e>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d015      	beq.n	8000a42 <__lesf2+0x82>
 8000a16:	2002      	movs	r0, #2
 8000a18:	bd30      	pop	{r4, r5, pc}
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d106      	bne.n	8000a2c <__lesf2+0x6c>
 8000a1e:	2001      	movs	r0, #1
 8000a20:	425b      	negs	r3, r3
 8000a22:	4318      	orrs	r0, r3
 8000a24:	e7f8      	b.n	8000a18 <__lesf2+0x58>
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d0f6      	beq.n	8000a18 <__lesf2+0x58>
 8000a2a:	e7f8      	b.n	8000a1e <__lesf2+0x5e>
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d1f6      	bne.n	8000a1e <__lesf2+0x5e>
 8000a30:	4282      	cmp	r2, r0
 8000a32:	dcf4      	bgt.n	8000a1e <__lesf2+0x5e>
 8000a34:	dbe6      	blt.n	8000a04 <__lesf2+0x44>
 8000a36:	42ac      	cmp	r4, r5
 8000a38:	d8f1      	bhi.n	8000a1e <__lesf2+0x5e>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	42ac      	cmp	r4, r5
 8000a3e:	d2eb      	bcs.n	8000a18 <__lesf2+0x58>
 8000a40:	e7e0      	b.n	8000a04 <__lesf2+0x44>
 8000a42:	2000      	movs	r0, #0
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d1ea      	bne.n	8000a1e <__lesf2+0x5e>
 8000a48:	e7e6      	b.n	8000a18 <__lesf2+0x58>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d1e7      	bne.n	8000a1e <__lesf2+0x5e>
 8000a4e:	e7f2      	b.n	8000a36 <__lesf2+0x76>

08000a50 <__aeabi_fmul>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	464f      	mov	r7, r9
 8000a54:	4646      	mov	r6, r8
 8000a56:	46d6      	mov	lr, sl
 8000a58:	0044      	lsls	r4, r0, #1
 8000a5a:	b5c0      	push	{r6, r7, lr}
 8000a5c:	0246      	lsls	r6, r0, #9
 8000a5e:	1c0f      	adds	r7, r1, #0
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc5      	lsrs	r5, r0, #31
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0x1c>
 8000a6a:	e0da      	b.n	8000c22 <__aeabi_fmul+0x1d2>
 8000a6c:	2cff      	cmp	r4, #255	@ 0xff
 8000a6e:	d074      	beq.n	8000b5a <__aeabi_fmul+0x10a>
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	00f6      	lsls	r6, r6, #3
 8000a74:	04db      	lsls	r3, r3, #19
 8000a76:	431e      	orrs	r6, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	4699      	mov	r9, r3
 8000a7c:	469a      	mov	sl, r3
 8000a7e:	3c7f      	subs	r4, #127	@ 0x7f
 8000a80:	027b      	lsls	r3, r7, #9
 8000a82:	0a5b      	lsrs	r3, r3, #9
 8000a84:	4698      	mov	r8, r3
 8000a86:	007b      	lsls	r3, r7, #1
 8000a88:	0e1b      	lsrs	r3, r3, #24
 8000a8a:	0fff      	lsrs	r7, r7, #31
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d074      	beq.n	8000b7a <__aeabi_fmul+0x12a>
 8000a90:	2bff      	cmp	r3, #255	@ 0xff
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fmul+0x46>
 8000a94:	e08e      	b.n	8000bb4 <__aeabi_fmul+0x164>
 8000a96:	4642      	mov	r2, r8
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	00d2      	lsls	r2, r2, #3
 8000a9c:	04c9      	lsls	r1, r1, #19
 8000a9e:	4311      	orrs	r1, r2
 8000aa0:	3b7f      	subs	r3, #127	@ 0x7f
 8000aa2:	002a      	movs	r2, r5
 8000aa4:	18e4      	adds	r4, r4, r3
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	407a      	eors	r2, r7
 8000aaa:	4688      	mov	r8, r1
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	dc75      	bgt.n	8000b9e <__aeabi_fmul+0x14e>
 8000ab2:	464b      	mov	r3, r9
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	dd0f      	ble.n	8000ada <__aeabi_fmul+0x8a>
 8000aba:	4649      	mov	r1, r9
 8000abc:	2301      	movs	r3, #1
 8000abe:	408b      	lsls	r3, r1
 8000ac0:	21a6      	movs	r1, #166	@ 0xa6
 8000ac2:	00c9      	lsls	r1, r1, #3
 8000ac4:	420b      	tst	r3, r1
 8000ac6:	d169      	bne.n	8000b9c <__aeabi_fmul+0x14c>
 8000ac8:	2190      	movs	r1, #144	@ 0x90
 8000aca:	0089      	lsls	r1, r1, #2
 8000acc:	420b      	tst	r3, r1
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fmul+0x82>
 8000ad0:	e100      	b.n	8000cd4 <__aeabi_fmul+0x284>
 8000ad2:	2188      	movs	r1, #136	@ 0x88
 8000ad4:	4219      	tst	r1, r3
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fmul+0x8a>
 8000ad8:	e0f5      	b.n	8000cc6 <__aeabi_fmul+0x276>
 8000ada:	4641      	mov	r1, r8
 8000adc:	0409      	lsls	r1, r1, #16
 8000ade:	0c09      	lsrs	r1, r1, #16
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	0008      	movs	r0, r1
 8000ae4:	0c35      	lsrs	r5, r6, #16
 8000ae6:	0436      	lsls	r6, r6, #16
 8000ae8:	0c1b      	lsrs	r3, r3, #16
 8000aea:	0c36      	lsrs	r6, r6, #16
 8000aec:	4370      	muls	r0, r6
 8000aee:	4369      	muls	r1, r5
 8000af0:	435e      	muls	r6, r3
 8000af2:	435d      	muls	r5, r3
 8000af4:	1876      	adds	r6, r6, r1
 8000af6:	0c03      	lsrs	r3, r0, #16
 8000af8:	199b      	adds	r3, r3, r6
 8000afa:	4299      	cmp	r1, r3
 8000afc:	d903      	bls.n	8000b06 <__aeabi_fmul+0xb6>
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	468c      	mov	ip, r1
 8000b04:	4465      	add	r5, ip
 8000b06:	0400      	lsls	r0, r0, #16
 8000b08:	0419      	lsls	r1, r3, #16
 8000b0a:	0c00      	lsrs	r0, r0, #16
 8000b0c:	1809      	adds	r1, r1, r0
 8000b0e:	018e      	lsls	r6, r1, #6
 8000b10:	1e70      	subs	r0, r6, #1
 8000b12:	4186      	sbcs	r6, r0
 8000b14:	0c1b      	lsrs	r3, r3, #16
 8000b16:	0e89      	lsrs	r1, r1, #26
 8000b18:	195b      	adds	r3, r3, r5
 8000b1a:	430e      	orrs	r6, r1
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	431e      	orrs	r6, r3
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	d46c      	bmi.n	8000bfe <__aeabi_fmul+0x1ae>
 8000b24:	0023      	movs	r3, r4
 8000b26:	337f      	adds	r3, #127	@ 0x7f
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_fmul+0xde>
 8000b2c:	e0b1      	b.n	8000c92 <__aeabi_fmul+0x242>
 8000b2e:	0015      	movs	r5, r2
 8000b30:	0771      	lsls	r1, r6, #29
 8000b32:	d00b      	beq.n	8000b4c <__aeabi_fmul+0xfc>
 8000b34:	200f      	movs	r0, #15
 8000b36:	0021      	movs	r1, r4
 8000b38:	4030      	ands	r0, r6
 8000b3a:	2804      	cmp	r0, #4
 8000b3c:	d006      	beq.n	8000b4c <__aeabi_fmul+0xfc>
 8000b3e:	3604      	adds	r6, #4
 8000b40:	0132      	lsls	r2, r6, #4
 8000b42:	d503      	bpl.n	8000b4c <__aeabi_fmul+0xfc>
 8000b44:	4b6e      	ldr	r3, [pc, #440]	@ (8000d00 <__aeabi_fmul+0x2b0>)
 8000b46:	401e      	ands	r6, r3
 8000b48:	000b      	movs	r3, r1
 8000b4a:	3380      	adds	r3, #128	@ 0x80
 8000b4c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fmul+0x102>
 8000b50:	e0bd      	b.n	8000cce <__aeabi_fmul+0x27e>
 8000b52:	01b2      	lsls	r2, r6, #6
 8000b54:	0a52      	lsrs	r2, r2, #9
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	e048      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fmul+0x110>
 8000b5e:	e092      	b.n	8000c86 <__aeabi_fmul+0x236>
 8000b60:	2308      	movs	r3, #8
 8000b62:	4699      	mov	r9, r3
 8000b64:	3b06      	subs	r3, #6
 8000b66:	469a      	mov	sl, r3
 8000b68:	027b      	lsls	r3, r7, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	007b      	lsls	r3, r7, #1
 8000b70:	24ff      	movs	r4, #255	@ 0xff
 8000b72:	0e1b      	lsrs	r3, r3, #24
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d18a      	bne.n	8000a90 <__aeabi_fmul+0x40>
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d164      	bne.n	8000c4a <__aeabi_fmul+0x1fa>
 8000b80:	4649      	mov	r1, r9
 8000b82:	3201      	adds	r2, #1
 8000b84:	4311      	orrs	r1, r2
 8000b86:	4689      	mov	r9, r1
 8000b88:	290a      	cmp	r1, #10
 8000b8a:	dc08      	bgt.n	8000b9e <__aeabi_fmul+0x14e>
 8000b8c:	407d      	eors	r5, r7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	b2ea      	uxtb	r2, r5
 8000b92:	2902      	cmp	r1, #2
 8000b94:	dc91      	bgt.n	8000aba <__aeabi_fmul+0x6a>
 8000b96:	0015      	movs	r5, r2
 8000b98:	2200      	movs	r2, #0
 8000b9a:	e027      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000b9c:	0015      	movs	r5, r2
 8000b9e:	4653      	mov	r3, sl
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fmul+0x156>
 8000ba4:	e093      	b.n	8000cce <__aeabi_fmul+0x27e>
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d01a      	beq.n	8000be0 <__aeabi_fmul+0x190>
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12c      	bne.n	8000c08 <__aeabi_fmul+0x1b8>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e01b      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000bb4:	4643      	mov	r3, r8
 8000bb6:	34ff      	adds	r4, #255	@ 0xff
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d055      	beq.n	8000c68 <__aeabi_fmul+0x218>
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_fmul+0x17a>
 8000bc8:	e092      	b.n	8000cf0 <__aeabi_fmul+0x2a0>
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x180>
 8000bce:	e08c      	b.n	8000cea <__aeabi_fmul+0x29a>
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	03d2      	lsls	r2, r2, #15
 8000bd4:	4216      	tst	r6, r2
 8000bd6:	d003      	beq.n	8000be0 <__aeabi_fmul+0x190>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	4213      	tst	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fmul+0x190>
 8000bde:	e07d      	b.n	8000cdc <__aeabi_fmul+0x28c>
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	4332      	orrs	r2, r6
 8000be6:	0252      	lsls	r2, r2, #9
 8000be8:	0a52      	lsrs	r2, r2, #9
 8000bea:	23ff      	movs	r3, #255	@ 0xff
 8000bec:	05d8      	lsls	r0, r3, #23
 8000bee:	07ed      	lsls	r5, r5, #31
 8000bf0:	4310      	orrs	r0, r2
 8000bf2:	4328      	orrs	r0, r5
 8000bf4:	bce0      	pop	{r5, r6, r7}
 8000bf6:	46ba      	mov	sl, r7
 8000bf8:	46b1      	mov	r9, r6
 8000bfa:	46a8      	mov	r8, r5
 8000bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfe:	2301      	movs	r3, #1
 8000c00:	0015      	movs	r5, r2
 8000c02:	0871      	lsrs	r1, r6, #1
 8000c04:	401e      	ands	r6, r3
 8000c06:	430e      	orrs	r6, r1
 8000c08:	0023      	movs	r3, r4
 8000c0a:	3380      	adds	r3, #128	@ 0x80
 8000c0c:	1c61      	adds	r1, r4, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd41      	ble.n	8000c96 <__aeabi_fmul+0x246>
 8000c12:	0772      	lsls	r2, r6, #29
 8000c14:	d094      	beq.n	8000b40 <__aeabi_fmul+0xf0>
 8000c16:	220f      	movs	r2, #15
 8000c18:	4032      	ands	r2, r6
 8000c1a:	2a04      	cmp	r2, #4
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fmul+0x1d0>
 8000c1e:	e78e      	b.n	8000b3e <__aeabi_fmul+0xee>
 8000c20:	e78e      	b.n	8000b40 <__aeabi_fmul+0xf0>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d105      	bne.n	8000c32 <__aeabi_fmul+0x1e2>
 8000c26:	2304      	movs	r3, #4
 8000c28:	4699      	mov	r9, r3
 8000c2a:	3b03      	subs	r3, #3
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	469a      	mov	sl, r3
 8000c30:	e726      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000c32:	0030      	movs	r0, r6
 8000c34:	f000 fb3a 	bl	80012ac <__clzsi2>
 8000c38:	2476      	movs	r4, #118	@ 0x76
 8000c3a:	1f43      	subs	r3, r0, #5
 8000c3c:	409e      	lsls	r6, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	4264      	negs	r4, r4
 8000c42:	4699      	mov	r9, r3
 8000c44:	469a      	mov	sl, r3
 8000c46:	1a24      	subs	r4, r4, r0
 8000c48:	e71a      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000c4a:	4640      	mov	r0, r8
 8000c4c:	f000 fb2e 	bl	80012ac <__clzsi2>
 8000c50:	464b      	mov	r3, r9
 8000c52:	1a24      	subs	r4, r4, r0
 8000c54:	3c76      	subs	r4, #118	@ 0x76
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	dca1      	bgt.n	8000b9e <__aeabi_fmul+0x14e>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	3805      	subs	r0, #5
 8000c5e:	4083      	lsls	r3, r0
 8000c60:	407d      	eors	r5, r7
 8000c62:	4698      	mov	r8, r3
 8000c64:	b2ea      	uxtb	r2, r5
 8000c66:	e724      	b.n	8000ab2 <__aeabi_fmul+0x62>
 8000c68:	464a      	mov	r2, r9
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	002a      	movs	r2, r5
 8000c70:	407a      	eors	r2, r7
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	dc92      	bgt.n	8000b9e <__aeabi_fmul+0x14e>
 8000c78:	4649      	mov	r1, r9
 8000c7a:	0015      	movs	r5, r2
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d026      	beq.n	8000cce <__aeabi_fmul+0x27e>
 8000c80:	4699      	mov	r9, r3
 8000c82:	2002      	movs	r0, #2
 8000c84:	e719      	b.n	8000aba <__aeabi_fmul+0x6a>
 8000c86:	230c      	movs	r3, #12
 8000c88:	4699      	mov	r9, r3
 8000c8a:	3b09      	subs	r3, #9
 8000c8c:	24ff      	movs	r4, #255	@ 0xff
 8000c8e:	469a      	mov	sl, r3
 8000c90:	e6f6      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000c92:	0015      	movs	r5, r2
 8000c94:	0021      	movs	r1, r4
 8000c96:	2201      	movs	r2, #1
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b1b      	cmp	r3, #27
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_fmul+0x250>
 8000c9e:	e786      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000ca0:	319e      	adds	r1, #158	@ 0x9e
 8000ca2:	0032      	movs	r2, r6
 8000ca4:	408e      	lsls	r6, r1
 8000ca6:	40da      	lsrs	r2, r3
 8000ca8:	1e73      	subs	r3, r6, #1
 8000caa:	419e      	sbcs	r6, r3
 8000cac:	4332      	orrs	r2, r6
 8000cae:	0753      	lsls	r3, r2, #29
 8000cb0:	d004      	beq.n	8000cbc <__aeabi_fmul+0x26c>
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_fmul+0x26c>
 8000cba:	3204      	adds	r2, #4
 8000cbc:	0153      	lsls	r3, r2, #5
 8000cbe:	d510      	bpl.n	8000ce2 <__aeabi_fmul+0x292>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e792      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000cc6:	003d      	movs	r5, r7
 8000cc8:	4646      	mov	r6, r8
 8000cca:	4682      	mov	sl, r0
 8000ccc:	e767      	b.n	8000b9e <__aeabi_fmul+0x14e>
 8000cce:	23ff      	movs	r3, #255	@ 0xff
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	e78b      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	03d2      	lsls	r2, r2, #15
 8000cda:	e786      	b.n	8000bea <__aeabi_fmul+0x19a>
 8000cdc:	003d      	movs	r5, r7
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	e783      	b.n	8000bea <__aeabi_fmul+0x19a>
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	0a52      	lsrs	r2, r2, #9
 8000ce8:	e780      	b.n	8000bec <__aeabi_fmul+0x19c>
 8000cea:	003d      	movs	r5, r7
 8000cec:	4646      	mov	r6, r8
 8000cee:	e777      	b.n	8000be0 <__aeabi_fmul+0x190>
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	407a      	eors	r2, r7
 8000cf6:	408b      	lsls	r3, r1
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	e6e9      	b.n	8000ad2 <__aeabi_fmul+0x82>
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	f7ffffff 	.word	0xf7ffffff

08000d04 <__aeabi_fsub>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4647      	mov	r7, r8
 8000d08:	46ce      	mov	lr, r9
 8000d0a:	0243      	lsls	r3, r0, #9
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	0a5f      	lsrs	r7, r3, #9
 8000d10:	099b      	lsrs	r3, r3, #6
 8000d12:	0045      	lsls	r5, r0, #1
 8000d14:	004a      	lsls	r2, r1, #1
 8000d16:	469c      	mov	ip, r3
 8000d18:	024b      	lsls	r3, r1, #9
 8000d1a:	0fc4      	lsrs	r4, r0, #31
 8000d1c:	0fce      	lsrs	r6, r1, #31
 8000d1e:	0e2d      	lsrs	r5, r5, #24
 8000d20:	0a58      	lsrs	r0, r3, #9
 8000d22:	0e12      	lsrs	r2, r2, #24
 8000d24:	0999      	lsrs	r1, r3, #6
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d06b      	beq.n	8000e02 <__aeabi_fsub+0xfe>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	405e      	eors	r6, r3
 8000d2e:	1aab      	subs	r3, r5, r2
 8000d30:	42b4      	cmp	r4, r6
 8000d32:	d04b      	beq.n	8000dcc <__aeabi_fsub+0xc8>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	dc00      	bgt.n	8000d3a <__aeabi_fsub+0x36>
 8000d38:	e0ff      	b.n	8000f3a <__aeabi_fsub+0x236>
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0x3c>
 8000d3e:	e088      	b.n	8000e52 <__aeabi_fsub+0x14e>
 8000d40:	2dff      	cmp	r5, #255	@ 0xff
 8000d42:	d100      	bne.n	8000d46 <__aeabi_fsub+0x42>
 8000d44:	e0ef      	b.n	8000f26 <__aeabi_fsub+0x222>
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	04d2      	lsls	r2, r2, #19
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2b1b      	cmp	r3, #27
 8000d50:	dc08      	bgt.n	8000d64 <__aeabi_fsub+0x60>
 8000d52:	0008      	movs	r0, r1
 8000d54:	2220      	movs	r2, #32
 8000d56:	40d8      	lsrs	r0, r3
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4099      	lsls	r1, r3
 8000d5c:	000b      	movs	r3, r1
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	4193      	sbcs	r3, r2
 8000d62:	4318      	orrs	r0, r3
 8000d64:	4663      	mov	r3, ip
 8000d66:	1a1b      	subs	r3, r3, r0
 8000d68:	469c      	mov	ip, r3
 8000d6a:	4663      	mov	r3, ip
 8000d6c:	015b      	lsls	r3, r3, #5
 8000d6e:	d400      	bmi.n	8000d72 <__aeabi_fsub+0x6e>
 8000d70:	e0cd      	b.n	8000f0e <__aeabi_fsub+0x20a>
 8000d72:	4663      	mov	r3, ip
 8000d74:	019f      	lsls	r7, r3, #6
 8000d76:	09bf      	lsrs	r7, r7, #6
 8000d78:	0038      	movs	r0, r7
 8000d7a:	f000 fa97 	bl	80012ac <__clzsi2>
 8000d7e:	003b      	movs	r3, r7
 8000d80:	3805      	subs	r0, #5
 8000d82:	4083      	lsls	r3, r0
 8000d84:	4285      	cmp	r5, r0
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_fsub+0x86>
 8000d88:	e0a2      	b.n	8000ed0 <__aeabi_fsub+0x1cc>
 8000d8a:	4ab7      	ldr	r2, [pc, #732]	@ (8001068 <__aeabi_fsub+0x364>)
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	401a      	ands	r2, r3
 8000d90:	4694      	mov	ip, r2
 8000d92:	075a      	lsls	r2, r3, #29
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x94>
 8000d96:	e0c3      	b.n	8000f20 <__aeabi_fsub+0x21c>
 8000d98:	220f      	movs	r2, #15
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x9e>
 8000da0:	e0be      	b.n	8000f20 <__aeabi_fsub+0x21c>
 8000da2:	2304      	movs	r3, #4
 8000da4:	4698      	mov	r8, r3
 8000da6:	44c4      	add	ip, r8
 8000da8:	4663      	mov	r3, ip
 8000daa:	015b      	lsls	r3, r3, #5
 8000dac:	d400      	bmi.n	8000db0 <__aeabi_fsub+0xac>
 8000dae:	e0b7      	b.n	8000f20 <__aeabi_fsub+0x21c>
 8000db0:	1c68      	adds	r0, r5, #1
 8000db2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0xb4>
 8000db6:	e0a5      	b.n	8000f04 <__aeabi_fsub+0x200>
 8000db8:	20ff      	movs	r0, #255	@ 0xff
 8000dba:	2200      	movs	r2, #0
 8000dbc:	05c0      	lsls	r0, r0, #23
 8000dbe:	4310      	orrs	r0, r2
 8000dc0:	07e4      	lsls	r4, r4, #31
 8000dc2:	4320      	orrs	r0, r4
 8000dc4:	bcc0      	pop	{r6, r7}
 8000dc6:	46b9      	mov	r9, r7
 8000dc8:	46b0      	mov	r8, r6
 8000dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_fsub+0xce>
 8000dd0:	e1eb      	b.n	80011aa <__aeabi_fsub+0x4a6>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d046      	beq.n	8000e64 <__aeabi_fsub+0x160>
 8000dd6:	2dff      	cmp	r5, #255	@ 0xff
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fsub+0xd8>
 8000dda:	e0a4      	b.n	8000f26 <__aeabi_fsub+0x222>
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	04d2      	lsls	r2, r2, #19
 8000de0:	4311      	orrs	r1, r2
 8000de2:	2b1b      	cmp	r3, #27
 8000de4:	dc00      	bgt.n	8000de8 <__aeabi_fsub+0xe4>
 8000de6:	e0fb      	b.n	8000fe0 <__aeabi_fsub+0x2dc>
 8000de8:	2305      	movs	r3, #5
 8000dea:	4698      	mov	r8, r3
 8000dec:	002b      	movs	r3, r5
 8000dee:	44c4      	add	ip, r8
 8000df0:	4662      	mov	r2, ip
 8000df2:	08d7      	lsrs	r7, r2, #3
 8000df4:	2bff      	cmp	r3, #255	@ 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0xf6>
 8000df8:	e095      	b.n	8000f26 <__aeabi_fsub+0x222>
 8000dfa:	027a      	lsls	r2, r7, #9
 8000dfc:	0a52      	lsrs	r2, r2, #9
 8000dfe:	b2d8      	uxtb	r0, r3
 8000e00:	e7dc      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000e02:	002b      	movs	r3, r5
 8000e04:	3bff      	subs	r3, #255	@ 0xff
 8000e06:	4699      	mov	r9, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d118      	bne.n	8000e3e <__aeabi_fsub+0x13a>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	405e      	eors	r6, r3
 8000e10:	42b4      	cmp	r4, r6
 8000e12:	d100      	bne.n	8000e16 <__aeabi_fsub+0x112>
 8000e14:	e0ca      	b.n	8000fac <__aeabi_fsub+0x2a8>
 8000e16:	464b      	mov	r3, r9
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02d      	beq.n	8000e78 <__aeabi_fsub+0x174>
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0x11e>
 8000e20:	e13c      	b.n	800109c <__aeabi_fsub+0x398>
 8000e22:	23ff      	movs	r3, #255	@ 0xff
 8000e24:	4664      	mov	r4, ip
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x128>
 8000e2a:	e15f      	b.n	80010ec <__aeabi_fsub+0x3e8>
 8000e2c:	1e5d      	subs	r5, r3, #1
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x130>
 8000e32:	e174      	b.n	800111e <__aeabi_fsub+0x41a>
 8000e34:	0034      	movs	r4, r6
 8000e36:	2bff      	cmp	r3, #255	@ 0xff
 8000e38:	d074      	beq.n	8000f24 <__aeabi_fsub+0x220>
 8000e3a:	002b      	movs	r3, r5
 8000e3c:	e103      	b.n	8001046 <__aeabi_fsub+0x342>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x140>
 8000e42:	e09c      	b.n	8000f7e <__aeabi_fsub+0x27a>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d017      	beq.n	8000e78 <__aeabi_fsub+0x174>
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0ea      	beq.n	8000e22 <__aeabi_fsub+0x11e>
 8000e4c:	0007      	movs	r7, r0
 8000e4e:	0034      	movs	r4, r6
 8000e50:	e06c      	b.n	8000f2c <__aeabi_fsub+0x228>
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d0cc      	beq.n	8000df0 <__aeabi_fsub+0xec>
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d02b      	beq.n	8000eb4 <__aeabi_fsub+0x1b0>
 8000e5c:	2bff      	cmp	r3, #255	@ 0xff
 8000e5e:	d062      	beq.n	8000f26 <__aeabi_fsub+0x222>
 8000e60:	0013      	movs	r3, r2
 8000e62:	e773      	b.n	8000d4c <__aeabi_fsub+0x48>
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d0c3      	beq.n	8000df0 <__aeabi_fsub+0xec>
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x16c>
 8000e6e:	e11e      	b.n	80010ae <__aeabi_fsub+0x3aa>
 8000e70:	2bff      	cmp	r3, #255	@ 0xff
 8000e72:	d058      	beq.n	8000f26 <__aeabi_fsub+0x222>
 8000e74:	0013      	movs	r3, r2
 8000e76:	e7b4      	b.n	8000de2 <__aeabi_fsub+0xde>
 8000e78:	22fe      	movs	r2, #254	@ 0xfe
 8000e7a:	1c6b      	adds	r3, r5, #1
 8000e7c:	421a      	tst	r2, r3
 8000e7e:	d10d      	bne.n	8000e9c <__aeabi_fsub+0x198>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d060      	beq.n	8000f46 <__aeabi_fsub+0x242>
 8000e84:	4663      	mov	r3, ip
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fsub+0x188>
 8000e8a:	e120      	b.n	80010ce <__aeabi_fsub+0x3ca>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fsub+0x18e>
 8000e90:	e128      	b.n	80010e4 <__aeabi_fsub+0x3e0>
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	2400      	movs	r4, #0
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	03d2      	lsls	r2, r2, #15
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	1a5f      	subs	r7, r3, r1
 8000ea0:	017b      	lsls	r3, r7, #5
 8000ea2:	d500      	bpl.n	8000ea6 <__aeabi_fsub+0x1a2>
 8000ea4:	e0fe      	b.n	80010a4 <__aeabi_fsub+0x3a0>
 8000ea6:	2f00      	cmp	r7, #0
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fsub+0x1a8>
 8000eaa:	e765      	b.n	8000d78 <__aeabi_fsub+0x74>
 8000eac:	2400      	movs	r4, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	e783      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	1a59      	subs	r1, r3, r1
 8000eb8:	014b      	lsls	r3, r1, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x1ba>
 8000ebc:	e119      	b.n	80010f2 <__aeabi_fsub+0x3ee>
 8000ebe:	018f      	lsls	r7, r1, #6
 8000ec0:	09bf      	lsrs	r7, r7, #6
 8000ec2:	0038      	movs	r0, r7
 8000ec4:	f000 f9f2 	bl	80012ac <__clzsi2>
 8000ec8:	003b      	movs	r3, r7
 8000eca:	3805      	subs	r0, #5
 8000ecc:	4083      	lsls	r3, r0
 8000ece:	2501      	movs	r5, #1
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	1b40      	subs	r0, r0, r5
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	1a12      	subs	r2, r2, r0
 8000ed8:	0019      	movs	r1, r3
 8000eda:	4093      	lsls	r3, r2
 8000edc:	40c1      	lsrs	r1, r0
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	4193      	sbcs	r3, r2
 8000ee2:	4319      	orrs	r1, r3
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	1e0b      	subs	r3, r1, #0
 8000ee8:	d0e1      	beq.n	8000eae <__aeabi_fsub+0x1aa>
 8000eea:	075b      	lsls	r3, r3, #29
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x1ec>
 8000eee:	e152      	b.n	8001196 <__aeabi_fsub+0x492>
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d000      	beq.n	8000efc <__aeabi_fsub+0x1f8>
 8000efa:	e752      	b.n	8000da2 <__aeabi_fsub+0x9e>
 8000efc:	2001      	movs	r0, #1
 8000efe:	014a      	lsls	r2, r1, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0x200>
 8000f02:	e092      	b.n	800102a <__aeabi_fsub+0x326>
 8000f04:	b2c0      	uxtb	r0, r0
 8000f06:	4663      	mov	r3, ip
 8000f08:	019a      	lsls	r2, r3, #6
 8000f0a:	0a52      	lsrs	r2, r2, #9
 8000f0c:	e756      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000f0e:	4663      	mov	r3, ip
 8000f10:	075b      	lsls	r3, r3, #29
 8000f12:	d005      	beq.n	8000f20 <__aeabi_fsub+0x21c>
 8000f14:	230f      	movs	r3, #15
 8000f16:	4662      	mov	r2, ip
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fsub+0x21c>
 8000f1e:	e740      	b.n	8000da2 <__aeabi_fsub+0x9e>
 8000f20:	002b      	movs	r3, r5
 8000f22:	e765      	b.n	8000df0 <__aeabi_fsub+0xec>
 8000f24:	0007      	movs	r7, r0
 8000f26:	2f00      	cmp	r7, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x228>
 8000f2a:	e745      	b.n	8000db8 <__aeabi_fsub+0xb4>
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	03d2      	lsls	r2, r2, #15
 8000f30:	433a      	orrs	r2, r7
 8000f32:	0252      	lsls	r2, r2, #9
 8000f34:	20ff      	movs	r0, #255	@ 0xff
 8000f36:	0a52      	lsrs	r2, r2, #9
 8000f38:	e740      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d179      	bne.n	8001032 <__aeabi_fsub+0x32e>
 8000f3e:	22fe      	movs	r2, #254	@ 0xfe
 8000f40:	1c6b      	adds	r3, r5, #1
 8000f42:	421a      	tst	r2, r3
 8000f44:	d1aa      	bne.n	8000e9c <__aeabi_fsub+0x198>
 8000f46:	4663      	mov	r3, ip
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x24a>
 8000f4c:	e0f5      	b.n	800113a <__aeabi_fsub+0x436>
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x250>
 8000f52:	e0d1      	b.n	80010f8 <__aeabi_fsub+0x3f4>
 8000f54:	1a5f      	subs	r7, r3, r1
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	04db      	lsls	r3, r3, #19
 8000f5a:	421f      	tst	r7, r3
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x25c>
 8000f5e:	e10e      	b.n	800117e <__aeabi_fsub+0x47a>
 8000f60:	4662      	mov	r2, ip
 8000f62:	2401      	movs	r4, #1
 8000f64:	1a8a      	subs	r2, r1, r2
 8000f66:	4694      	mov	ip, r2
 8000f68:	2000      	movs	r0, #0
 8000f6a:	4034      	ands	r4, r6
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x26e>
 8000f70:	e724      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000f72:	2001      	movs	r0, #1
 8000f74:	421a      	tst	r2, r3
 8000f76:	d1c6      	bne.n	8000f06 <__aeabi_fsub+0x202>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	08d7      	lsrs	r7, r2, #3
 8000f7c:	e73d      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d017      	beq.n	8000fb2 <__aeabi_fsub+0x2ae>
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_fsub+0x284>
 8000f86:	e0af      	b.n	80010e8 <__aeabi_fsub+0x3e4>
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	4665      	mov	r5, ip
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x28e>
 8000f90:	e0ad      	b.n	80010ee <__aeabi_fsub+0x3ea>
 8000f92:	1e5e      	subs	r6, r3, #1
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x296>
 8000f98:	e089      	b.n	80010ae <__aeabi_fsub+0x3aa>
 8000f9a:	2bff      	cmp	r3, #255	@ 0xff
 8000f9c:	d0c2      	beq.n	8000f24 <__aeabi_fsub+0x220>
 8000f9e:	2e1b      	cmp	r6, #27
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_fsub+0x2a0>
 8000fa2:	e0ab      	b.n	80010fc <__aeabi_fsub+0x3f8>
 8000fa4:	1d4b      	adds	r3, r1, #5
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	e721      	b.n	8000df0 <__aeabi_fsub+0xec>
 8000fac:	464b      	mov	r3, r9
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d170      	bne.n	8001094 <__aeabi_fsub+0x390>
 8000fb2:	22fe      	movs	r2, #254	@ 0xfe
 8000fb4:	1c6b      	adds	r3, r5, #1
 8000fb6:	421a      	tst	r2, r3
 8000fb8:	d15e      	bne.n	8001078 <__aeabi_fsub+0x374>
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_fsub+0x2bc>
 8000fbe:	e0c3      	b.n	8001148 <__aeabi_fsub+0x444>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x2c4>
 8000fc6:	e0d0      	b.n	800116a <__aeabi_fsub+0x466>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x2ca>
 8000fcc:	e094      	b.n	80010f8 <__aeabi_fsub+0x3f4>
 8000fce:	000a      	movs	r2, r1
 8000fd0:	4462      	add	r2, ip
 8000fd2:	0153      	lsls	r3, r2, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x2d4>
 8000fd6:	e0d8      	b.n	800118a <__aeabi_fsub+0x486>
 8000fd8:	0192      	lsls	r2, r2, #6
 8000fda:	2001      	movs	r0, #1
 8000fdc:	0a52      	lsrs	r2, r2, #9
 8000fde:	e6ed      	b.n	8000dbc <__aeabi_fsub+0xb8>
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	40d8      	lsrs	r0, r3
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	4099      	lsls	r1, r3
 8000fea:	000b      	movs	r3, r1
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	4193      	sbcs	r3, r2
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	449c      	add	ip, r3
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	d589      	bpl.n	8000f0e <__aeabi_fsub+0x20a>
 8000ffa:	3501      	adds	r5, #1
 8000ffc:	2dff      	cmp	r5, #255	@ 0xff
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x2fe>
 8001000:	e6da      	b.n	8000db8 <__aeabi_fsub+0xb4>
 8001002:	4662      	mov	r2, ip
 8001004:	2301      	movs	r3, #1
 8001006:	4919      	ldr	r1, [pc, #100]	@ (800106c <__aeabi_fsub+0x368>)
 8001008:	4013      	ands	r3, r2
 800100a:	0852      	lsrs	r2, r2, #1
 800100c:	400a      	ands	r2, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	4694      	mov	ip, r2
 8001014:	075b      	lsls	r3, r3, #29
 8001016:	d004      	beq.n	8001022 <__aeabi_fsub+0x31e>
 8001018:	230f      	movs	r3, #15
 800101a:	4013      	ands	r3, r2
 800101c:	2b04      	cmp	r3, #4
 800101e:	d000      	beq.n	8001022 <__aeabi_fsub+0x31e>
 8001020:	e6bf      	b.n	8000da2 <__aeabi_fsub+0x9e>
 8001022:	4663      	mov	r3, ip
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	d500      	bpl.n	800102a <__aeabi_fsub+0x326>
 8001028:	e6c2      	b.n	8000db0 <__aeabi_fsub+0xac>
 800102a:	4663      	mov	r3, ip
 800102c:	08df      	lsrs	r7, r3, #3
 800102e:	002b      	movs	r3, r5
 8001030:	e6e3      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8001032:	1b53      	subs	r3, r2, r5
 8001034:	2d00      	cmp	r5, #0
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x336>
 8001038:	e6f4      	b.n	8000e24 <__aeabi_fsub+0x120>
 800103a:	2080      	movs	r0, #128	@ 0x80
 800103c:	4664      	mov	r4, ip
 800103e:	04c0      	lsls	r0, r0, #19
 8001040:	4304      	orrs	r4, r0
 8001042:	46a4      	mov	ip, r4
 8001044:	0034      	movs	r4, r6
 8001046:	2001      	movs	r0, #1
 8001048:	2b1b      	cmp	r3, #27
 800104a:	dc09      	bgt.n	8001060 <__aeabi_fsub+0x35c>
 800104c:	2520      	movs	r5, #32
 800104e:	4660      	mov	r0, ip
 8001050:	40d8      	lsrs	r0, r3
 8001052:	1aeb      	subs	r3, r5, r3
 8001054:	4665      	mov	r5, ip
 8001056:	409d      	lsls	r5, r3
 8001058:	002b      	movs	r3, r5
 800105a:	1e5d      	subs	r5, r3, #1
 800105c:	41ab      	sbcs	r3, r5
 800105e:	4318      	orrs	r0, r3
 8001060:	1a0b      	subs	r3, r1, r0
 8001062:	469c      	mov	ip, r3
 8001064:	0015      	movs	r5, r2
 8001066:	e680      	b.n	8000d6a <__aeabi_fsub+0x66>
 8001068:	fbffffff 	.word	0xfbffffff
 800106c:	7dffffff 	.word	0x7dffffff
 8001070:	22fe      	movs	r2, #254	@ 0xfe
 8001072:	1c6b      	adds	r3, r5, #1
 8001074:	4213      	tst	r3, r2
 8001076:	d0a3      	beq.n	8000fc0 <__aeabi_fsub+0x2bc>
 8001078:	2bff      	cmp	r3, #255	@ 0xff
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x37a>
 800107c:	e69c      	b.n	8000db8 <__aeabi_fsub+0xb4>
 800107e:	4461      	add	r1, ip
 8001080:	0849      	lsrs	r1, r1, #1
 8001082:	074a      	lsls	r2, r1, #29
 8001084:	d049      	beq.n	800111a <__aeabi_fsub+0x416>
 8001086:	220f      	movs	r2, #15
 8001088:	400a      	ands	r2, r1
 800108a:	2a04      	cmp	r2, #4
 800108c:	d045      	beq.n	800111a <__aeabi_fsub+0x416>
 800108e:	1d0a      	adds	r2, r1, #4
 8001090:	4694      	mov	ip, r2
 8001092:	e6ad      	b.n	8000df0 <__aeabi_fsub+0xec>
 8001094:	2d00      	cmp	r5, #0
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x396>
 8001098:	e776      	b.n	8000f88 <__aeabi_fsub+0x284>
 800109a:	e68d      	b.n	8000db8 <__aeabi_fsub+0xb4>
 800109c:	0034      	movs	r4, r6
 800109e:	20ff      	movs	r0, #255	@ 0xff
 80010a0:	2200      	movs	r2, #0
 80010a2:	e68b      	b.n	8000dbc <__aeabi_fsub+0xb8>
 80010a4:	4663      	mov	r3, ip
 80010a6:	2401      	movs	r4, #1
 80010a8:	1acf      	subs	r7, r1, r3
 80010aa:	4034      	ands	r4, r6
 80010ac:	e664      	b.n	8000d78 <__aeabi_fsub+0x74>
 80010ae:	4461      	add	r1, ip
 80010b0:	014b      	lsls	r3, r1, #5
 80010b2:	d56d      	bpl.n	8001190 <__aeabi_fsub+0x48c>
 80010b4:	0848      	lsrs	r0, r1, #1
 80010b6:	4944      	ldr	r1, [pc, #272]	@ (80011c8 <__aeabi_fsub+0x4c4>)
 80010b8:	4001      	ands	r1, r0
 80010ba:	0743      	lsls	r3, r0, #29
 80010bc:	d02c      	beq.n	8001118 <__aeabi_fsub+0x414>
 80010be:	230f      	movs	r3, #15
 80010c0:	4003      	ands	r3, r0
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d028      	beq.n	8001118 <__aeabi_fsub+0x414>
 80010c6:	1d0b      	adds	r3, r1, #4
 80010c8:	469c      	mov	ip, r3
 80010ca:	2302      	movs	r3, #2
 80010cc:	e690      	b.n	8000df0 <__aeabi_fsub+0xec>
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x3d0>
 80010d2:	e72b      	b.n	8000f2c <__aeabi_fsub+0x228>
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	03db      	lsls	r3, r3, #15
 80010d8:	429f      	cmp	r7, r3
 80010da:	d200      	bcs.n	80010de <__aeabi_fsub+0x3da>
 80010dc:	e726      	b.n	8000f2c <__aeabi_fsub+0x228>
 80010de:	4298      	cmp	r0, r3
 80010e0:	d300      	bcc.n	80010e4 <__aeabi_fsub+0x3e0>
 80010e2:	e723      	b.n	8000f2c <__aeabi_fsub+0x228>
 80010e4:	2401      	movs	r4, #1
 80010e6:	4034      	ands	r4, r6
 80010e8:	0007      	movs	r7, r0
 80010ea:	e71f      	b.n	8000f2c <__aeabi_fsub+0x228>
 80010ec:	0034      	movs	r4, r6
 80010ee:	468c      	mov	ip, r1
 80010f0:	e67e      	b.n	8000df0 <__aeabi_fsub+0xec>
 80010f2:	2301      	movs	r3, #1
 80010f4:	08cf      	lsrs	r7, r1, #3
 80010f6:	e680      	b.n	8000dfa <__aeabi_fsub+0xf6>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e67e      	b.n	8000dfa <__aeabi_fsub+0xf6>
 80010fc:	2020      	movs	r0, #32
 80010fe:	4665      	mov	r5, ip
 8001100:	1b80      	subs	r0, r0, r6
 8001102:	4085      	lsls	r5, r0
 8001104:	4663      	mov	r3, ip
 8001106:	0028      	movs	r0, r5
 8001108:	40f3      	lsrs	r3, r6
 800110a:	1e45      	subs	r5, r0, #1
 800110c:	41a8      	sbcs	r0, r5
 800110e:	4303      	orrs	r3, r0
 8001110:	469c      	mov	ip, r3
 8001112:	0015      	movs	r5, r2
 8001114:	448c      	add	ip, r1
 8001116:	e76d      	b.n	8000ff4 <__aeabi_fsub+0x2f0>
 8001118:	2302      	movs	r3, #2
 800111a:	08cf      	lsrs	r7, r1, #3
 800111c:	e66d      	b.n	8000dfa <__aeabi_fsub+0xf6>
 800111e:	1b0f      	subs	r7, r1, r4
 8001120:	017b      	lsls	r3, r7, #5
 8001122:	d528      	bpl.n	8001176 <__aeabi_fsub+0x472>
 8001124:	01bf      	lsls	r7, r7, #6
 8001126:	09bf      	lsrs	r7, r7, #6
 8001128:	0038      	movs	r0, r7
 800112a:	f000 f8bf 	bl	80012ac <__clzsi2>
 800112e:	003b      	movs	r3, r7
 8001130:	3805      	subs	r0, #5
 8001132:	4083      	lsls	r3, r0
 8001134:	0034      	movs	r4, r6
 8001136:	2501      	movs	r5, #1
 8001138:	e6ca      	b.n	8000ed0 <__aeabi_fsub+0x1cc>
 800113a:	2900      	cmp	r1, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x43c>
 800113e:	e6b5      	b.n	8000eac <__aeabi_fsub+0x1a8>
 8001140:	2401      	movs	r4, #1
 8001142:	0007      	movs	r7, r0
 8001144:	4034      	ands	r4, r6
 8001146:	e658      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8001148:	4663      	mov	r3, ip
 800114a:	2b00      	cmp	r3, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0x44c>
 800114e:	e6e9      	b.n	8000f24 <__aeabi_fsub+0x220>
 8001150:	2900      	cmp	r1, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x452>
 8001154:	e6ea      	b.n	8000f2c <__aeabi_fsub+0x228>
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	03db      	lsls	r3, r3, #15
 800115a:	429f      	cmp	r7, r3
 800115c:	d200      	bcs.n	8001160 <__aeabi_fsub+0x45c>
 800115e:	e6e5      	b.n	8000f2c <__aeabi_fsub+0x228>
 8001160:	4298      	cmp	r0, r3
 8001162:	d300      	bcc.n	8001166 <__aeabi_fsub+0x462>
 8001164:	e6e2      	b.n	8000f2c <__aeabi_fsub+0x228>
 8001166:	0007      	movs	r7, r0
 8001168:	e6e0      	b.n	8000f2c <__aeabi_fsub+0x228>
 800116a:	2900      	cmp	r1, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x46c>
 800116e:	e69e      	b.n	8000eae <__aeabi_fsub+0x1aa>
 8001170:	2300      	movs	r3, #0
 8001172:	08cf      	lsrs	r7, r1, #3
 8001174:	e641      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8001176:	0034      	movs	r4, r6
 8001178:	2301      	movs	r3, #1
 800117a:	08ff      	lsrs	r7, r7, #3
 800117c:	e63d      	b.n	8000dfa <__aeabi_fsub+0xf6>
 800117e:	2f00      	cmp	r7, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x480>
 8001182:	e693      	b.n	8000eac <__aeabi_fsub+0x1a8>
 8001184:	2300      	movs	r3, #0
 8001186:	08ff      	lsrs	r7, r7, #3
 8001188:	e637      	b.n	8000dfa <__aeabi_fsub+0xf6>
 800118a:	2300      	movs	r3, #0
 800118c:	08d7      	lsrs	r7, r2, #3
 800118e:	e634      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8001190:	2301      	movs	r3, #1
 8001192:	08cf      	lsrs	r7, r1, #3
 8001194:	e631      	b.n	8000dfa <__aeabi_fsub+0xf6>
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	000b      	movs	r3, r1
 800119a:	04d2      	lsls	r2, r2, #19
 800119c:	2001      	movs	r0, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	4211      	tst	r1, r2
 80011a2:	d000      	beq.n	80011a6 <__aeabi_fsub+0x4a2>
 80011a4:	e6ae      	b.n	8000f04 <__aeabi_fsub+0x200>
 80011a6:	08cf      	lsrs	r7, r1, #3
 80011a8:	e627      	b.n	8000dfa <__aeabi_fsub+0xf6>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x4ac>
 80011ae:	e75f      	b.n	8001070 <__aeabi_fsub+0x36c>
 80011b0:	1b56      	subs	r6, r2, r5
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d101      	bne.n	80011ba <__aeabi_fsub+0x4b6>
 80011b6:	0033      	movs	r3, r6
 80011b8:	e6e7      	b.n	8000f8a <__aeabi_fsub+0x286>
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	4660      	mov	r0, ip
 80011be:	04db      	lsls	r3, r3, #19
 80011c0:	4318      	orrs	r0, r3
 80011c2:	4684      	mov	ip, r0
 80011c4:	e6eb      	b.n	8000f9e <__aeabi_fsub+0x29a>
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	7dffffff 	.word	0x7dffffff

080011cc <__aeabi_f2iz>:
 80011cc:	0241      	lsls	r1, r0, #9
 80011ce:	0042      	lsls	r2, r0, #1
 80011d0:	0fc3      	lsrs	r3, r0, #31
 80011d2:	0a49      	lsrs	r1, r1, #9
 80011d4:	2000      	movs	r0, #0
 80011d6:	0e12      	lsrs	r2, r2, #24
 80011d8:	2a7e      	cmp	r2, #126	@ 0x7e
 80011da:	dd03      	ble.n	80011e4 <__aeabi_f2iz+0x18>
 80011dc:	2a9d      	cmp	r2, #157	@ 0x9d
 80011de:	dd02      	ble.n	80011e6 <__aeabi_f2iz+0x1a>
 80011e0:	4a09      	ldr	r2, [pc, #36]	@ (8001208 <__aeabi_f2iz+0x3c>)
 80011e2:	1898      	adds	r0, r3, r2
 80011e4:	4770      	bx	lr
 80011e6:	2080      	movs	r0, #128	@ 0x80
 80011e8:	0400      	lsls	r0, r0, #16
 80011ea:	4301      	orrs	r1, r0
 80011ec:	2a95      	cmp	r2, #149	@ 0x95
 80011ee:	dc07      	bgt.n	8001200 <__aeabi_f2iz+0x34>
 80011f0:	2096      	movs	r0, #150	@ 0x96
 80011f2:	1a82      	subs	r2, r0, r2
 80011f4:	40d1      	lsrs	r1, r2
 80011f6:	4248      	negs	r0, r1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f3      	bne.n	80011e4 <__aeabi_f2iz+0x18>
 80011fc:	0008      	movs	r0, r1
 80011fe:	e7f1      	b.n	80011e4 <__aeabi_f2iz+0x18>
 8001200:	3a96      	subs	r2, #150	@ 0x96
 8001202:	4091      	lsls	r1, r2
 8001204:	e7f7      	b.n	80011f6 <__aeabi_f2iz+0x2a>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	7fffffff 	.word	0x7fffffff

0800120c <__aeabi_i2f>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	2800      	cmp	r0, #0
 8001210:	d012      	beq.n	8001238 <__aeabi_i2f+0x2c>
 8001212:	17c3      	asrs	r3, r0, #31
 8001214:	18c5      	adds	r5, r0, r3
 8001216:	405d      	eors	r5, r3
 8001218:	0fc4      	lsrs	r4, r0, #31
 800121a:	0028      	movs	r0, r5
 800121c:	f000 f846 	bl	80012ac <__clzsi2>
 8001220:	239e      	movs	r3, #158	@ 0x9e
 8001222:	1a1b      	subs	r3, r3, r0
 8001224:	2b96      	cmp	r3, #150	@ 0x96
 8001226:	dc0f      	bgt.n	8001248 <__aeabi_i2f+0x3c>
 8001228:	2808      	cmp	r0, #8
 800122a:	d038      	beq.n	800129e <__aeabi_i2f+0x92>
 800122c:	3808      	subs	r0, #8
 800122e:	4085      	lsls	r5, r0
 8001230:	026d      	lsls	r5, r5, #9
 8001232:	0a6d      	lsrs	r5, r5, #9
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	e002      	b.n	800123e <__aeabi_i2f+0x32>
 8001238:	2400      	movs	r4, #0
 800123a:	2000      	movs	r0, #0
 800123c:	2500      	movs	r5, #0
 800123e:	05c0      	lsls	r0, r0, #23
 8001240:	4328      	orrs	r0, r5
 8001242:	07e4      	lsls	r4, r4, #31
 8001244:	4320      	orrs	r0, r4
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	2b99      	cmp	r3, #153	@ 0x99
 800124a:	dc14      	bgt.n	8001276 <__aeabi_i2f+0x6a>
 800124c:	1f42      	subs	r2, r0, #5
 800124e:	4095      	lsls	r5, r2
 8001250:	002a      	movs	r2, r5
 8001252:	4915      	ldr	r1, [pc, #84]	@ (80012a8 <__aeabi_i2f+0x9c>)
 8001254:	4011      	ands	r1, r2
 8001256:	0755      	lsls	r5, r2, #29
 8001258:	d01c      	beq.n	8001294 <__aeabi_i2f+0x88>
 800125a:	250f      	movs	r5, #15
 800125c:	402a      	ands	r2, r5
 800125e:	2a04      	cmp	r2, #4
 8001260:	d018      	beq.n	8001294 <__aeabi_i2f+0x88>
 8001262:	3104      	adds	r1, #4
 8001264:	08ca      	lsrs	r2, r1, #3
 8001266:	0149      	lsls	r1, r1, #5
 8001268:	d515      	bpl.n	8001296 <__aeabi_i2f+0x8a>
 800126a:	239f      	movs	r3, #159	@ 0x9f
 800126c:	0252      	lsls	r2, r2, #9
 800126e:	1a18      	subs	r0, r3, r0
 8001270:	0a55      	lsrs	r5, r2, #9
 8001272:	b2c0      	uxtb	r0, r0
 8001274:	e7e3      	b.n	800123e <__aeabi_i2f+0x32>
 8001276:	2205      	movs	r2, #5
 8001278:	0029      	movs	r1, r5
 800127a:	1a12      	subs	r2, r2, r0
 800127c:	40d1      	lsrs	r1, r2
 800127e:	0002      	movs	r2, r0
 8001280:	321b      	adds	r2, #27
 8001282:	4095      	lsls	r5, r2
 8001284:	002a      	movs	r2, r5
 8001286:	1e55      	subs	r5, r2, #1
 8001288:	41aa      	sbcs	r2, r5
 800128a:	430a      	orrs	r2, r1
 800128c:	4906      	ldr	r1, [pc, #24]	@ (80012a8 <__aeabi_i2f+0x9c>)
 800128e:	4011      	ands	r1, r2
 8001290:	0755      	lsls	r5, r2, #29
 8001292:	d1e2      	bne.n	800125a <__aeabi_i2f+0x4e>
 8001294:	08ca      	lsrs	r2, r1, #3
 8001296:	0252      	lsls	r2, r2, #9
 8001298:	0a55      	lsrs	r5, r2, #9
 800129a:	b2d8      	uxtb	r0, r3
 800129c:	e7cf      	b.n	800123e <__aeabi_i2f+0x32>
 800129e:	026d      	lsls	r5, r5, #9
 80012a0:	0a6d      	lsrs	r5, r5, #9
 80012a2:	308e      	adds	r0, #142	@ 0x8e
 80012a4:	e7cb      	b.n	800123e <__aeabi_i2f+0x32>
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	fbffffff 	.word	0xfbffffff

080012ac <__clzsi2>:
 80012ac:	211c      	movs	r1, #28
 80012ae:	2301      	movs	r3, #1
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d301      	bcc.n	80012ba <__clzsi2+0xe>
 80012b6:	0c00      	lsrs	r0, r0, #16
 80012b8:	3910      	subs	r1, #16
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	4298      	cmp	r0, r3
 80012be:	d301      	bcc.n	80012c4 <__clzsi2+0x18>
 80012c0:	0a00      	lsrs	r0, r0, #8
 80012c2:	3908      	subs	r1, #8
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d301      	bcc.n	80012ce <__clzsi2+0x22>
 80012ca:	0900      	lsrs	r0, r0, #4
 80012cc:	3904      	subs	r1, #4
 80012ce:	a202      	add	r2, pc, #8	@ (adr r2, 80012d8 <__clzsi2+0x2c>)
 80012d0:	5c10      	ldrb	r0, [r2, r0]
 80012d2:	1840      	adds	r0, r0, r1
 80012d4:	4770      	bx	lr
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	02020304 	.word	0x02020304
 80012dc:	01010101 	.word	0x01010101
	...

080012e8 <AS5600_init>:

#include "AS5600.h"


void AS5600_init(I2C_HandleTypeDef *hi2c, uint8_t conf_L, uint8_t conf_H)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	2317      	movs	r3, #23
 80012ec:	2616      	movs	r6, #22
	HAL_I2C_Mem_Write(hi2c, AS5600_I2C_ADDR, AS5600_REG_CONF_L, I2C_MEMADD_SIZE_8BIT, &conf_L, 1, 100);
 80012ee:	2501      	movs	r5, #1
 80012f0:	2764      	movs	r7, #100	@ 0x64
{
 80012f2:	0004      	movs	r4, r0
 80012f4:	b087      	sub	sp, #28
 80012f6:	446b      	add	r3, sp
 80012f8:	446e      	add	r6, sp
 80012fa:	7019      	strb	r1, [r3, #0]
 80012fc:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(hi2c, AS5600_I2C_ADDR, AS5600_REG_CONF_L, I2C_MEMADD_SIZE_8BIT, &conf_L, 1, 100);
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2208      	movs	r2, #8
 8001304:	002b      	movs	r3, r5
 8001306:	9702      	str	r7, [sp, #8]
 8001308:	9501      	str	r5, [sp, #4]
 800130a:	f001 fccd 	bl	8002ca8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, AS5600_I2C_ADDR, AS5600_REG_CONF_H, I2C_MEMADD_SIZE_8BIT, &conf_H, 1, 100);
 800130e:	002b      	movs	r3, r5
 8001310:	2207      	movs	r2, #7
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	0020      	movs	r0, r4
 8001316:	9702      	str	r7, [sp, #8]
 8001318:	9501      	str	r5, [sp, #4]
 800131a:	9600      	str	r6, [sp, #0]
 800131c:	f001 fcc4 	bl	8002ca8 <HAL_I2C_Mem_Write>
}
 8001320:	b007      	add	sp, #28
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001324 <setup>:

bool oldTriggerState = 1;
bool stateMachine = 0;

void setup()
{
 8001324:	b510      	push	{r4, lr}
	initMotorControl();
 8001326:	f000 f9d3 	bl	80016d0 <initMotorControl>
	//calibrateOffset(64);
	setMode(POSITION_MODE);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fbe8 	bl	8001b00 <setMode>
	update();
 8001330:	f000 fa24 	bl	800177c <update>
	enableMotor();
 8001334:	f000 fbda 	bl	8001aec <enableMotor>
}
 8001338:	bd10      	pop	{r4, pc}
	...

0800133c <loop>:

int32_t travel = 1000;

void loop()
{
 800133c:	b570      	push	{r4, r5, r6, lr}
	update();
 800133e:	f000 fa1d 	bl	800177c <update>
	if (stateMachine == 1)
 8001342:	4c14      	ldr	r4, [pc, #80]	@ (8001394 <loop+0x58>)
 8001344:	7823      	ldrb	r3, [r4, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <loop+0x24>
	{
		if (abs(moco.position - travel) < 10)
 800134a:	4913      	ldr	r1, [pc, #76]	@ (8001398 <loop+0x5c>)
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <loop+0x60>)
 800134e:	694b      	ldr	r3, [r1, #20]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	3309      	adds	r3, #9
 8001356:	2b12      	cmp	r3, #18
 8001358:	d802      	bhi.n	8001360 <loop+0x24>
		{
			stateMachine = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	7023      	strb	r3, [r4, #0]
			moco.target = 0;
 800135e:	61cb      	str	r3, [r1, #28]
		}
	}
	if ((oldTriggerState == 1) && (HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin) == 0))
 8001360:	4d0f      	ldr	r5, [pc, #60]	@ (80013a0 <loop+0x64>)
 8001362:	782b      	ldrb	r3, [r5, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <loop+0x46>
 8001368:	2180      	movs	r1, #128	@ 0x80
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <loop+0x68>)
 800136c:	0209      	lsls	r1, r1, #8
 800136e:	f001 fa9b 	bl	80028a8 <HAL_GPIO_ReadPin>
 8001372:	2800      	cmp	r0, #0
 8001374:	d105      	bne.n	8001382 <loop+0x46>
	{
		stateMachine = 1;
 8001376:	2301      	movs	r3, #1
		moco.target = travel;
 8001378:	4a08      	ldr	r2, [pc, #32]	@ (800139c <loop+0x60>)
		stateMachine = 1;
 800137a:	7023      	strb	r3, [r4, #0]
		moco.target = travel;
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <loop+0x5c>)
 8001380:	61da      	str	r2, [r3, #28]
	}
	oldTriggerState = HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin);
 8001382:	2180      	movs	r1, #128	@ 0x80
 8001384:	0209      	lsls	r1, r1, #8
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <loop+0x68>)
 8001388:	f001 fa8e 	bl	80028a8 <HAL_GPIO_ReadPin>
 800138c:	1e43      	subs	r3, r0, #1
 800138e:	4198      	sbcs	r0, r3
 8001390:	7028      	strb	r0, [r5, #0]
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	20000030 	.word	0x20000030
 8001398:	2000022c 	.word	0x2000022c
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004
 80013a4:	50000800 	.word	0x50000800

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ac:	2234      	movs	r2, #52	@ 0x34
 80013ae:	2100      	movs	r1, #0
 80013b0:	a805      	add	r0, sp, #20
 80013b2:	f003 fe5d 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b6:	2210      	movs	r2, #16
 80013b8:	2100      	movs	r1, #0
 80013ba:	a801      	add	r0, sp, #4
 80013bc:	f003 fe58 	bl	8005070 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2080      	movs	r0, #128	@ 0x80
 80013c2:	0080      	lsls	r0, r0, #2
 80013c4:	f002 fbf6 	bl	8003bb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013d2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 80013d4:	3308      	adds	r3, #8
 80013d6:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013de:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e2:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e4:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ee:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f002 fc0b 	bl	8003c0c <HAL_RCC_OscConfig>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001402:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001404:	0021      	movs	r1, r4
 8001406:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140c:	f002 fe5e 	bl	80040cc <HAL_RCC_ClockConfig>
 8001410:	2800      	cmp	r0, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x70>
 8001414:	b672      	cpsid	i
  while (1)
 8001416:	e7fe      	b.n	8001416 <SystemClock_Config+0x6e>
}
 8001418:	b012      	add	sp, #72	@ 0x48
 800141a:	bd10      	pop	{r4, pc}

0800141c <main>:
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b0a1      	sub	sp, #132	@ 0x84
  HAL_Init();
 8001420:	f000 fd26 	bl	8001e70 <HAL_Init>
  SystemClock_Config();
 8001424:	f7ff ffc0 	bl	80013a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	2214      	movs	r2, #20
 800142a:	2100      	movs	r1, #0
 800142c:	a813      	add	r0, sp, #76	@ 0x4c
 800142e:	f003 fe1f 	bl	8005070 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2202      	movs	r2, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 8001436:	2680      	movs	r6, #128	@ 0x80
 8001438:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4c98      	ldr	r4, [pc, #608]	@ (800169c <main+0x280>)
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 800143c:	0176      	lsls	r6, r6, #5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 8001440:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4313      	orrs	r3, r2
 8001444:	6363      	str	r3, [r4, #52]	@ 0x34
 8001446:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 8001448:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4013      	ands	r3, r2
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001452:	1892      	adds	r2, r2, r2
 8001454:	4313      	orrs	r3, r2
 8001456:	6363      	str	r3, [r4, #52]	@ 0x34
 8001458:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145c:	4013      	ands	r3, r2
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	433b      	orrs	r3, r7
 8001468:	6363      	str	r3, [r4, #52]	@ 0x34
 800146a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800146c:	403b      	ands	r3, r7
 800146e:	9304      	str	r3, [sp, #16]
 8001470:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_RESET);
 8001472:	f001 fa1f 	bl	80028b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Trigger_Pin;
 8001476:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001478:	4889      	ldr	r0, [pc, #548]	@ (80016a0 <main+0x284>)
  GPIO_InitStruct.Pin = Trigger_Pin;
 800147a:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800147c:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Pin = Trigger_Pin;
 800147e:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001484:	f001 f95e 	bl	8002744 <HAL_GPIO_Init>
  HAL_GPIO_Init(PWM_Enable_GPIO_Port, &GPIO_InitStruct);
 8001488:	20a0      	movs	r0, #160	@ 0xa0
 800148a:	a913      	add	r1, sp, #76	@ 0x4c
 800148c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PWM_Enable_Pin;
 800148e:	9613      	str	r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	9714      	str	r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	9516      	str	r5, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PWM_Enable_GPIO_Port, &GPIO_InitStruct);
 8001496:	f001 f955 	bl	8002744 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149c:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149e:	433b      	orrs	r3, r7
 80014a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80014a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a4:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a8:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ae:	f000 fff3 	bl	8002498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b2:	2009      	movs	r0, #9
 80014b4:	f001 f81a 	bl	80024ec <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b8:	220c      	movs	r2, #12
 80014ba:	0029      	movs	r1, r5
 80014bc:	a813      	add	r0, sp, #76	@ 0x4c
 80014be:	f003 fdd7 	bl	8005070 <memset>
  hadc1.Instance = ADC1;
 80014c2:	4c78      	ldr	r4, [pc, #480]	@ (80016a4 <main+0x288>)
 80014c4:	4b78      	ldr	r3, [pc, #480]	@ (80016a8 <main+0x28c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	0020      	movs	r0, r4
  hadc1.Instance = ADC1;
 80014c8:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	6063      	str	r3, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014d0:	2308      	movs	r3, #8
 80014d2:	6163      	str	r3, [r4, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014d4:	0023      	movs	r3, r4
 80014d6:	332c      	adds	r3, #44	@ 0x2c
 80014d8:	701d      	strb	r5, [r3, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 80014da:	0023      	movs	r3, r4
 80014dc:	333c      	adds	r3, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e0:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e2:	6125      	str	r5, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e4:	8325      	strh	r5, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e6:	76a7      	strb	r7, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 80014e8:	61e7      	str	r7, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ea:	6265      	str	r5, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ec:	62a5      	str	r5, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ee:	6325      	str	r5, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80014f0:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014f2:	63a5      	str	r5, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80014f4:	701d      	strb	r5, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014f6:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f8:	f000 fce4 	bl	8001ec4 <HAL_ADC_Init>
 80014fc:	42a8      	cmp	r0, r5
 80014fe:	d001      	beq.n	8001504 <main+0xe8>
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0xe6>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001504:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001506:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	a913      	add	r1, sp, #76	@ 0x4c
 800150a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800150c:	9713      	str	r7, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150e:	f000 fe9b 	bl	8002248 <HAL_ADC_ConfigChannel>
 8001512:	2800      	cmp	r0, #0
 8001514:	d001      	beq.n	800151a <main+0xfe>
 8001516:	b672      	cpsid	i
  while (1)
 8001518:	e7fe      	b.n	8001518 <main+0xfc>
  hi2c1.Instance = I2C1;
 800151a:	4c64      	ldr	r4, [pc, #400]	@ (80016ac <main+0x290>)
 800151c:	4b64      	ldr	r3, [pc, #400]	@ (80016b0 <main+0x294>)
  hi2c1.Init.OwnAddress1 = 0;
 800151e:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8001520:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00602173;
 8001522:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <main+0x298>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152a:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00602173;
 8001530:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	60e7      	str	r7, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001534:	f001 fb5a 	bl	8002bec <HAL_I2C_Init>
 8001538:	1e01      	subs	r1, r0, #0
 800153a:	d001      	beq.n	8001540 <main+0x124>
 800153c:	b672      	cpsid	i
  while (1)
 800153e:	e7fe      	b.n	800153e <main+0x122>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001540:	0020      	movs	r0, r4
 8001542:	f002 faed 	bl	8003b20 <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	1e01      	subs	r1, r0, #0
 8001548:	d001      	beq.n	800154e <main+0x132>
 800154a:	b672      	cpsid	i
  while (1)
 800154c:	e7fe      	b.n	800154c <main+0x130>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154e:	0020      	movs	r0, r4
 8001550:	f002 fb0c 	bl	8003b6c <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	1e05      	subs	r5, r0, #0
 8001556:	d001      	beq.n	800155c <main+0x140>
 8001558:	b672      	cpsid	i
  while (1)
 800155a:	e7fe      	b.n	800155a <main+0x13e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155c:	0001      	movs	r1, r0
 800155e:	2210      	movs	r2, #16
 8001560:	a808      	add	r0, sp, #32
 8001562:	f003 fd85 	bl	8005070 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	220c      	movs	r2, #12
 8001568:	0029      	movs	r1, r5
 800156a:	a805      	add	r0, sp, #20
 800156c:	f003 fd80 	bl	8005070 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	221c      	movs	r2, #28
 8001572:	0029      	movs	r1, r5
 8001574:	a80c      	add	r0, sp, #48	@ 0x30
 8001576:	f003 fd7b 	bl	8005070 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	2234      	movs	r2, #52	@ 0x34
 800157c:	0029      	movs	r1, r5
 800157e:	a813      	add	r0, sp, #76	@ 0x4c
 8001580:	f003 fd76 	bl	8005070 <memset>
  htim1.Instance = TIM1;
 8001584:	4c4c      	ldr	r4, [pc, #304]	@ (80016b8 <main+0x29c>)
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <main+0x2a0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001588:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 800158a:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 2047;
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <main+0x2a4>)
  htim1.Init.Prescaler = 0;
 800158e:	6065      	str	r5, [r4, #4]
  htim1.Init.Period = 2047;
 8001590:	60e3      	str	r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001592:	2380      	movs	r3, #128	@ 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	60a5      	str	r5, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001598:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800159c:	f003 f854 	bl	8004648 <HAL_TIM_Base_Init>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d001      	beq.n	80015a8 <main+0x18c>
 80015a4:	b672      	cpsid	i
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <main+0x18a>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015a8:	0020      	movs	r0, r4
 80015aa:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ae:	f003 f96d 	bl	800488c <HAL_TIM_ConfigClockSource>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d001      	beq.n	80015ba <main+0x19e>
 80015b6:	b672      	cpsid	i
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <main+0x19c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ba:	0020      	movs	r0, r4
 80015bc:	f003 f86e 	bl	800469c <HAL_TIM_PWM_Init>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d001      	beq.n	80015c8 <main+0x1ac>
 80015c4:	b672      	cpsid	i
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <main+0x1aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ca:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ce:	a905      	add	r1, sp, #20
 80015d0:	0020      	movs	r0, r4
 80015d2:	f003 fa7d 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	1e02      	subs	r2, r0, #0
 80015d8:	d001      	beq.n	80015de <main+0x1c2>
 80015da:	b672      	cpsid	i
  while (1)
 80015dc:	e7fe      	b.n	80015dc <main+0x1c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	@ 0x60
 80015e0:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 1024;
 80015e2:	2380      	movs	r3, #128	@ 0x80
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 1024;
 80015e6:	00db      	lsls	r3, r3, #3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e8:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ec:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ee:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f0:	a90c      	add	r1, sp, #48	@ 0x30
 80015f2:	0020      	movs	r0, r4
  sConfigOC.Pulse = 1024;
 80015f4:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	f003 f8b7 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d001      	beq.n	8001602 <main+0x1e6>
 80015fe:	b672      	cpsid	i
  while (1)
 8001600:	e7fe      	b.n	8001600 <main+0x1e4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001602:	2204      	movs	r2, #4
 8001604:	0020      	movs	r0, r4
 8001606:	a90c      	add	r1, sp, #48	@ 0x30
 8001608:	f003 f8ae 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 800160c:	2800      	cmp	r0, #0
 800160e:	d001      	beq.n	8001614 <main+0x1f8>
 8001610:	b672      	cpsid	i
  while (1)
 8001612:	e7fe      	b.n	8001612 <main+0x1f6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001614:	220c      	movs	r2, #12
 8001616:	0020      	movs	r0, r4
 8001618:	a90c      	add	r1, sp, #48	@ 0x30
 800161a:	f003 f8a5 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 800161e:	2800      	cmp	r0, #0
 8001620:	d001      	beq.n	8001626 <main+0x20a>
 8001622:	b672      	cpsid	i
  while (1)
 8001624:	e7fe      	b.n	8001624 <main+0x208>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162c:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162e:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001630:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001632:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8001634:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001636:	9017      	str	r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001638:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800163a:	901a      	str	r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800163c:	901b      	str	r0, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800163e:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001640:	901d      	str	r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001642:	901e      	str	r0, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001644:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001646:	a913      	add	r1, sp, #76	@ 0x4c
 8001648:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164a:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800164c:	f003 fa70 	bl	8004b30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001650:	1e05      	subs	r5, r0, #0
 8001652:	d001      	beq.n	8001658 <main+0x23c>
 8001654:	b672      	cpsid	i
  while (1)
 8001656:	e7fe      	b.n	8001656 <main+0x23a>
  HAL_TIM_MspPostInit(&htim1);
 8001658:	0020      	movs	r0, r4
 800165a:	f000 fb25 	bl	8001ca8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800165e:	4819      	ldr	r0, [pc, #100]	@ (80016c4 <main+0x2a8>)
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <main+0x2ac>)
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001662:	002a      	movs	r2, r5
  huart2.Instance = USART2;
 8001664:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001666:	23e1      	movs	r3, #225	@ 0xe1
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	230c      	movs	r3, #12
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800166e:	0029      	movs	r1, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	6143      	str	r3, [r0, #20]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001672:	002b      	movs	r3, r5
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001674:	6085      	str	r5, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001676:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001678:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	6205      	str	r5, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001680:	6245      	str	r5, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	6285      	str	r5, [r0, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001684:	f003 fcae 	bl	8004fe4 <HAL_RS485Ex_Init>
 8001688:	2800      	cmp	r0, #0
 800168a:	d001      	beq.n	8001690 <main+0x274>
 800168c:	b672      	cpsid	i
  while (1)
 800168e:	e7fe      	b.n	800168e <main+0x272>
  setup();
 8001690:	f7ff fe48 	bl	8001324 <setup>
	  loop();
 8001694:	f7ff fe52 	bl	800133c <loop>
  while (1)
 8001698:	e7fc      	b.n	8001694 <main+0x278>
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	50000800 	.word	0x50000800
 80016a4:	200001c4 	.word	0x200001c4
 80016a8:	40012400 	.word	0x40012400
 80016ac:	20000114 	.word	0x20000114
 80016b0:	40005400 	.word	0x40005400
 80016b4:	00602173 	.word	0x00602173
 80016b8:	200000c8 	.word	0x200000c8
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	20000034 	.word	0x20000034
 80016c8:	40004400 	.word	0x40004400

080016cc <Error_Handler>:
 80016cc:	b672      	cpsid	i
  while (1)
 80016ce:	e7fe      	b.n	80016ce <Error_Handler+0x2>

080016d0 <initMotorControl>:
		return min;
	return input;
}

void initMotorControl()
{
 80016d0:	b570      	push	{r4, r5, r6, lr}
	// initialize AS5600 encoder
	AS5600_init(&hi2c1, AS5600_CONF_L_HYST_OFF | AS5600_CONF_L_OUTS_AN | AS5600_CONF_L_PM_NOM | AS5600_CONF_L_PWMF_115, AS5600_CONF_H_FTH_SLOW | AS5600_CONF_H_SF_2x | AS5600_CONF_L_HYST_OFF);

	// enable PWM generation
	htim1.Instance->CCR1 = 0;
 80016d2:	2400      	movs	r4, #0
	AS5600_init(&hi2c1, AS5600_CONF_L_HYST_OFF | AS5600_CONF_L_OUTS_AN | AS5600_CONF_L_PM_NOM | AS5600_CONF_L_PWMF_115, AS5600_CONF_H_FTH_SLOW | AS5600_CONF_H_SF_2x | AS5600_CONF_L_HYST_OFF);
 80016d4:	2203      	movs	r2, #3
 80016d6:	2100      	movs	r1, #0
 80016d8:	481e      	ldr	r0, [pc, #120]	@ (8001754 <initMotorControl+0x84>)
 80016da:	f7ff fe05 	bl	80012e8 <AS5600_init>
	htim1.Instance->CCR1 = 0;
 80016de:	4d1e      	ldr	r5, [pc, #120]	@ (8001758 <initMotorControl+0x88>)
	htim1.Instance->CCR2 = 0;
	htim1.Instance->CCR4 = 0;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016e0:	0021      	movs	r1, r4
	htim1.Instance->CCR1 = 0;
 80016e2:	682b      	ldr	r3, [r5, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016e4:	0028      	movs	r0, r5
	htim1.Instance->CCR1 = 0;
 80016e6:	635c      	str	r4, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = 0;
 80016e8:	639c      	str	r4, [r3, #56]	@ 0x38
	htim1.Instance->CCR4 = 0;
 80016ea:	641c      	str	r4, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016ec:	f003 f9ec 	bl	8004ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016f0:	0028      	movs	r0, r5
 80016f2:	2104      	movs	r1, #4
 80016f4:	f003 f9e8 	bl	8004ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016f8:	0028      	movs	r0, r5
 80016fa:	210c      	movs	r1, #12
 80016fc:	f003 f9e4 	bl	8004ac8 <HAL_TIM_PWM_Start>

	moco.mode = POSITION_MODE;
 8001700:	2201      	movs	r2, #1
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <initMotorControl+0x8c>)
	moco.encoder_offset = 120;
	moco.arm_offset = 200;
	moco.angle_cw = (2048/7)/4;
 8001704:	4916      	ldr	r1, [pc, #88]	@ (8001760 <initMotorControl+0x90>)
	moco.mode = POSITION_MODE;
 8001706:	701a      	strb	r2, [r3, #0]
	moco.encoder_offset = 120;
 8001708:	3277      	adds	r2, #119	@ 0x77
 800170a:	805a      	strh	r2, [r3, #2]
	moco.arm_offset = 200;
 800170c:	3250      	adds	r2, #80	@ 0x50
 800170e:	605a      	str	r2, [r3, #4]
	moco.phase_offset1 = 0;			// 2048 / 7 / 3 * 0
	moco.phase_offset2 = 98;		// 2048 / 7 / 3 * 1
	moco.phase_offset3 = 195;		// 2048 / 7 / 3 * 2
	moco.power = 0;
	moco.power_limit = 127;
	moco.position = moco.arm_offset;
 8001710:	615a      	str	r2, [r3, #20]
	moco.target = 0;
	moco.target_rpm = 800;
 8001712:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <initMotorControl+0x94>)
	moco.angle_cw = (2048/7)/4;
 8001714:	6099      	str	r1, [r3, #8]
	moco.target_rpm = 800;
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
	moco.direction = 0;
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	77d4      	strb	r4, [r2, #31]
	moco.meas_angle = 0;
	moco.old_angle = 0;
	moco.angle_error = 0;
	moco.Kp = 3.0f;
 800171c:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <initMotorControl+0x98>)
	moco.phase_offset1 = 0;			// 2048 / 7 / 3 * 0
 800171e:	21c4      	movs	r1, #196	@ 0xc4
	moco.Kp = 3.0f;
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
	moco.Ki = 0.02f;
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <initMotorControl+0x9c>)
	moco.phase_offset1 = 0;			// 2048 / 7 / 3 * 0
 8001724:	03c9      	lsls	r1, r1, #15
	moco.Ki = 0.02f;
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
	moco.Kd = 100.0f;
 8001728:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <initMotorControl+0xa0>)
	moco.phase_offset1 = 0;			// 2048 / 7 / 3 * 0
 800172a:	60d9      	str	r1, [r3, #12]
	moco.Kd = 100.0f;
 800172c:	649a      	str	r2, [r3, #72]	@ 0x48
	moco.calibration = 0;
 800172e:	001a      	movs	r2, r3
 8001730:	3252      	adds	r2, #82	@ 0x52
 8001732:	8014      	strh	r4, [r2, #0]
	moco.as5600_i2c_angle[0] = 0;
	moco.as5600_i2c_angle[1] = 0;
 8001734:	001a      	movs	r2, r3
 8001736:	3254      	adds	r2, #84	@ 0x54
 8001738:	7014      	strb	r4, [r2, #0]
	moco.rpm = 0.0f;
 800173a:	2200      	movs	r2, #0
	moco.phase_offset3 = 195;		// 2048 / 7 / 3 * 2
 800173c:	490d      	ldr	r1, [pc, #52]	@ (8001774 <initMotorControl+0xa4>)
	moco.rpm = 0.0f;
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
	moco.rpm_oldPos = 0;
	moco.rpm_delayTimer = 0;
	moco.rpm_lowpass = 0.1;
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <initMotorControl+0xa8>)
	moco.phase_offset3 = 195;		// 2048 / 7 / 3 * 2
 8001742:	6119      	str	r1, [r3, #16]
	moco.target = 0;
 8001744:	61dc      	str	r4, [r3, #28]
	moco.meas_angle = 0;
 8001746:	845c      	strh	r4, [r3, #34]	@ 0x22
	moco.old_angle = 0;
 8001748:	625c      	str	r4, [r3, #36]	@ 0x24
	moco.rpm_oldPos = 0;
 800174a:	62dc      	str	r4, [r3, #44]	@ 0x2c
	moco.rpm_delayTimer = 0;
 800174c:	631c      	str	r4, [r3, #48]	@ 0x30
	moco.rpm_lowpass = 0.1;
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001750:	bd70      	pop	{r4, r5, r6, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	20000114 	.word	0x20000114
 8001758:	200000c8 	.word	0x200000c8
 800175c:	2000022c 	.word	0x2000022c
 8001760:	00db0049 	.word	0x00db0049
 8001764:	44480000 	.word	0x44480000
 8001768:	40400000 	.word	0x40400000
 800176c:	3ca3d70a 	.word	0x3ca3d70a
 8001770:	42c80000 	.word	0x42c80000
 8001774:	7f0000c3 	.word	0x7f0000c3
 8001778:	3dcccccd 	.word	0x3dcccccd

0800177c <update>:

void update()
{
	HAL_I2C_Mem_Read_IT(&hi2c1, AS5600_I2C_ADDR, AS5600_REG_RAWANGLE, I2C_MEMADD_SIZE_8BIT, (uint8_t*)moco.as5600_i2c_angle, 2);
 800177c:	2302      	movs	r3, #2
{
 800177e:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Read_IT(&hi2c1, AS5600_I2C_ADDR, AS5600_REG_RAWANGLE, I2C_MEMADD_SIZE_8BIT, (uint8_t*)moco.as5600_i2c_angle, 2);
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <update+0x18>)
 8001784:	220c      	movs	r2, #12
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	2301      	movs	r3, #1
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <update+0x1c>)
 800178e:	f001 fb65 	bl	8002e5c <HAL_I2C_Mem_Read_IT>
}
 8001792:	bd07      	pop	{r0, r1, r2, pc}
 8001794:	2000027f 	.word	0x2000027f
 8001798:	20000114 	.word	0x20000114

0800179c <updateTorque>:
	delay += 1;
	updateTorque();
}

void updateTorque()
{
 800179c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// update global position and handle rotational overflow (2047.0 or 0.2047)
	moco.angle_error = (moco.meas_angle - moco.old_angle);
 800179e:	4c5a      	ldr	r4, [pc, #360]	@ (8001908 <updateTorque+0x16c>)
 80017a0:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80017a2:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
		// old_angle was slightly above 0
		if (moco.meas_angle > (2047-border))
		{
			// new angle was slightly below 2047
			// UNDERFLOW must have happened
			moco.position = moco.position - 2047;
 80017a4:	6963      	ldr	r3, [r4, #20]
	moco.angle_error = (moco.meas_angle - moco.old_angle);
 80017a6:	1a0a      	subs	r2, r1, r0
 80017a8:	b212      	sxth	r2, r2
 80017aa:	84e2      	strh	r2, [r4, #38]	@ 0x26
	if (moco.old_angle < border)
 80017ac:	2863      	cmp	r0, #99	@ 0x63
 80017ae:	d900      	bls.n	80017b2 <updateTorque+0x16>
 80017b0:	e064      	b.n	800187c <updateTorque+0xe0>
		if (moco.meas_angle > (2047-border))
 80017b2:	4856      	ldr	r0, [pc, #344]	@ (800190c <updateTorque+0x170>)
 80017b4:	4281      	cmp	r1, r0
 80017b6:	d902      	bls.n	80017be <updateTorque+0x22>
			moco.position = moco.position - 2047;
 80017b8:	4955      	ldr	r1, [pc, #340]	@ (8001910 <updateTorque+0x174>)
		// old_angle was slightly below 2047
		if (moco.meas_angle < border)
		{
			// new angle was slightly above 0
			// OVERFLOW must have happened
			moco.position = moco.position + 2048;
 80017ba:	185b      	adds	r3, r3, r1
 80017bc:	6163      	str	r3, [r4, #20]
		}
	}
	moco.position = moco.position + moco.angle_error;
 80017be:	6963      	ldr	r3, [r4, #20]

	if (moco.rpm_delayTimer + 100 < HAL_GetTick())
 80017c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
	moco.position = moco.position + moco.angle_error;
 80017c2:	189b      	adds	r3, r3, r2
	if (moco.rpm_delayTimer + 100 < HAL_GetTick())
 80017c4:	3564      	adds	r5, #100	@ 0x64
	moco.position = moco.position + moco.angle_error;
 80017c6:	6163      	str	r3, [r4, #20]
	if (moco.rpm_delayTimer + 100 < HAL_GetTick())
 80017c8:	f000 fb72 	bl	8001eb0 <HAL_GetTick>
 80017cc:	4285      	cmp	r5, r0
 80017ce:	d224      	bcs.n	800181a <updateTorque+0x7e>
	{
		moco.rpm = (1 - moco.rpm_lowpass)*moco.rpm + moco.rpm_lowpass*((60 * (moco.rpm_oldPos - moco.position)) / 2048 * 10);
 80017d0:	6962      	ldr	r2, [r4, #20]
 80017d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80017d4:	200a      	movs	r0, #10
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	223c      	movs	r2, #60	@ 0x3c
 80017da:	435a      	muls	r2, r3
 80017dc:	17d3      	asrs	r3, r2, #31
 80017de:	055b      	lsls	r3, r3, #21
 80017e0:	0d5b      	lsrs	r3, r3, #21
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	12db      	asrs	r3, r3, #11
 80017e6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80017e8:	4358      	muls	r0, r3
 80017ea:	f7ff fd0f 	bl	800120c <__aeabi_i2f>
 80017ee:	1c29      	adds	r1, r5, #0
 80017f0:	f7ff f92e 	bl	8000a50 <__aeabi_fmul>
 80017f4:	1c06      	adds	r6, r0, #0
 80017f6:	20fe      	movs	r0, #254	@ 0xfe
 80017f8:	1c29      	adds	r1, r5, #0
 80017fa:	0580      	lsls	r0, r0, #22
 80017fc:	f7ff fa82 	bl	8000d04 <__aeabi_fsub>
 8001800:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001802:	f7ff f925 	bl	8000a50 <__aeabi_fmul>
 8001806:	1c01      	adds	r1, r0, #0
 8001808:	1c30      	adds	r0, r6, #0
 800180a:	f7fe fd61 	bl	80002d0 <__aeabi_fadd>
 800180e:	62a0      	str	r0, [r4, #40]	@ 0x28
		moco.rpm_delayTimer = HAL_GetTick();
 8001810:	f000 fb4e 	bl	8001eb0 <HAL_GetTick>
		moco.rpm_oldPos = moco.position;
 8001814:	6963      	ldr	r3, [r4, #20]
		moco.rpm_delayTimer = HAL_GetTick();
 8001816:	6320      	str	r0, [r4, #48]	@ 0x30
		moco.rpm_oldPos = moco.position;
 8001818:	62e3      	str	r3, [r4, #44]	@ 0x2c
	}
	moco.old_angle = moco.meas_angle;
 800181a:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
	if (moco.calibration)
	{
		if (moco.direction)
		{
			// thwo phases are switched !!
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 800181c:	8867      	ldrh	r7, [r4, #2]
	moco.old_angle = moco.meas_angle;
 800181e:	84a3      	strh	r3, [r4, #36]	@ 0x24
		if (moco.direction)
 8001820:	1c62      	adds	r2, r4, #1
 8001822:	7fd2      	ldrb	r2, [r2, #31]
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001824:	8a25      	ldrh	r5, [r4, #16]
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001826:	18ff      	adds	r7, r7, r3
 8001828:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <updateTorque+0x178>)
		if (moco.direction)
 800182a:	4694      	mov	ip, r2
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 800182c:	7ca1      	ldrb	r1, [r4, #18]
 800182e:	89a2      	ldrh	r2, [r4, #12]
 8001830:	6818      	ldr	r0, [r3, #0]
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001832:	89e3      	ldrh	r3, [r4, #14]
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001834:	9501      	str	r5, [sp, #4]
	if (moco.calibration)
 8001836:	0025      	movs	r5, r4
 8001838:	3552      	adds	r5, #82	@ 0x52
 800183a:	782d      	ldrb	r5, [r5, #0]
 800183c:	1e2e      	subs	r6, r5, #0
 800183e:	4d36      	ldr	r5, [pc, #216]	@ (8001918 <updateTorque+0x17c>)
 8001840:	d026      	beq.n	8001890 <updateTorque+0xf4>
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001842:	18ba      	adds	r2, r7, r2
 8001844:	0552      	lsls	r2, r2, #21
 8001846:	0d12      	lsrs	r2, r2, #20
 8001848:	5eaa      	ldrsh	r2, [r5, r2]
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 800184a:	18fb      	adds	r3, r7, r3
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 800184c:	434a      	muls	r2, r1
 800184e:	4c33      	ldr	r4, [pc, #204]	@ (800191c <updateTorque+0x180>)
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001850:	055b      	lsls	r3, r3, #21
 8001852:	0d1b      	lsrs	r3, r3, #20
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001854:	11d2      	asrs	r2, r2, #7
 8001856:	1912      	adds	r2, r2, r4
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001858:	5eec      	ldrsh	r4, [r5, r3]
 800185a:	4b30      	ldr	r3, [pc, #192]	@ (800191c <updateTorque+0x180>)
 800185c:	434c      	muls	r4, r1
 800185e:	11e4      	asrs	r4, r4, #7
 8001860:	18e4      	adds	r4, r4, r3
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001862:	9b01      	ldr	r3, [sp, #4]
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001864:	6382      	str	r2, [r0, #56]	@ 0x38
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001866:	18fe      	adds	r6, r7, r3
 8001868:	0576      	lsls	r6, r6, #21
 800186a:	0d36      	lsrs	r6, r6, #20
 800186c:	5fab      	ldrsh	r3, [r5, r6]
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 800186e:	6344      	str	r4, [r0, #52]	@ 0x34
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001870:	434b      	muls	r3, r1
 8001872:	492a      	ldr	r1, [pc, #168]	@ (800191c <updateTorque+0x180>)
 8001874:	11db      	asrs	r3, r3, #7
 8001876:	185b      	adds	r3, r3, r1
		if (moco.direction)
		{
			// thwo phases are switched !!
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001878:	6403      	str	r3, [r0, #64]	@ 0x40
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
		}
	}
}
 800187a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (moco.old_angle > (2048-border))
 800187c:	4d28      	ldr	r5, [pc, #160]	@ (8001920 <updateTorque+0x184>)
 800187e:	42a8      	cmp	r0, r5
 8001880:	d800      	bhi.n	8001884 <updateTorque+0xe8>
 8001882:	e79c      	b.n	80017be <updateTorque+0x22>
		if (moco.meas_angle < border)
 8001884:	2963      	cmp	r1, #99	@ 0x63
 8001886:	d900      	bls.n	800188a <updateTorque+0xee>
 8001888:	e799      	b.n	80017be <updateTorque+0x22>
			moco.position = moco.position + 2048;
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	0109      	lsls	r1, r1, #4
 800188e:	e794      	b.n	80017ba <updateTorque+0x1e>
		if (moco.direction)
 8001890:	4666      	mov	r6, ip
 8001892:	2e00      	cmp	r6, #0
 8001894:	d01b      	beq.n	80018ce <updateTorque+0x132>
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 8001896:	8924      	ldrh	r4, [r4, #8]
 8001898:	19e4      	adds	r4, r4, r7
 800189a:	18a2      	adds	r2, r4, r2
 800189c:	0552      	lsls	r2, r2, #21
 800189e:	0d12      	lsrs	r2, r2, #20
 80018a0:	5eaa      	ldrsh	r2, [r5, r2]
 80018a2:	4f1e      	ldr	r7, [pc, #120]	@ (800191c <updateTorque+0x180>)
 80018a4:	434a      	muls	r2, r1
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018a6:	18e3      	adds	r3, r4, r3
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018a8:	11d2      	asrs	r2, r2, #7
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018aa:	055b      	lsls	r3, r3, #21
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018ac:	19d2      	adds	r2, r2, r7
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018ae:	0d1b      	lsrs	r3, r3, #20
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018b0:	6382      	str	r2, [r0, #56]	@ 0x38
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018b2:	5eeb      	ldrsh	r3, [r5, r3]
 80018b4:	434b      	muls	r3, r1
 80018b6:	11db      	asrs	r3, r3, #7
 80018b8:	19db      	adds	r3, r3, r7
 80018ba:	6343      	str	r3, [r0, #52]	@ 0x34
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_cw + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	18e4      	adds	r4, r4, r3
 80018c0:	0564      	lsls	r4, r4, #21
 80018c2:	0d24      	lsrs	r4, r4, #20
 80018c4:	5f2b      	ldrsh	r3, [r5, r4]
 80018c6:	434b      	muls	r3, r1
 80018c8:	11db      	asrs	r3, r3, #7
 80018ca:	19db      	adds	r3, r3, r7
 80018cc:	e7d4      	b.n	8001878 <updateTorque+0xdc>
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018ce:	8964      	ldrh	r4, [r4, #10]
 80018d0:	19e4      	adds	r4, r4, r7
 80018d2:	18a2      	adds	r2, r4, r2
 80018d4:	0552      	lsls	r2, r2, #21
 80018d6:	0d12      	lsrs	r2, r2, #20
 80018d8:	5eaa      	ldrsh	r2, [r5, r2]
 80018da:	4f10      	ldr	r7, [pc, #64]	@ (800191c <updateTorque+0x180>)
 80018dc:	434a      	muls	r2, r1
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018de:	18e3      	adds	r3, r4, r3
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018e0:	11d2      	asrs	r2, r2, #7
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018e2:	055b      	lsls	r3, r3, #21
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018e4:	19d2      	adds	r2, r2, r7
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018e6:	0d1b      	lsrs	r3, r3, #20
			htim1.Instance->CCR2 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset1) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018e8:	6382      	str	r2, [r0, #56]	@ 0x38
			htim1.Instance->CCR1 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset2) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018ea:	5eeb      	ldrsh	r3, [r5, r3]
 80018ec:	434b      	muls	r3, r1
 80018ee:	11db      	asrs	r3, r3, #7
 80018f0:	19db      	adds	r3, r3, r7
 80018f2:	6343      	str	r3, [r0, #52]	@ 0x34
			htim1.Instance->CCR4 = ((sintab[(moco.meas_angle + moco.encoder_offset + moco.angle_ccw + moco.phase_offset3) % sintablen] * (uint16_t)moco.power) >> 7) + 1023;
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	18e4      	adds	r4, r4, r3
 80018f8:	0564      	lsls	r4, r4, #21
 80018fa:	0d24      	lsrs	r4, r4, #20
 80018fc:	5f2b      	ldrsh	r3, [r5, r4]
 80018fe:	4359      	muls	r1, r3
 8001900:	11c9      	asrs	r1, r1, #7
 8001902:	19c9      	adds	r1, r1, r7
 8001904:	6401      	str	r1, [r0, #64]	@ 0x40
}
 8001906:	e7b8      	b.n	800187a <updateTorque+0xde>
 8001908:	2000022c 	.word	0x2000022c
 800190c:	0000079b 	.word	0x0000079b
 8001910:	fffff801 	.word	0xfffff801
 8001914:	200000c8 	.word	0x200000c8
 8001918:	0800515c 	.word	0x0800515c
 800191c:	000003ff 	.word	0x000003ff
 8001920:	0000079c 	.word	0x0000079c

08001924 <updatePosition>:
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
	moco.position_error = (moco.target - moco.position);
 8001926:	4c35      	ldr	r4, [pc, #212]	@ (80019fc <updatePosition+0xd8>)
{
 8001928:	b085      	sub	sp, #20
	moco.position_error = (moco.target - moco.position);
 800192a:	6963      	ldr	r3, [r4, #20]
 800192c:	69e6      	ldr	r6, [r4, #28]
 800192e:	1af6      	subs	r6, r6, r3
	proportional 	 = moco.Kp * moco.position_error;
 8001930:	0030      	movs	r0, r6
	moco.position_error = (moco.target - moco.position);
 8001932:	61a6      	str	r6, [r4, #24]
	proportional 	 = moco.Kp * moco.position_error;
 8001934:	f7ff fc6a 	bl	800120c <__aeabi_i2f>
 8001938:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800193a:	1c05      	adds	r5, r0, #0
 800193c:	f7ff f888 	bl	8000a50 <__aeabi_fmul>
	moco.integrator	 = limit(moco.integrator + moco.Ki * moco.position_error, -100.0f, 100.0f);
 8001940:	6c61      	ldr	r1, [r4, #68]	@ 0x44
	proportional 	 = moco.Kp * moco.position_error;
 8001942:	9002      	str	r0, [sp, #8]
	moco.integrator	 = limit(moco.integrator + moco.Ki * moco.position_error, -100.0f, 100.0f);
 8001944:	1c28      	adds	r0, r5, #0
 8001946:	f7ff f883 	bl	8000a50 <__aeabi_fmul>
 800194a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800194c:	9001      	str	r0, [sp, #4]
 800194e:	f7fe fcbf 	bl	80002d0 <__aeabi_fadd>
	if (input > max)
 8001952:	492b      	ldr	r1, [pc, #172]	@ (8001a00 <updatePosition+0xdc>)
	moco.integrator	 = limit(moco.integrator + moco.Ki * moco.position_error, -100.0f, 100.0f);
 8001954:	1c05      	adds	r5, r0, #0
	if (input > max)
 8001956:	f7fe fc8f 	bl	8000278 <__aeabi_fcmpgt>
 800195a:	2800      	cmp	r0, #0
 800195c:	d107      	bne.n	800196e <updatePosition+0x4a>
	if (input < min)
 800195e:	4929      	ldr	r1, [pc, #164]	@ (8001a04 <updatePosition+0xe0>)
 8001960:	1c28      	adds	r0, r5, #0
 8001962:	f7fe fc75 	bl	8000250 <__aeabi_fcmplt>
 8001966:	2800      	cmp	r0, #0
 8001968:	d002      	beq.n	8001970 <updatePosition+0x4c>
		return min;
 800196a:	4d26      	ldr	r5, [pc, #152]	@ (8001a04 <updatePosition+0xe0>)
 800196c:	e000      	b.n	8001970 <updatePosition+0x4c>
		return max;
 800196e:	4d24      	ldr	r5, [pc, #144]	@ (8001a00 <updatePosition+0xdc>)
	differential 	 = 0.9f * differential + 0.1f * moco.Kd * (moco.position_error - moco.old_position_error);
 8001970:	4925      	ldr	r1, [pc, #148]	@ (8001a08 <updatePosition+0xe4>)
	moco.integrator	 = limit(moco.integrator + moco.Ki * moco.position_error, -100.0f, 100.0f);
 8001972:	64e5      	str	r5, [r4, #76]	@ 0x4c
	differential 	 = 0.9f * differential + 0.1f * moco.Kd * (moco.position_error - moco.old_position_error);
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff f86b 	bl	8000a50 <__aeabi_fmul>
 800197a:	0023      	movs	r3, r4
 800197c:	9003      	str	r0, [sp, #12]
 800197e:	3350      	adds	r3, #80	@ 0x50
 8001980:	2000      	movs	r0, #0
 8001982:	5e18      	ldrsh	r0, [r3, r0]
 8001984:	1a30      	subs	r0, r6, r0
 8001986:	f7ff fc41 	bl	800120c <__aeabi_i2f>
 800198a:	4920      	ldr	r1, [pc, #128]	@ (8001a0c <updatePosition+0xe8>)
 800198c:	1c07      	adds	r7, r0, #0
 800198e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8001990:	f7ff f85e 	bl	8000a50 <__aeabi_fmul>
 8001994:	1c01      	adds	r1, r0, #0
 8001996:	1c38      	adds	r0, r7, #0
 8001998:	f7ff f85a 	bl	8000a50 <__aeabi_fmul>
 800199c:	9903      	ldr	r1, [sp, #12]
 800199e:	f7fe fc97 	bl	80002d0 <__aeabi_fadd>
	integral 		 = moco.integrator + moco.Ki * moco.position_error;
 80019a2:	1c29      	adds	r1, r5, #0
	differential 	 = 0.9f * differential + 0.1f * moco.Kd * (moco.position_error - moco.old_position_error);
 80019a4:	1c07      	adds	r7, r0, #0
	integral 		 = moco.integrator + moco.Ki * moco.position_error;
 80019a6:	9801      	ldr	r0, [sp, #4]
 80019a8:	f7fe fc92 	bl	80002d0 <__aeabi_fadd>
	float power = proportional + integral + differential;
 80019ac:	9902      	ldr	r1, [sp, #8]
 80019ae:	f7fe fc8f 	bl	80002d0 <__aeabi_fadd>
 80019b2:	1c01      	adds	r1, r0, #0
 80019b4:	1c38      	adds	r0, r7, #0
 80019b6:	f7fe fc8b 	bl	80002d0 <__aeabi_fadd>
	if (power > 0)
 80019ba:	2100      	movs	r1, #0
	float power = proportional + integral + differential;
 80019bc:	1c05      	adds	r5, r0, #0
	if (power > 0)
 80019be:	f7fe fc5b 	bl	8000278 <__aeabi_fcmpgt>
 80019c2:	0003      	movs	r3, r0
 80019c4:	2001      	movs	r0, #1
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	4193      	sbcs	r3, r2
 80019ca:	3401      	adds	r4, #1
 80019cc:	4058      	eors	r0, r3
 80019ce:	77e0      	strb	r0, [r4, #31]
	moco.power = max((uint16_t)abs(proportional + integral + differential), moco.power_limit);
 80019d0:	1c28      	adds	r0, r5, #0
 80019d2:	f7ff fbfb 	bl	80011cc <__aeabi_f2iz>
 80019d6:	4c09      	ldr	r4, [pc, #36]	@ (80019fc <updatePosition+0xd8>)
 80019d8:	17c3      	asrs	r3, r0, #31
 80019da:	18c0      	adds	r0, r0, r3
 80019dc:	4058      	eors	r0, r3
 80019de:	7ce2      	ldrb	r2, [r4, #19]
	if (value > limit)
 80019e0:	1c03      	adds	r3, r0, #0
 80019e2:	b280      	uxth	r0, r0
 80019e4:	4290      	cmp	r0, r2
 80019e6:	d900      	bls.n	80019ea <updatePosition+0xc6>
 80019e8:	1c13      	adds	r3, r2, #0
	moco.power = max((uint16_t)abs(proportional + integral + differential), moco.power_limit);
 80019ea:	74a3      	strb	r3, [r4, #18]
	moco.old_position_error = moco.position_error;
 80019ec:	0023      	movs	r3, r4
 80019ee:	3350      	adds	r3, #80	@ 0x50
 80019f0:	801e      	strh	r6, [r3, #0]
	updateTorque(moco.meas_angle);
 80019f2:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80019f4:	f7ff fed2 	bl	800179c <updateTorque>
}
 80019f8:	b005      	add	sp, #20
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fc:	2000022c 	.word	0x2000022c
 8001a00:	42c80000 	.word	0x42c80000
 8001a04:	c2c80000 	.word	0xc2c80000
 8001a08:	3f666666 	.word	0x3f666666
 8001a0c:	3dcccccd 	.word	0x3dcccccd

08001a10 <updateSpeed>:
{
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (delay == 10)
 8001a12:	4e1f      	ldr	r6, [pc, #124]	@ (8001a90 <updateSpeed+0x80>)
 8001a14:	7833      	ldrb	r3, [r6, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d134      	bne.n	8001a84 <updateSpeed+0x74>
		float rpm_diff = moco.target_rpm - moco.rpm;
 8001a1a:	4d1e      	ldr	r5, [pc, #120]	@ (8001a94 <updateSpeed+0x84>)
 8001a1c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8001a1e:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8001a20:	f7ff f970 	bl	8000d04 <__aeabi_fsub>
		moco.rpm_integrator = limit(rpm_diff/1000 + moco.rpm_integrator, 0, 127);
 8001a24:	491c      	ldr	r1, [pc, #112]	@ (8001a98 <updateSpeed+0x88>)
		float rpm_diff = moco.target_rpm - moco.rpm;
 8001a26:	1c07      	adds	r7, r0, #0
		moco.rpm_integrator = limit(rpm_diff/1000 + moco.rpm_integrator, 0, 127);
 8001a28:	f7fe fe44 	bl	80006b4 <__aeabi_fdiv>
 8001a2c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8001a2e:	f7fe fc4f 	bl	80002d0 <__aeabi_fadd>
	if (input > max)
 8001a32:	491a      	ldr	r1, [pc, #104]	@ (8001a9c <updateSpeed+0x8c>)
		moco.rpm_integrator = limit(rpm_diff/1000 + moco.rpm_integrator, 0, 127);
 8001a34:	1c04      	adds	r4, r0, #0
	if (input > max)
 8001a36:	f7fe fc1f 	bl	8000278 <__aeabi_fcmpgt>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d107      	bne.n	8001a4e <updateSpeed+0x3e>
	if (input < min)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	1c20      	adds	r0, r4, #0
 8001a42:	f7fe fc05 	bl	8000250 <__aeabi_fcmplt>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d002      	beq.n	8001a50 <updateSpeed+0x40>
		return min;
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	e000      	b.n	8001a50 <updateSpeed+0x40>
		return max;
 8001a4e:	4c13      	ldr	r4, [pc, #76]	@ (8001a9c <updateSpeed+0x8c>)
		moco.power = (uint8_t)limit(rpm_diff + moco.rpm_integrator, 0, 127);
 8001a50:	1c21      	adds	r1, r4, #0
		moco.rpm_integrator = limit(rpm_diff/1000 + moco.rpm_integrator, 0, 127);
 8001a52:	636c      	str	r4, [r5, #52]	@ 0x34
		moco.power = (uint8_t)limit(rpm_diff + moco.rpm_integrator, 0, 127);
 8001a54:	1c38      	adds	r0, r7, #0
 8001a56:	f7fe fc3b 	bl	80002d0 <__aeabi_fadd>
	if (input > max)
 8001a5a:	4910      	ldr	r1, [pc, #64]	@ (8001a9c <updateSpeed+0x8c>)
		moco.power = (uint8_t)limit(rpm_diff + moco.rpm_integrator, 0, 127);
 8001a5c:	1c04      	adds	r4, r0, #0
	if (input > max)
 8001a5e:	f7fe fc0b 	bl	8000278 <__aeabi_fcmpgt>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d107      	bne.n	8001a76 <updateSpeed+0x66>
	if (input < min)
 8001a66:	2100      	movs	r1, #0
 8001a68:	1c20      	adds	r0, r4, #0
 8001a6a:	f7fe fbf1 	bl	8000250 <__aeabi_fcmplt>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d002      	beq.n	8001a78 <updateSpeed+0x68>
		return min;
 8001a72:	2400      	movs	r4, #0
 8001a74:	e000      	b.n	8001a78 <updateSpeed+0x68>
		return max;
 8001a76:	4c09      	ldr	r4, [pc, #36]	@ (8001a9c <updateSpeed+0x8c>)
		moco.power = (uint8_t)limit(rpm_diff + moco.rpm_integrator, 0, 127);
 8001a78:	1c20      	adds	r0, r4, #0
 8001a7a:	f7fe fc11 	bl	80002a0 <__aeabi_f2uiz>
		delay = 0;
 8001a7e:	2300      	movs	r3, #0
		moco.power = (uint8_t)limit(rpm_diff + moco.rpm_integrator, 0, 127);
 8001a80:	74a8      	strb	r0, [r5, #18]
		delay = 0;
 8001a82:	7033      	strb	r3, [r6, #0]
	delay += 1;
 8001a84:	7833      	ldrb	r3, [r6, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	7033      	strb	r3, [r6, #0]
	updateTorque();
 8001a8a:	f7ff fe87 	bl	800179c <updateTorque>
}
 8001a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a90:	20000228 	.word	0x20000228
 8001a94:	2000022c 	.word	0x2000022c
 8001a98:	447a0000 	.word	0x447a0000
 8001a9c:	42fe0000 	.word	0x42fe0000

08001aa0 <HAL_I2C_MemRxCpltCallback>:
	__HAL_I2C_CLEAR_FLAG(I2cHandle, I2C_FLAG_RXNE);
 8001aa0:	2204      	movs	r2, #4
	moco.meas_angle = (moco.as5600_i2c_angle[1] + (((uint16_t)moco.as5600_i2c_angle[0] & 0x0F) << 8))/2;
 8001aa2:	21f0      	movs	r1, #240	@ 0xf0
{
 8001aa4:	b510      	push	{r4, lr}
	__HAL_I2C_CLEAR_FLAG(I2cHandle, I2C_FLAG_RXNE);
 8001aa6:	6803      	ldr	r3, [r0, #0]
	moco.meas_angle = (moco.as5600_i2c_angle[1] + (((uint16_t)moco.as5600_i2c_angle[0] & 0x0F) << 8))/2;
 8001aa8:	0109      	lsls	r1, r1, #4
	__HAL_I2C_CLEAR_FLAG(I2cHandle, I2C_FLAG_RXNE);
 8001aaa:	61da      	str	r2, [r3, #28]
	moco.meas_angle = (moco.as5600_i2c_angle[1] + (((uint16_t)moco.as5600_i2c_angle[0] & 0x0F) << 8))/2;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_I2C_MemRxCpltCallback+0x44>)
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <HAL_I2C_MemRxCpltCallback+0x48>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	3154      	adds	r1, #84	@ 0x54
 8001aba:	7809      	ldrb	r1, [r1, #0]
 8001abc:	185b      	adds	r3, r3, r1
 8001abe:	105b      	asrs	r3, r3, #1
 8001ac0:	8453      	strh	r3, [r2, #34]	@ 0x22
	if (moco.mode == TORQUE_MODE)
 8001ac2:	7813      	ldrb	r3, [r2, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <HAL_I2C_MemRxCpltCallback+0x2e>
		updateTorque();
 8001ac8:	f7ff fe68 	bl	800179c <updateTorque>
}
 8001acc:	bd10      	pop	{r4, pc}
	else if (moco.mode == POSITION_MODE)
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_I2C_MemRxCpltCallback+0x38>
		updatePosition();
 8001ad2:	f7ff ff27 	bl	8001924 <updatePosition>
 8001ad6:	e7f9      	b.n	8001acc <HAL_I2C_MemRxCpltCallback+0x2c>
	else if (moco.mode == SPEED_MODE)
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d1f7      	bne.n	8001acc <HAL_I2C_MemRxCpltCallback+0x2c>
		updateSpeed();
 8001adc:	f7ff ff98 	bl	8001a10 <updateSpeed>
}
 8001ae0:	e7f4      	b.n	8001acc <HAL_I2C_MemRxCpltCallback+0x2c>
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	2000027f 	.word	0x2000027f
 8001ae8:	2000022c 	.word	0x2000022c

08001aec <enableMotor>:

void enableMotor()
{
	// enable all phases
	HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_SET);
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	20a0      	movs	r0, #160	@ 0xa0
{
 8001af0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(PWM_Enable_GPIO_Port, PWM_Enable_Pin, GPIO_PIN_SET);
 8001af2:	2201      	movs	r2, #1
 8001af4:	0149      	lsls	r1, r1, #5
 8001af6:	05c0      	lsls	r0, r0, #23
 8001af8:	f000 fedc 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8001afc:	bd10      	pop	{r4, pc}
	...

08001b00 <setMode>:
	moco.target = 0;
}

void setMode(control_state_type mode)
{
	moco.mode = mode;
 8001b00:	4b01      	ldr	r3, [pc, #4]	@ (8001b08 <setMode+0x8>)
 8001b02:	7018      	strb	r0, [r3, #0]
}
 8001b04:	4770      	bx	lr
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	2000022c 	.word	0x2000022c

08001b0c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_MspInit+0x2c>)
{
 8001b10:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b14:	430a      	orrs	r2, r1
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b1a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	9200      	str	r2, [sp, #0]
 8001b20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b24:	0549      	lsls	r1, r1, #21
 8001b26:	430a      	orrs	r2, r1
 8001b28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	b002      	add	sp, #8
 8001b34:	4770      	bx	lr
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b530      	push	{r4, r5, lr}
 8001b3e:	0005      	movs	r5, r0
 8001b40:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	2214      	movs	r2, #20
 8001b44:	2100      	movs	r1, #0
 8001b46:	a803      	add	r0, sp, #12
 8001b48:	f003 fa92 	bl	8005070 <memset>
  if(hadc->Instance==ADC1)
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_ADC_MspInit+0x9c>)
 8001b4e:	682a      	ldr	r2, [r5, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d13f      	bne.n	8001bd4 <HAL_ADC_MspInit+0x98>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_ADC_MspInit+0xa0>)
 8001b58:	0349      	lsls	r1, r1, #13
 8001b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    */
    GPIO_InitStruct.Pin = ADC_Angle_Pin|ADC_I_U_Pin|ADC_I_V_Pin|ADC_I_W_Pin
                          |ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b66:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b6a:	9201      	str	r2, [sp, #4]
 8001b6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	430a      	orrs	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b76:	400b      	ands	r3, r1
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_Angle_Pin|ADC_I_U_Pin|ADC_I_V_Pin|ADC_I_W_Pin
 8001b7c:	23f1      	movs	r3, #241	@ 0xf1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_Angle_Pin|ADC_I_U_Pin|ADC_I_V_Pin|ADC_I_W_Pin
 8001b80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b82:	3bee      	subs	r3, #238	@ 0xee
 8001b84:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f000 fddd 	bl	8002744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b8a:	4c15      	ldr	r4, [pc, #84]	@ (8001be0 <HAL_ADC_MspInit+0xa4>)
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b8e:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8001b90:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b92:	2305      	movs	r3, #5
 8001b94:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9a:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	3380      	adds	r3, #128	@ 0x80
 8001b9e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba0:	3380      	adds	r3, #128	@ 0x80
 8001ba2:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001baa:	2320      	movs	r3, #32
 8001bac:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	015b      	lsls	r3, r3, #5
 8001bb2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bb4:	f000 fcda 	bl	800256c <HAL_DMA_Init>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001bbc:	f7ff fd86 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	200c      	movs	r0, #12
 8001bc4:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bc6:	652c      	str	r4, [r5, #80]	@ 0x50
 8001bc8:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001bca:	f000 fc65 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001bce:	200c      	movs	r0, #12
 8001bd0:	f000 fc8c 	bl	80024ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bd4:	b009      	add	sp, #36	@ 0x24
 8001bd6:	bd30      	pop	{r4, r5, pc}
 8001bd8:	40012400 	.word	0x40012400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	20000168 	.word	0x20000168
 8001be4:	40020008 	.word	0x40020008

08001be8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be8:	b530      	push	{r4, r5, lr}
 8001bea:	0004      	movs	r4, r0
 8001bec:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	2214      	movs	r2, #20
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	a803      	add	r0, sp, #12
 8001bf4:	f003 fa3c 	bl	8005070 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	2218      	movs	r2, #24
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	a808      	add	r0, sp, #32
 8001bfe:	f003 fa37 	bl	8005070 <memset>
  if(hi2c->Instance==I2C1)
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d130      	bne.n	8001c6c <HAL_I2C_MspInit+0x84>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c0a:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c0e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	f002 fb1a 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001c18:	f7ff fd58 	bl	80016cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4c15      	ldr	r4, [pc, #84]	@ (8001c74 <HAL_I2C_MspInit+0x8c>)
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	4814      	ldr	r0, [pc, #80]	@ (8001c78 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4313      	orrs	r3, r2
 8001c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4013      	ands	r3, r2
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001c3e:	3b0c      	subs	r3, #12
 8001c40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f000 fd7d 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c4e:	0392      	lsls	r2, r2, #14
 8001c50:	4313      	orrs	r3, r2
 8001c52:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001c54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001c56:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	4013      	ands	r3, r2
 8001c5a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001c5c:	002a      	movs	r2, r5
 8001c5e:	0029      	movs	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c60:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001c62:	f000 fc19 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001c66:	2017      	movs	r0, #23
 8001c68:	f000 fc40 	bl	80024ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c6c:	b00f      	add	sp, #60	@ 0x3c
 8001c6e:	bd30      	pop	{r4, r5, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	50000400 	.word	0x50000400

08001c7c <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x24>)
 8001c7e:	6802      	ldr	r2, [r0, #0]
{
 8001c80:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d109      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_TIM_Base_MspInit+0x28>)
 8001c8a:	0109      	lsls	r1, r1, #4
 8001c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	400b      	ands	r3, r1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	4770      	bx	lr
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca8:	b530      	push	{r4, r5, lr}
 8001caa:	0004      	movs	r4, r0
 8001cac:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	2214      	movs	r2, #20
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	a803      	add	r0, sp, #12
 8001cb4:	f003 f9dc 	bl	8005070 <memset>
  if(htim->Instance==TIM1)
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_TIM_MspPostInit+0x68>)
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d125      	bne.n	8001d0c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_TIM_MspPostInit+0x6c>)
    GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	432a      	orrs	r2, r5
 8001cce:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	402a      	ands	r2, r5
 8001cd6:	9201      	str	r2, [sp, #4]
 8001cd8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cdc:	4322      	orrs	r2, r4
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4023      	ands	r3, r4
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin;
 8001cea:	2390      	movs	r3, #144	@ 0x90
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cf0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f000 fd27 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_W_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(PWM_W_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <HAL_TIM_MspPostInit+0x70>)
 8001cfe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d06:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(PWM_W_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f000 fd1c 	bl	8002744 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d0c:	b009      	add	sp, #36	@ 0x24
 8001d0e:	bd30      	pop	{r4, r5, pc}
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	50000400 	.word	0x50000400

08001d1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	0004      	movs	r4, r0
 8001d20:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	2214      	movs	r2, #20
 8001d24:	2100      	movs	r1, #0
 8001d26:	a803      	add	r0, sp, #12
 8001d28:	f003 f9a2 	bl	8005070 <memset>
  if(huart->Instance==USART2)
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HAL_UART_MspInit+0x54>)
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d11b      	bne.n	8001d6c <HAL_UART_MspInit+0x50>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_UART_MspInit+0x58>)
 8001d38:	0289      	lsls	r1, r1, #10
 8001d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d46:	400a      	ands	r2, r1
 8001d48:	9201      	str	r2, [sp, #4]
 8001d4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d50:	4311      	orrs	r1, r2
 8001d52:	6359      	str	r1, [r3, #52]	@ 0x34
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4013      	ands	r3, r2
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d5e:	230e      	movs	r3, #14
 8001d60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	3b0c      	subs	r3, #12
 8001d64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d66:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f000 fcec 	bl	8002744 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d6c:	b008      	add	sp, #32
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	40004400 	.word	0x40004400
 8001d74:	40021000 	.word	0x40021000

08001d78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler>

08001d7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler>

08001d7c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f889 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bd10      	pop	{r4, pc}

08001d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d8a:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <DMA1_Channel1_IRQHandler+0xc>)
 8001d8c:	f000 fc82 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	20000168 	.word	0x20000168

08001d98 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001d98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d9a:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <ADC1_IRQHandler+0xc>)
 8001d9c:	f000 f9a6 	bl	80020ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	200001c4 	.word	0x200001c4

08001da8 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8001da8:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <I2C1_IRQHandler+0x1c>)
{
 8001daa:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8001dac:	6803      	ldr	r3, [r0, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	23e0      	movs	r3, #224	@ 0xe0
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	421a      	tst	r2, r3
 8001db6:	d002      	beq.n	8001dbe <I2C1_IRQHandler+0x16>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001db8:	f001 fc7e 	bl	80036b8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001dbc:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dbe:	f001 f8af 	bl	8002f20 <HAL_I2C_EV_IRQHandler>
}
 8001dc2:	e7fb      	b.n	8001dbc <I2C1_IRQHandler+0x14>
 8001dc4:	20000114 	.word	0x20000114

08001dc8 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	4770      	bx	lr
	...

08001dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dcc:	480d      	ldr	r0, [pc, #52]	@ (8001e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dd0:	f7ff fffa 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dd6:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <LoopForever+0xe>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dec:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <LoopForever+0x16>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dfa:	f003 f941 	bl	8005080 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dfe:	f7ff fb0d 	bl	800141c <main>

08001e02 <LoopForever>:

LoopForever:
  b LoopForever
 8001e02:	e7fe      	b.n	8001e02 <LoopForever>
  ldr   r0, =_estack
 8001e04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e10:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8001e14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001e18:	20000288 	.word	0x20000288

08001e1c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_InitTick+0x44>)
{
 8001e24:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001e26:	7819      	ldrb	r1, [r3, #0]
 8001e28:	2900      	cmp	r1, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e2c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e30:	20fa      	movs	r0, #250	@ 0xfa
 8001e32:	0080      	lsls	r0, r0, #2
 8001e34:	f7fe f96e 	bl	8000114 <__udivsi3>
 8001e38:	4c0b      	ldr	r4, [pc, #44]	@ (8001e68 <HAL_InitTick+0x48>)
 8001e3a:	0001      	movs	r1, r0
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	f7fe f969 	bl	8000114 <__udivsi3>
 8001e42:	f000 fb5f 	bl	8002504 <HAL_SYSTICK_Config>
 8001e46:	1e04      	subs	r4, r0, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	2d03      	cmp	r5, #3
 8001e4c:	d8ee      	bhi.n	8001e2c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	0002      	movs	r2, r0
 8001e50:	2001      	movs	r0, #1
 8001e52:	0029      	movs	r1, r5
 8001e54:	4240      	negs	r0, r0
 8001e56:	f000 fb1f 	bl	8002498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <HAL_InitTick+0x4c>)
 8001e5c:	0020      	movs	r0, r4
 8001e5e:	601d      	str	r5, [r3, #0]
  return status;
 8001e60:	e7e5      	b.n	8001e2e <HAL_InitTick+0xe>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_Init+0x24>)
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	6811      	ldr	r1, [r2, #0]
{
 8001e78:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e80:	f7ff ffce 	bl	8001e20 <HAL_InitTick>
 8001e84:	1e04      	subs	r4, r0, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_Init+0x20>
  HAL_MspInit();
 8001e88:	f7ff fe40 	bl	8001b0c <HAL_MspInit>
}
 8001e8c:	0020      	movs	r0, r4
 8001e8e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001e90:	2401      	movs	r4, #1
 8001e92:	e7fb      	b.n	8001e8c <HAL_Init+0x1c>
 8001e94:	40022000 	.word	0x40022000

08001e98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4a03      	ldr	r2, [pc, #12]	@ (8001ea8 <HAL_IncTick+0x10>)
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_IncTick+0x14>)
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	185b      	adds	r3, r3, r1
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	4770      	bx	lr
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	20000284 	.word	0x20000284
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001eb0:	4b01      	ldr	r3, [pc, #4]	@ (8001eb8 <HAL_GetTick+0x8>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
}
 8001eb4:	4770      	bx	lr
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	20000284 	.word	0x20000284

08001ebc <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ebc:	6880      	ldr	r0, [r0, #8]
 8001ebe:	0740      	lsls	r0, r0, #29
 8001ec0:	0fc0      	lsrs	r0, r0, #31
}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec4:	2300      	movs	r3, #0
{
 8001ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001ecc:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ece:	4298      	cmp	r0, r3
 8001ed0:	d100      	bne.n	8001ed4 <HAL_ADC_Init+0x10>
 8001ed2:	e0f0      	b.n	80020b6 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001ed6:	429d      	cmp	r5, r3
 8001ed8:	d105      	bne.n	8001ee6 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eda:	f7ff fe2f 	bl	8001b3c <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ede:	0023      	movs	r3, r4
 8001ee0:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001ee4:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee6:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee8:	6825      	ldr	r5, [r4, #0]
 8001eea:	055b      	lsls	r3, r3, #21
 8001eec:	68aa      	ldr	r2, [r5, #8]
 8001eee:	421a      	tst	r2, r3
 8001ef0:	d100      	bne.n	8001ef4 <HAL_ADC_Init+0x30>
 8001ef2:	e0a7      	b.n	8002044 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	68ab      	ldr	r3, [r5, #8]
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	d408      	bmi.n	8001f10 <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f04:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	4313      	orrs	r3, r2
 8001f08:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f0c:	4333      	orrs	r3, r6
 8001f0e:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f10:	0028      	movs	r0, r5
 8001f12:	f7ff ffd3 	bl	8001ebc <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f16:	2210      	movs	r2, #16
 8001f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4303      	orrs	r3, r0
 8001f1e:	d000      	beq.n	8001f22 <HAL_ADC_Init+0x5e>
 8001f20:	e0cc      	b.n	80020bc <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001f24:	4b67      	ldr	r3, [pc, #412]	@ (80020c4 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f26:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8001f28:	401a      	ands	r2, r3
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	33ff      	adds	r3, #255	@ 0xff
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f32:	68ab      	ldr	r3, [r5, #8]
 8001f34:	07db      	lsls	r3, r3, #31
 8001f36:	d461      	bmi.n	8001ffc <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f38:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8001f3a:	68e1      	ldr	r1, [r4, #12]
 8001f3c:	1e7b      	subs	r3, r7, #1
 8001f3e:	419f      	sbcs	r7, r3
 8001f40:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f42:	7ea2      	ldrb	r2, [r4, #26]
 8001f44:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f46:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f48:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f4a:	0389      	lsls	r1, r1, #14
 8001f4c:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f4e:	7e61      	ldrb	r1, [r4, #25]
 8001f50:	03c9      	lsls	r1, r1, #15
 8001f52:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f54:	0351      	lsls	r1, r2, #13
 8001f56:	430b      	orrs	r3, r1
 8001f58:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	db00      	blt.n	8001f60 <HAL_ADC_Init+0x9c>
 8001f5e:	e086      	b.n	800206e <HAL_ADC_Init+0x1aa>
 8001f60:	0041      	lsls	r1, r0, #1
 8001f62:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f64:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f66:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f68:	332c      	adds	r3, #44	@ 0x2c
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f6e:	4333      	orrs	r3, r6
 8001f70:	433b      	orrs	r3, r7
 8001f72:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f74:	1c61      	adds	r1, r4, #1
 8001f76:	7fc9      	ldrb	r1, [r1, #31]
 8001f78:	2901      	cmp	r1, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d000      	beq.n	8001f82 <HAL_ADC_Init+0xbe>
 8001f80:	e078      	b.n	8002074 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001f82:	2280      	movs	r2, #128	@ 0x80
 8001f84:	0252      	lsls	r2, r2, #9
 8001f86:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f8e:	21e0      	movs	r1, #224	@ 0xe0
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	400a      	ands	r2, r1
 8001f94:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001f96:	430a      	orrs	r2, r1
 8001f98:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f9a:	68ea      	ldr	r2, [r5, #12]
 8001f9c:	494a      	ldr	r1, [pc, #296]	@ (80020c8 <HAL_ADC_Init+0x204>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fa6:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa8:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001faa:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8001fac:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fae:	0f97      	lsrs	r7, r2, #30
 8001fb0:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb2:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fb4:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d108      	bne.n	8001fcc <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001fba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fbc:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001fbe:	4333      	orrs	r3, r6
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	4661      	mov	r1, ip
 8001fc8:	433b      	orrs	r3, r7
 8001fca:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001fcc:	692b      	ldr	r3, [r5, #16]
 8001fce:	4f3f      	ldr	r7, [pc, #252]	@ (80020cc <HAL_ADC_Init+0x208>)
 8001fd0:	403b      	ands	r3, r7
 8001fd2:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fd4:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8001fd6:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fd8:	0053      	lsls	r3, r2, #1
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	05c9      	lsls	r1, r1, #23
 8001fde:	428b      	cmp	r3, r1
 8001fe0:	d00c      	beq.n	8001ffc <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d008      	beq.n	8001ffc <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001fea:	4939      	ldr	r1, [pc, #228]	@ (80020d0 <HAL_ADC_Init+0x20c>)
 8001fec:	4f39      	ldr	r7, [pc, #228]	@ (80020d4 <HAL_ADC_Init+0x210>)
 8001fee:	680b      	ldr	r3, [r1, #0]
 8001ff0:	403b      	ands	r3, r7
 8001ff2:	27f0      	movs	r7, #240	@ 0xf0
 8001ff4:	03bf      	lsls	r7, r7, #14
 8001ff6:	403a      	ands	r2, r7
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	2770      	movs	r7, #112	@ 0x70
 8002000:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002002:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002004:	438b      	bics	r3, r1
 8002006:	4313      	orrs	r3, r2
 8002008:	616b      	str	r3, [r5, #20]
 800200a:	6969      	ldr	r1, [r5, #20]
 800200c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800200e:	43b9      	bics	r1, r7
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	430b      	orrs	r3, r1
 8002014:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002016:	2800      	cmp	r0, #0
 8002018:	d134      	bne.n	8002084 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800201a:	2310      	movs	r3, #16
 800201c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800201e:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002020:	430b      	orrs	r3, r1
 8002022:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002024:	2107      	movs	r1, #7
 8002026:	696b      	ldr	r3, [r5, #20]
 8002028:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800202a:	429a      	cmp	r2, r3
 800202c:	d139      	bne.n	80020a2 <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800202e:	2300      	movs	r3, #0
 8002030:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002032:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002034:	3303      	adds	r3, #3
 8002036:	439a      	bics	r2, r3
 8002038:	3b02      	subs	r3, #2
 800203a:	4313      	orrs	r3, r2
 800203c:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800203e:	9801      	ldr	r0, [sp, #4]
 8002040:	b005      	add	sp, #20
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8002044:	68aa      	ldr	r2, [r5, #8]
 8002046:	4924      	ldr	r1, [pc, #144]	@ (80020d8 <HAL_ADC_Init+0x214>)
 8002048:	400a      	ands	r2, r1
 800204a:	4313      	orrs	r3, r2
 800204c:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204e:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_ADC_Init+0x218>)
 8002050:	4923      	ldr	r1, [pc, #140]	@ (80020e0 <HAL_ADC_Init+0x21c>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f7fe f85e 	bl	8000114 <__udivsi3>
 8002058:	3001      	adds	r0, #1
 800205a:	0040      	lsls	r0, r0, #1
 800205c:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800205e:	9b03      	ldr	r3, [sp, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d100      	bne.n	8002066 <HAL_ADC_Init+0x1a2>
 8002064:	e746      	b.n	8001ef4 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 8002066:	9b03      	ldr	r3, [sp, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	9303      	str	r3, [sp, #12]
 800206c:	e7f7      	b.n	800205e <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	0389      	lsls	r1, r1, #14
 8002072:	e777      	b.n	8001f64 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	2220      	movs	r2, #32
 8002076:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8002078:	433a      	orrs	r2, r7
 800207a:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800207e:	4311      	orrs	r1, r2
 8002080:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8002082:	e781      	b.n	8001f88 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	039b      	lsls	r3, r3, #14
 8002088:	4298      	cmp	r0, r3
 800208a:	d1cb      	bne.n	8002024 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 800208c:	211c      	movs	r1, #28
 800208e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002090:	69e3      	ldr	r3, [r4, #28]
 8002092:	3b01      	subs	r3, #1
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	400b      	ands	r3, r1
 8002098:	392c      	subs	r1, #44	@ 0x2c
 800209a:	4099      	lsls	r1, r3
 800209c:	000b      	movs	r3, r1
 800209e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80020a0:	e7be      	b.n	8002020 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 80020a2:	2312      	movs	r3, #18
 80020a4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80020a6:	439a      	bics	r2, r3
 80020a8:	3b02      	subs	r3, #2
 80020aa:	4313      	orrs	r3, r2
 80020ac:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	2301      	movs	r3, #1
 80020b0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80020b2:	4313      	orrs	r3, r2
 80020b4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	e7c0      	b.n	800203e <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80020be:	431a      	orrs	r2, r3
 80020c0:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80020c2:	e7f8      	b.n	80020b6 <HAL_ADC_Init+0x1f2>
 80020c4:	fffffefd 	.word	0xfffffefd
 80020c8:	ffde0201 	.word	0xffde0201
 80020cc:	1ffffc02 	.word	0x1ffffc02
 80020d0:	40012708 	.word	0x40012708
 80020d4:	ffc3ffff 	.word	0xffc3ffff
 80020d8:	6fffffe8 	.word	0x6fffffe8
 80020dc:	20000008 	.word	0x20000008
 80020e0:	00030d40 	.word	0x00030d40

080020e4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 80020e4:	4770      	bx	lr

080020e6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_ADC_IRQHandler>:
{
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020ee:	6803      	ldr	r3, [r0, #0]
{
 80020f0:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020f2:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020f4:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020f6:	2302      	movs	r3, #2
 80020f8:	421e      	tst	r6, r3
 80020fa:	d00f      	beq.n	800211c <HAL_ADC_IRQHandler+0x30>
 80020fc:	421d      	tst	r5, r3
 80020fe:	d00d      	beq.n	800211c <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002100:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002102:	06db      	lsls	r3, r3, #27
 8002104:	d404      	bmi.n	8002110 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4313      	orrs	r3, r2
 800210e:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002110:	0020      	movs	r0, r4
 8002112:	f000 f9bf 	bl	8002494 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002116:	2202      	movs	r2, #2
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800211c:	2304      	movs	r3, #4
 800211e:	421e      	tst	r6, r3
 8002120:	d001      	beq.n	8002126 <HAL_ADC_IRQHandler+0x3a>
 8002122:	421d      	tst	r5, r3
 8002124:	d104      	bne.n	8002130 <HAL_ADC_IRQHandler+0x44>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002126:	2308      	movs	r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002128:	421e      	tst	r6, r3
 800212a:	d02b      	beq.n	8002184 <HAL_ADC_IRQHandler+0x98>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800212c:	421d      	tst	r5, r3
 800212e:	d029      	beq.n	8002184 <HAL_ADC_IRQHandler+0x98>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002130:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002132:	06db      	lsls	r3, r3, #27
 8002134:	d404      	bmi.n	8002140 <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4313      	orrs	r3, r2
 800213e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002140:	23c0      	movs	r3, #192	@ 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002142:	6827      	ldr	r7, [r4, #0]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	421a      	tst	r2, r3
 800214a:	d115      	bne.n	8002178 <HAL_ADC_IRQHandler+0x8c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800214c:	7ea3      	ldrb	r3, [r4, #26]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_ADC_IRQHandler+0x8c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	d50f      	bpl.n	8002178 <HAL_ADC_IRQHandler+0x8c>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002158:	0038      	movs	r0, r7
 800215a:	f7ff feaf 	bl	8001ebc <LL_ADC_REG_IsConversionOngoing>
 800215e:	2800      	cmp	r0, #0
 8002160:	d166      	bne.n	8002230 <HAL_ADC_IRQHandler+0x144>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002162:	220c      	movs	r2, #12
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4393      	bics	r3, r2
 8002168:	607b      	str	r3, [r7, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800216a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800216c:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <HAL_ADC_IRQHandler+0x158>)
 800216e:	401a      	ands	r2, r3
 8002170:	3304      	adds	r3, #4
 8002172:	33ff      	adds	r3, #255	@ 0xff
 8002174:	4313      	orrs	r3, r2
 8002176:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002178:	0020      	movs	r0, r4
 800217a:	f7ff ffb3 	bl	80020e4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800217e:	220c      	movs	r2, #12
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002184:	2780      	movs	r7, #128	@ 0x80
 8002186:	423e      	tst	r6, r7
 8002188:	d00b      	beq.n	80021a2 <HAL_ADC_IRQHandler+0xb6>
 800218a:	423d      	tst	r5, r7
 800218c:	d009      	beq.n	80021a2 <HAL_ADC_IRQHandler+0xb6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	4313      	orrs	r3, r2
 8002196:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002198:	0020      	movs	r0, r4
 800219a:	f7ff ffa4 	bl	80020e6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021a2:	2780      	movs	r7, #128	@ 0x80
 80021a4:	007f      	lsls	r7, r7, #1
 80021a6:	423e      	tst	r6, r7
 80021a8:	d00b      	beq.n	80021c2 <HAL_ADC_IRQHandler+0xd6>
 80021aa:	423d      	tst	r5, r7
 80021ac:	d009      	beq.n	80021c2 <HAL_ADC_IRQHandler+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4313      	orrs	r3, r2
 80021b6:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021b8:	0020      	movs	r0, r4
 80021ba:	f000 f969 	bl	8002490 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021c2:	2780      	movs	r7, #128	@ 0x80
 80021c4:	00bf      	lsls	r7, r7, #2
 80021c6:	423e      	tst	r6, r7
 80021c8:	d00b      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xf6>
 80021ca:	423d      	tst	r5, r7
 80021cc:	d009      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80021d2:	02db      	lsls	r3, r3, #11
 80021d4:	4313      	orrs	r3, r2
 80021d6:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021d8:	0020      	movs	r0, r4
 80021da:	f000 f95a 	bl	8002492 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021e2:	2310      	movs	r3, #16
 80021e4:	421e      	tst	r6, r3
 80021e6:	d017      	beq.n	8002218 <HAL_ADC_IRQHandler+0x12c>
 80021e8:	421d      	tst	r5, r3
 80021ea:	d015      	beq.n	8002218 <HAL_ADC_IRQHandler+0x12c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_IRQHandler+0x10e>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80021f2:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	079b      	lsls	r3, r3, #30
 80021f8:	d00b      	beq.n	8002212 <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4313      	orrs	r3, r2
 8002202:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002204:	2302      	movs	r3, #2
 8002206:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8002208:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800220a:	4313      	orrs	r3, r2
 800220c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800220e:	f7ff ff6b 	bl	80020e8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002212:	2210      	movs	r2, #16
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002218:	2780      	movs	r7, #128	@ 0x80
 800221a:	01bf      	lsls	r7, r7, #6
 800221c:	423e      	tst	r6, r7
 800221e:	d006      	beq.n	800222e <HAL_ADC_IRQHandler+0x142>
 8002220:	423d      	tst	r5, r7
 8002222:	d004      	beq.n	800222e <HAL_ADC_IRQHandler+0x142>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002224:	0020      	movs	r0, r4
 8002226:	f000 f936 	bl	8002496 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	601f      	str	r7, [r3, #0]
}
 800222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	2320      	movs	r3, #32
 8002232:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002234:	4313      	orrs	r3, r2
 8002236:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	2301      	movs	r3, #1
 800223a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800223c:	4313      	orrs	r3, r2
 800223e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002240:	e79a      	b.n	8002178 <HAL_ADC_IRQHandler+0x8c>
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	fffffefe 	.word	0xfffffefe

08002248 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002248:	2300      	movs	r3, #0
{
 800224a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224c:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800224e:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002250:	0003      	movs	r3, r0
{
 8002252:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 8002254:	3354      	adds	r3, #84	@ 0x54
 8002256:	781a      	ldrb	r2, [r3, #0]
{
 8002258:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800225a:	2002      	movs	r0, #2
 800225c:	2a01      	cmp	r2, #1
 800225e:	d04d      	beq.n	80022fc <HAL_ADC_ConfigChannel+0xb4>
 8002260:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002262:	6927      	ldr	r7, [r4, #16]
  __HAL_LOCK(hadc);
 8002264:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002266:	6825      	ldr	r5, [r4, #0]
 8002268:	0028      	movs	r0, r5
 800226a:	f7ff fe27 	bl	8001ebc <LL_ADC_REG_IsConversionOngoing>
 800226e:	2800      	cmp	r0, #0
 8002270:	d000      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x2c>
 8002272:	e0f7      	b.n	8002464 <HAL_ADC_ConfigChannel+0x21c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002274:	9b00      	ldr	r3, [sp, #0]
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002276:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800227e:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8002280:	4662      	mov	r2, ip
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002282:	9b00      	ldr	r3, [sp, #0]
 8002284:	0609      	lsls	r1, r1, #24
 8002286:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8002288:	2a02      	cmp	r2, #2
 800228a:	d100      	bne.n	800228e <HAL_ADC_ConfigChannel+0x46>
 800228c:	e0be      	b.n	800240c <HAL_ADC_ConfigChannel+0x1c4>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800228e:	035a      	lsls	r2, r3, #13
 8002290:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002292:	428f      	cmp	r7, r1
 8002294:	d134      	bne.n	8002300 <HAL_ADC_ConfigChannel+0xb8>
 8002296:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 8002298:	430a      	orrs	r2, r1
 800229a:	62aa      	str	r2, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800229c:	9a00      	ldr	r2, [sp, #0]
 800229e:	6968      	ldr	r0, [r5, #20]
 80022a0:	6892      	ldr	r2, [r2, #8]
 80022a2:	0219      	lsls	r1, r3, #8
 80022a4:	4e72      	ldr	r6, [pc, #456]	@ (8002470 <HAL_ADC_ConfigChannel+0x228>)
 80022a6:	400a      	ands	r2, r1
 80022a8:	4032      	ands	r2, r6
 80022aa:	4388      	bics	r0, r1
 80022ac:	4302      	orrs	r2, r0
 80022ae:	616a      	str	r2, [r5, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da1f      	bge.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022b4:	21e0      	movs	r1, #224	@ 0xe0
 80022b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002474 <HAL_ADC_ConfigChannel+0x22c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022b8:	486f      	ldr	r0, [pc, #444]	@ (8002478 <HAL_ADC_ConfigChannel+0x230>)
 80022ba:	6815      	ldr	r5, [r2, #0]
 80022bc:	0449      	lsls	r1, r1, #17
 80022be:	4029      	ands	r1, r5
 80022c0:	4283      	cmp	r3, r0
 80022c2:	d000      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x7e>
 80022c4:	e08c      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x198>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022c6:	2080      	movs	r0, #128	@ 0x80
 80022c8:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ca:	4205      	tst	r5, r0
 80022cc:	d112      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	4d6a      	ldr	r5, [pc, #424]	@ (800247c <HAL_ADC_ConfigChannel+0x234>)
 80022d2:	402b      	ands	r3, r5
 80022d4:	430b      	orrs	r3, r1
 80022d6:	4318      	orrs	r0, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d8:	4b69      	ldr	r3, [pc, #420]	@ (8002480 <HAL_ADC_ConfigChannel+0x238>)
 80022da:	6010      	str	r0, [r2, #0]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	4969      	ldr	r1, [pc, #420]	@ (8002484 <HAL_ADC_ConfigChannel+0x23c>)
 80022e0:	f7fd ff18 	bl	8000114 <__udivsi3>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	200c      	movs	r0, #12
 80022e8:	4358      	muls	r0, r3
 80022ea:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 80022ec:	9b03      	ldr	r3, [sp, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d000      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
 80022f2:	e071      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 80022f6:	2300      	movs	r3, #0
 80022f8:	3454      	adds	r4, #84	@ 0x54
 80022fa:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 80022fc:	b005      	add	sp, #20
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002300:	211f      	movs	r1, #31
 8002302:	4667      	mov	r7, ip
 8002304:	400f      	ands	r7, r1
 8002306:	3910      	subs	r1, #16
 8002308:	40b9      	lsls	r1, r7
 800230a:	43ce      	mvns	r6, r1
 800230c:	9601      	str	r6, [sp, #4]
 800230e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8002310:	438e      	bics	r6, r1
 8002312:	0031      	movs	r1, r6
 8002314:	2a00      	cmp	r2, #0
 8002316:	d112      	bne.n	800233e <HAL_ADC_ConfigChannel+0xf6>
 8002318:	0e98      	lsrs	r0, r3, #26
 800231a:	321f      	adds	r2, #31
 800231c:	4010      	ands	r0, r2
 800231e:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002320:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002322:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002324:	0892      	lsrs	r2, r2, #2
 8002326:	69e1      	ldr	r1, [r4, #28]
 8002328:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800232a:	6620      	str	r0, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800232c:	428a      	cmp	r2, r1
 800232e:	d8b5      	bhi.n	800229c <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 8002330:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002332:	9801      	ldr	r0, [sp, #4]
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	0f12      	lsrs	r2, r2, #28
 8002338:	40ba      	lsls	r2, r7
 800233a:	4001      	ands	r1, r0
 800233c:	e7ac      	b.n	8002298 <HAL_ADC_ConfigChannel+0x50>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800233e:	2201      	movs	r2, #1
 8002340:	4213      	tst	r3, r2
 8002342:	d1ec      	bne.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 8002344:	1892      	adds	r2, r2, r2
 8002346:	4213      	tst	r3, r2
 8002348:	d124      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x14c>
 800234a:	2604      	movs	r6, #4
 800234c:	4233      	tst	r3, r6
 800234e:	d123      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x150>
 8002350:	071a      	lsls	r2, r3, #28
 8002352:	d423      	bmi.n	800239c <HAL_ADC_ConfigChannel+0x154>
 8002354:	06da      	lsls	r2, r3, #27
 8002356:	d423      	bmi.n	80023a0 <HAL_ADC_ConfigChannel+0x158>
 8002358:	069a      	lsls	r2, r3, #26
 800235a:	d423      	bmi.n	80023a4 <HAL_ADC_ConfigChannel+0x15c>
 800235c:	065a      	lsls	r2, r3, #25
 800235e:	d423      	bmi.n	80023a8 <HAL_ADC_ConfigChannel+0x160>
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	d423      	bmi.n	80023ac <HAL_ADC_ConfigChannel+0x164>
 8002364:	05da      	lsls	r2, r3, #23
 8002366:	d423      	bmi.n	80023b0 <HAL_ADC_ConfigChannel+0x168>
 8002368:	059a      	lsls	r2, r3, #22
 800236a:	d423      	bmi.n	80023b4 <HAL_ADC_ConfigChannel+0x16c>
 800236c:	055a      	lsls	r2, r3, #21
 800236e:	d423      	bmi.n	80023b8 <HAL_ADC_ConfigChannel+0x170>
 8002370:	051a      	lsls	r2, r3, #20
 8002372:	d423      	bmi.n	80023bc <HAL_ADC_ConfigChannel+0x174>
 8002374:	04da      	lsls	r2, r3, #19
 8002376:	d423      	bmi.n	80023c0 <HAL_ADC_ConfigChannel+0x178>
 8002378:	049a      	lsls	r2, r3, #18
 800237a:	d423      	bmi.n	80023c4 <HAL_ADC_ConfigChannel+0x17c>
 800237c:	045a      	lsls	r2, r3, #17
 800237e:	d423      	bmi.n	80023c8 <HAL_ADC_ConfigChannel+0x180>
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	d423      	bmi.n	80023cc <HAL_ADC_ConfigChannel+0x184>
 8002384:	03da      	lsls	r2, r3, #15
 8002386:	d423      	bmi.n	80023d0 <HAL_ADC_ConfigChannel+0x188>
 8002388:	039a      	lsls	r2, r3, #14
 800238a:	d423      	bmi.n	80023d4 <HAL_ADC_ConfigChannel+0x18c>
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	d5c6      	bpl.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 8002390:	2012      	movs	r0, #18
 8002392:	e7c4      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 8002394:	2001      	movs	r0, #1
 8002396:	e7c2      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 8002398:	0010      	movs	r0, r2
 800239a:	e7c0      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 800239c:	2003      	movs	r0, #3
 800239e:	e7be      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023a0:	2004      	movs	r0, #4
 80023a2:	e7bc      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023a4:	2005      	movs	r0, #5
 80023a6:	e7ba      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023a8:	2006      	movs	r0, #6
 80023aa:	e7b8      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023ac:	2007      	movs	r0, #7
 80023ae:	e7b6      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023b0:	2008      	movs	r0, #8
 80023b2:	e7b4      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023b4:	2009      	movs	r0, #9
 80023b6:	e7b2      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023b8:	200a      	movs	r0, #10
 80023ba:	e7b0      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023bc:	200b      	movs	r0, #11
 80023be:	e7ae      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023c0:	200c      	movs	r0, #12
 80023c2:	e7ac      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023c4:	200d      	movs	r0, #13
 80023c6:	e7aa      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023c8:	200e      	movs	r0, #14
 80023ca:	e7a8      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023cc:	200f      	movs	r0, #15
 80023ce:	e7a6      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023d0:	2010      	movs	r0, #16
 80023d2:	e7a4      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
 80023d4:	2011      	movs	r0, #17
 80023d6:	e7a2      	b.n	800231e <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 80023d8:	9b03      	ldr	r3, [sp, #12]
 80023da:	3b01      	subs	r3, #1
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	e785      	b.n	80022ec <HAL_ADC_ConfigChannel+0xa4>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023e0:	4829      	ldr	r0, [pc, #164]	@ (8002488 <HAL_ADC_ConfigChannel+0x240>)
 80023e2:	4283      	cmp	r3, r0
 80023e4:	d10b      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x1b6>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e6:	2080      	movs	r0, #128	@ 0x80
 80023e8:	0440      	lsls	r0, r0, #17
 80023ea:	4205      	tst	r5, r0
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x1a8>
 80023ee:	e781      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	4d22      	ldr	r5, [pc, #136]	@ (800247c <HAL_ADC_ConfigChannel+0x234>)
 80023f4:	402b      	ands	r3, r5
 80023f6:	430b      	orrs	r3, r1
 80023f8:	4318      	orrs	r0, r3
 80023fa:	6010      	str	r0, [r2, #0]
}
 80023fc:	e77a      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80023fe:	4823      	ldr	r0, [pc, #140]	@ (800248c <HAL_ADC_ConfigChannel+0x244>)
 8002400:	4283      	cmp	r3, r0
 8002402:	d000      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x1be>
 8002404:	e776      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002406:	2080      	movs	r0, #128	@ 0x80
 8002408:	03c0      	lsls	r0, r0, #15
 800240a:	e7ee      	b.n	80023ea <HAL_ADC_ConfigChannel+0x1a2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800240c:	428f      	cmp	r7, r1
 800240e:	d104      	bne.n	800241a <HAL_ADC_ConfigChannel+0x1d2>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002410:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002412:	0359      	lsls	r1, r3, #13
 8002414:	0b49      	lsrs	r1, r1, #13
 8002416:	438a      	bics	r2, r1
 8002418:	62aa      	str	r2, [r5, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800241a:	2b00      	cmp	r3, #0
 800241c:	db00      	blt.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
 800241e:	e769      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <HAL_ADC_ConfigChannel+0x22c>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002422:	4815      	ldr	r0, [pc, #84]	@ (8002478 <HAL_ADC_ConfigChannel+0x230>)
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	4283      	cmp	r3, r0
 8002428:	d108      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1f4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242a:	23a0      	movs	r3, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800242c:	6810      	ldr	r0, [r2, #0]
 800242e:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002430:	400b      	ands	r3, r1
 8002432:	4912      	ldr	r1, [pc, #72]	@ (800247c <HAL_ADC_ConfigChannel+0x234>)
 8002434:	4001      	ands	r1, r0
 8002436:	430b      	orrs	r3, r1
 8002438:	6013      	str	r3, [r2, #0]
}
 800243a:	e75b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800243c:	4812      	ldr	r0, [pc, #72]	@ (8002488 <HAL_ADC_ConfigChannel+0x240>)
 800243e:	4283      	cmp	r3, r0
 8002440:	d103      	bne.n	800244a <HAL_ADC_ConfigChannel+0x202>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002442:	23c0      	movs	r3, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002444:	6810      	ldr	r0, [r2, #0]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	e7f2      	b.n	8002430 <HAL_ADC_ConfigChannel+0x1e8>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800244a:	4810      	ldr	r0, [pc, #64]	@ (800248c <HAL_ADC_ConfigChannel+0x244>)
 800244c:	4283      	cmp	r3, r0
 800244e:	d000      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x20a>
 8002450:	e750      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002452:	20c0      	movs	r0, #192	@ 0xc0
 8002454:	0440      	lsls	r0, r0, #17
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	4001      	ands	r1, r0
 800245a:	4808      	ldr	r0, [pc, #32]	@ (800247c <HAL_ADC_ConfigChannel+0x234>)
 800245c:	4003      	ands	r3, r0
 800245e:	4319      	orrs	r1, r3
 8002460:	6011      	str	r1, [r2, #0]
}
 8002462:	e747      	b.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002464:	2320      	movs	r3, #32
 8002466:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8002468:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246a:	4313      	orrs	r3, r2
 800246c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800246e:	e742      	b.n	80022f6 <HAL_ADC_ConfigChannel+0xae>
 8002470:	07ffff00 	.word	0x07ffff00
 8002474:	40012708 	.word	0x40012708
 8002478:	b0001000 	.word	0xb0001000
 800247c:	fe3fffff 	.word	0xfe3fffff
 8002480:	20000008 	.word	0x20000008
 8002484:	00030d40 	.word	0x00030d40
 8002488:	b8004000 	.word	0xb8004000
 800248c:	b4002000 	.word	0xb4002000

08002490 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002490:	4770      	bx	lr

08002492 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002492:	4770      	bx	lr

08002494 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8002494:	4770      	bx	lr

08002496 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 8002496:	4770      	bx	lr

08002498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249a:	24ff      	movs	r4, #255	@ 0xff
 800249c:	2203      	movs	r2, #3
 800249e:	000b      	movs	r3, r1
 80024a0:	0021      	movs	r1, r4
 80024a2:	4002      	ands	r2, r0
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ac:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ae:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	db0a      	blt.n	80024ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b4:	24c0      	movs	r4, #192	@ 0xc0
 80024b6:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_NVIC_SetPriority+0x4c>)
 80024b8:	0880      	lsrs	r0, r0, #2
 80024ba:	0080      	lsls	r0, r0, #2
 80024bc:	1880      	adds	r0, r0, r2
 80024be:	00a4      	lsls	r4, r4, #2
 80024c0:	5902      	ldr	r2, [r0, r4]
 80024c2:	400a      	ands	r2, r1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80024c8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ca:	220f      	movs	r2, #15
 80024cc:	4010      	ands	r0, r2
 80024ce:	3808      	subs	r0, #8
 80024d0:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <HAL_NVIC_SetPriority+0x50>)
 80024d2:	0880      	lsrs	r0, r0, #2
 80024d4:	0080      	lsls	r0, r0, #2
 80024d6:	1880      	adds	r0, r0, r2
 80024d8:	69c2      	ldr	r2, [r0, #28]
 80024da:	4011      	ands	r1, r2
 80024dc:	4319      	orrs	r1, r3
 80024de:	61c1      	str	r1, [r0, #28]
 80024e0:	e7f2      	b.n	80024c8 <HAL_NVIC_SetPriority+0x30>
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024ec:	2800      	cmp	r0, #0
 80024ee:	db05      	blt.n	80024fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f0:	231f      	movs	r3, #31
 80024f2:	4018      	ands	r0, r3
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	4083      	lsls	r3, r0
 80024f8:	4a01      	ldr	r2, [pc, #4]	@ (8002500 <HAL_NVIC_EnableIRQ+0x14>)
 80024fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024fc:	4770      	bx	lr
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	e000e100 	.word	0xe000e100

08002504 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	2280      	movs	r2, #128	@ 0x80
 8002506:	1e43      	subs	r3, r0, #1
 8002508:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	4293      	cmp	r3, r2
 800250e:	d20d      	bcs.n	800252c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002510:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002514:	4807      	ldr	r0, [pc, #28]	@ (8002534 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002518:	6a03      	ldr	r3, [r0, #32]
 800251a:	0609      	lsls	r1, r1, #24
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	430b      	orrs	r3, r1
 8002522:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800252c:	4770      	bx	lr
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	e000e010 	.word	0xe000e010
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002538:	b510      	push	{r4, lr}
 800253a:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800253c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	189b      	adds	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002548:	6800      	ldr	r0, [r0, #0]
 800254a:	2114      	movs	r1, #20
 800254c:	b2c0      	uxtb	r0, r0
 800254e:	3808      	subs	r0, #8
 8002550:	f7fd fde0 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002556:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002558:	231f      	movs	r3, #31
 800255a:	4018      	ands	r0, r3
 800255c:	3b1e      	subs	r3, #30
 800255e:	4083      	lsls	r3, r0
 8002560:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8002562:	bd10      	pop	{r4, pc}
 8002564:	10008200 	.word	0x10008200
 8002568:	40020880 	.word	0x40020880

0800256c <HAL_DMA_Init>:
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
  if (hdma == NULL)
 8002572:	2c00      	cmp	r4, #0
 8002574:	d046      	beq.n	8002604 <HAL_DMA_Init+0x98>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002576:	6825      	ldr	r5, [r4, #0]
 8002578:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_DMA_Init+0xa4>)
 800257a:	2114      	movs	r1, #20
 800257c:	18e8      	adds	r0, r5, r3
 800257e:	f7fd fdc9 	bl	8000114 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002582:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002584:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002588:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800258a:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800258c:	682b      	ldr	r3, [r5, #0]
 800258e:	4a21      	ldr	r2, [pc, #132]	@ (8002614 <HAL_DMA_Init+0xa8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002590:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002592:	4013      	ands	r3, r2
 8002594:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002596:	68e3      	ldr	r3, [r4, #12]
 8002598:	6921      	ldr	r1, [r4, #16]
 800259a:	433b      	orrs	r3, r7
 800259c:	430b      	orrs	r3, r1
 800259e:	6961      	ldr	r1, [r4, #20]
 80025a0:	682a      	ldr	r2, [r5, #0]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025a6:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80025a8:	430b      	orrs	r3, r1
 80025aa:	69e1      	ldr	r1, [r4, #28]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6a21      	ldr	r1, [r4, #32]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4313      	orrs	r3, r2
 80025b4:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025b6:	f7ff ffbf 	bl	8002538 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	429f      	cmp	r7, r3
 80025c0:	d101      	bne.n	80025c6 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025c2:	2300      	movs	r3, #0
 80025c4:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025c6:	233f      	movs	r3, #63	@ 0x3f
 80025c8:	6862      	ldr	r2, [r4, #4]
 80025ca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80025cc:	4013      	ands	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80025d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025d4:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d6:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025d8:	2a03      	cmp	r2, #3
 80025da:	d814      	bhi.n	8002606 <HAL_DMA_Init+0x9a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <HAL_DMA_Init+0xac>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025de:	480f      	ldr	r0, [pc, #60]	@ (800261c <HAL_DMA_Init+0xb0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025e0:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025e2:	2201      	movs	r2, #1
 80025e4:	3b01      	subs	r3, #1
 80025e6:	409a      	lsls	r2, r3
 80025e8:	65a2      	str	r2, [r4, #88]	@ 0x58
 80025ea:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025ec:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025ee:	0089      	lsls	r1, r1, #2
 80025f0:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025f2:	6560      	str	r0, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025f4:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f6:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80025fa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 80025fe:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8002600:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8002602:	77e0      	strb	r0, [r4, #31]
}
 8002604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800260a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800260c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800260e:	e7f3      	b.n	80025f8 <HAL_DMA_Init+0x8c>
 8002610:	bffdfff8 	.word	0xbffdfff8
 8002614:	ffff800f 	.word	0xffff800f
 8002618:	1000823f 	.word	0x1000823f
 800261c:	40020940 	.word	0x40020940

08002620 <HAL_DMA_Abort_IT>:
{
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002622:	1d81      	adds	r1, r0, #6
 8002624:	7fcb      	ldrb	r3, [r1, #31]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262a:	2304      	movs	r3, #4
 800262c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800262e:	2001      	movs	r0, #1
}
 8002630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002632:	240e      	movs	r4, #14
 8002634:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002636:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002638:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800263a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263c:	43a3      	bics	r3, r4
 800263e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002640:	2301      	movs	r3, #1
 8002642:	6814      	ldr	r4, [r2, #0]
 8002644:	439c      	bics	r4, r3
 8002646:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002648:	682a      	ldr	r2, [r5, #0]
 800264a:	4c10      	ldr	r4, [pc, #64]	@ (800268c <HAL_DMA_Abort_IT+0x6c>)
 800264c:	4022      	ands	r2, r4
 800264e:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002650:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002652:	4d0f      	ldr	r5, [pc, #60]	@ (8002690 <HAL_DMA_Abort_IT+0x70>)
 8002654:	403a      	ands	r2, r7
 8002656:	4093      	lsls	r3, r2
 8002658:	686e      	ldr	r6, [r5, #4]
 800265a:	4333      	orrs	r3, r6
 800265c:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002660:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002662:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002664:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4022      	ands	r2, r4
 800266e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002670:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002672:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002674:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002676:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002678:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 800267a:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 800267c:	1d43      	adds	r3, r0, #5
 800267e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8002680:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002682:	4293      	cmp	r3, r2
 8002684:	d000      	beq.n	8002688 <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8002686:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2000      	movs	r0, #0
 800268a:	e7d1      	b.n	8002630 <HAL_DMA_Abort_IT+0x10>
 800268c:	fffffeff 	.word	0xfffffeff
 8002690:	40020000 	.word	0x40020000

08002694 <HAL_DMA_IRQHandler>:
{
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002696:	241c      	movs	r4, #28
 8002698:	2704      	movs	r7, #4
 800269a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = DMA1->ISR;
 800269c:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800269e:	4021      	ands	r1, r4
 80026a0:	003c      	movs	r4, r7
 80026a2:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80026a4:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026a6:	6803      	ldr	r3, [r0, #0]
 80026a8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026aa:	4226      	tst	r6, r4
 80026ac:	d00f      	beq.n	80026ce <HAL_DMA_IRQHandler+0x3a>
 80026ae:	423d      	tst	r5, r7
 80026b0:	d00d      	beq.n	80026ce <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	0689      	lsls	r1, r1, #26
 80026b6:	d402      	bmi.n	80026be <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	43b9      	bics	r1, r7
 80026bc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80026be:	6853      	ldr	r3, [r2, #4]
 80026c0:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 80026c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80026c4:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01b      	beq.n	8002702 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80026ca:	4798      	blx	r3
  return;
 80026cc:	e019      	b.n	8002702 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80026ce:	2702      	movs	r7, #2
 80026d0:	003c      	movs	r4, r7
 80026d2:	408c      	lsls	r4, r1
 80026d4:	4226      	tst	r6, r4
 80026d6:	d015      	beq.n	8002704 <HAL_DMA_IRQHandler+0x70>
 80026d8:	423d      	tst	r5, r7
 80026da:	d013      	beq.n	8002704 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	0689      	lsls	r1, r1, #26
 80026e0:	d406      	bmi.n	80026f0 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e2:	250a      	movs	r5, #10
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	43a9      	bics	r1, r5
 80026e8:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80026ea:	2101      	movs	r1, #1
 80026ec:	1d83      	adds	r3, r0, #6
 80026ee:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80026f0:	6853      	ldr	r3, [r2, #4]
 80026f2:	431c      	orrs	r4, r3
 80026f4:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 80026f6:	2200      	movs	r2, #0
 80026f8:	1d43      	adds	r3, r0, #5
 80026fa:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 80026fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d1e3      	bne.n	80026ca <HAL_DMA_IRQHandler+0x36>
}
 8002702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002704:	2408      	movs	r4, #8
 8002706:	0027      	movs	r7, r4
 8002708:	408f      	lsls	r7, r1
 800270a:	423e      	tst	r6, r7
 800270c:	d0f9      	beq.n	8002702 <HAL_DMA_IRQHandler+0x6e>
 800270e:	4225      	tst	r5, r4
 8002710:	d0f7      	beq.n	8002702 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002712:	250e      	movs	r5, #14
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	43ac      	bics	r4, r5
 8002718:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800271a:	2301      	movs	r3, #1
 800271c:	001d      	movs	r5, r3
 800271e:	408d      	lsls	r5, r1
 8002720:	0029      	movs	r1, r5
 8002722:	6854      	ldr	r4, [r2, #4]
 8002724:	4321      	orrs	r1, r4
 8002726:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002728:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800272a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800272c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800272e:	2200      	movs	r2, #0
 8002730:	1d43      	adds	r3, r0, #5
 8002732:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002734:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002736:	e7e2      	b.n	80026fe <HAL_DMA_IRQHandler+0x6a>
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_DMA_GetState>:
  return hdma->State;
 800273c:	3006      	adds	r0, #6
 800273e:	7fc0      	ldrb	r0, [r0, #31]
 8002740:	b2c0      	uxtb	r0, r0
}
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002744:	2300      	movs	r3, #0
{
 8002746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002748:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	680a      	ldr	r2, [r1, #0]
 800274c:	0014      	movs	r4, r2
 800274e:	40dc      	lsrs	r4, r3
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8002752:	b005      	add	sp, #20
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002756:	2501      	movs	r5, #1
 8002758:	0014      	movs	r4, r2
 800275a:	409d      	lsls	r5, r3
 800275c:	402c      	ands	r4, r5
 800275e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002760:	422a      	tst	r2, r5
 8002762:	d100      	bne.n	8002766 <HAL_GPIO_Init+0x22>
 8002764:	e091      	b.n	800288a <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002766:	684a      	ldr	r2, [r1, #4]
 8002768:	005f      	lsls	r7, r3, #1
 800276a:	4694      	mov	ip, r2
 800276c:	2203      	movs	r2, #3
 800276e:	4664      	mov	r4, ip
 8002770:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002772:	2403      	movs	r4, #3
 8002774:	40bc      	lsls	r4, r7
 8002776:	43e4      	mvns	r4, r4
 8002778:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800277a:	1e54      	subs	r4, r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d82e      	bhi.n	80027de <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8002780:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002782:	9c01      	ldr	r4, [sp, #4]
 8002784:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002786:	68cc      	ldr	r4, [r1, #12]
 8002788:	40bc      	lsls	r4, r7
 800278a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800278c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800278e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002790:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002792:	43ac      	bics	r4, r5
 8002794:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002796:	4664      	mov	r4, ip
 8002798:	0924      	lsrs	r4, r4, #4
 800279a:	4034      	ands	r4, r6
 800279c:	409c      	lsls	r4, r3
 800279e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80027a0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80027a2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027a4:	9c01      	ldr	r4, [sp, #4]
 80027a6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027a8:	688c      	ldr	r4, [r1, #8]
 80027aa:	40bc      	lsls	r4, r7
 80027ac:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80027ae:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	2a02      	cmp	r2, #2
 80027b2:	d116      	bne.n	80027e2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b4:	2507      	movs	r5, #7
 80027b6:	260f      	movs	r6, #15
 80027b8:	401d      	ands	r5, r3
 80027ba:	00ad      	lsls	r5, r5, #2
 80027bc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80027be:	08dc      	lsrs	r4, r3, #3
 80027c0:	00a4      	lsls	r4, r4, #2
 80027c2:	1904      	adds	r4, r0, r4
 80027c4:	9402      	str	r4, [sp, #8]
 80027c6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c8:	9603      	str	r6, [sp, #12]
 80027ca:	0026      	movs	r6, r4
 80027cc:	9c03      	ldr	r4, [sp, #12]
 80027ce:	43a6      	bics	r6, r4
 80027d0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d2:	690e      	ldr	r6, [r1, #16]
 80027d4:	40ae      	lsls	r6, r5
 80027d6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80027d8:	9c02      	ldr	r4, [sp, #8]
 80027da:	6226      	str	r6, [r4, #32]
 80027dc:	e001      	b.n	80027e2 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027de:	2a03      	cmp	r2, #3
 80027e0:	d1df      	bne.n	80027a2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80027e4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027e6:	9d01      	ldr	r5, [sp, #4]
 80027e8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ea:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ec:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80027ee:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f0:	4662      	mov	r2, ip
 80027f2:	02a4      	lsls	r4, r4, #10
 80027f4:	4222      	tst	r2, r4
 80027f6:	d048      	beq.n	800288a <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 80027f8:	4a25      	ldr	r2, [pc, #148]	@ (8002890 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027fa:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80027fc:	089c      	lsrs	r4, r3, #2
 80027fe:	00a4      	lsls	r4, r4, #2
 8002800:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002802:	220f      	movs	r2, #15
 8002804:	401d      	ands	r5, r3
 8002806:	00ed      	lsls	r5, r5, #3
 8002808:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800280a:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800280c:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800280e:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002810:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002812:	2200      	movs	r2, #0
 8002814:	42b8      	cmp	r0, r7
 8002816:	d00c      	beq.n	8002832 <HAL_GPIO_Init+0xee>
 8002818:	4f1e      	ldr	r7, [pc, #120]	@ (8002894 <HAL_GPIO_Init+0x150>)
 800281a:	3201      	adds	r2, #1
 800281c:	42b8      	cmp	r0, r7
 800281e:	d008      	beq.n	8002832 <HAL_GPIO_Init+0xee>
 8002820:	4f1d      	ldr	r7, [pc, #116]	@ (8002898 <HAL_GPIO_Init+0x154>)
 8002822:	3201      	adds	r2, #1
 8002824:	42b8      	cmp	r0, r7
 8002826:	d004      	beq.n	8002832 <HAL_GPIO_Init+0xee>
 8002828:	4f1c      	ldr	r7, [pc, #112]	@ (800289c <HAL_GPIO_Init+0x158>)
 800282a:	3203      	adds	r2, #3
 800282c:	42b8      	cmp	r0, r7
 800282e:	d100      	bne.n	8002832 <HAL_GPIO_Init+0xee>
 8002830:	3a02      	subs	r2, #2
 8002832:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002834:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002836:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8002838:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800283a:	4c15      	ldr	r4, [pc, #84]	@ (8002890 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 800283c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800283e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8002840:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8002842:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8002844:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002846:	02ff      	lsls	r7, r7, #11
 8002848:	d401      	bmi.n	800284e <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 800284a:	0035      	movs	r5, r6
 800284c:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800284e:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8002850:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8002852:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8002854:	9d00      	ldr	r5, [sp, #0]
 8002856:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002858:	02bf      	lsls	r7, r7, #10
 800285a:	d401      	bmi.n	8002860 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 800285c:	0035      	movs	r5, r6
 800285e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002860:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8002862:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8002864:	4c0e      	ldr	r4, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8002866:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8002868:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800286a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286c:	03bf      	lsls	r7, r7, #14
 800286e:	d401      	bmi.n	8002874 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8002870:	0035      	movs	r5, r6
 8002872:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002874:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8002876:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8002878:	4c0a      	ldr	r4, [pc, #40]	@ (80028a4 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800287a:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800287c:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800287e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002880:	03ff      	lsls	r7, r7, #15
 8002882:	d401      	bmi.n	8002888 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002884:	4015      	ands	r5, r2
 8002886:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8002888:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800288a:	3301      	adds	r3, #1
 800288c:	e75d      	b.n	800274a <HAL_GPIO_Init+0x6>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	40021800 	.word	0x40021800
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	40021808 	.word	0x40021808
 80028a4:	40021804 	.word	0x40021804

080028a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028a8:	6900      	ldr	r0, [r0, #16]
 80028aa:	4008      	ands	r0, r1
 80028ac:	1e43      	subs	r3, r0, #1
 80028ae:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80028b0:	b2c0      	uxtb	r0, r0
}
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d001      	beq.n	80028bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028bc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80028be:	e7fc      	b.n	80028ba <HAL_GPIO_WritePin+0x6>

080028c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	0792      	lsls	r2, r2, #30
 80028c6:	d501      	bpl.n	80028cc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028cc:	2201      	movs	r2, #1
 80028ce:	6999      	ldr	r1, [r3, #24]
 80028d0:	4211      	tst	r1, r2
 80028d2:	d102      	bne.n	80028da <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	619a      	str	r2, [r3, #24]
  }
}
 80028da:	4770      	bx	lr

080028dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028dc:	b530      	push	{r4, r5, lr}
 80028de:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028e0:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e2:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028e4:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e6:	0589      	lsls	r1, r1, #22
 80028e8:	431a      	orrs	r2, r3
 80028ea:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <I2C_TransferConfig+0x28>)
 80028ee:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f0:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80028f2:	0d64      	lsrs	r4, r4, #21
 80028f4:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f6:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80028f8:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fa:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80028fc:	432a      	orrs	r2, r5
 80028fe:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	03ff63ff 	.word	0x03ff63ff

08002908 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002908:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800290a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800290c:	4c1b      	ldr	r4, [pc, #108]	@ (800297c <I2C_Enable_IRQ+0x74>)
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800290e:	b20b      	sxth	r3, r1
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002910:	42a2      	cmp	r2, r4
 8002912:	d01e      	beq.n	8002952 <I2C_Enable_IRQ+0x4a>
 8002914:	4c1a      	ldr	r4, [pc, #104]	@ (8002980 <I2C_Enable_IRQ+0x78>)
 8002916:	42a2      	cmp	r2, r4
 8002918:	d01b      	beq.n	8002952 <I2C_Enable_IRQ+0x4a>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800291a:	4c1a      	ldr	r4, [pc, #104]	@ (8002984 <I2C_Enable_IRQ+0x7c>)
 800291c:	42a2      	cmp	r2, r4
 800291e:	d018      	beq.n	8002952 <I2C_Enable_IRQ+0x4a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002920:	22b8      	movs	r2, #184	@ 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002922:	24f2      	movs	r4, #242	@ 0xf2
  uint32_t tmpisr = 0U;
 8002924:	17db      	asrs	r3, r3, #31
 8002926:	401a      	ands	r2, r3
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002928:	07cb      	lsls	r3, r1, #31
 800292a:	17db      	asrs	r3, r3, #31
 800292c:	4023      	ands	r3, r4
 800292e:	4313      	orrs	r3, r2
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002930:	078a      	lsls	r2, r1, #30
 8002932:	d501      	bpl.n	8002938 <I2C_Enable_IRQ+0x30>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002934:	22f4      	movs	r2, #244	@ 0xf4
 8002936:	4313      	orrs	r3, r2
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002938:	2910      	cmp	r1, #16
 800293a:	d106      	bne.n	800294a <I2C_Enable_IRQ+0x42>
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800293c:	2290      	movs	r2, #144	@ 0x90
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800293e:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002940:	6801      	ldr	r1, [r0, #0]
 8002942:	680a      	ldr	r2, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
}
 8002948:	bd10      	pop	{r4, pc}
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800294a:	2920      	cmp	r1, #32
 800294c:	d1f8      	bne.n	8002940 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
 800294e:	430b      	orrs	r3, r1
 8002950:	e7f6      	b.n	8002940 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002952:	22b8      	movs	r2, #184	@ 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002954:	24f2      	movs	r4, #242	@ 0xf2
  uint32_t tmpisr = 0U;
 8002956:	17db      	asrs	r3, r3, #31
 8002958:	401a      	ands	r2, r3
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800295a:	07cb      	lsls	r3, r1, #31
 800295c:	17db      	asrs	r3, r3, #31
 800295e:	4023      	ands	r3, r4
 8002960:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002962:	078a      	lsls	r2, r1, #30
 8002964:	d501      	bpl.n	800296a <I2C_Enable_IRQ+0x62>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002966:	22f4      	movs	r2, #244	@ 0xf4
 8002968:	4313      	orrs	r3, r2
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800296a:	2910      	cmp	r1, #16
 800296c:	d0e6      	beq.n	800293c <I2C_Enable_IRQ+0x34>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800296e:	2920      	cmp	r1, #32
 8002970:	d101      	bne.n	8002976 <I2C_Enable_IRQ+0x6e>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002972:	2260      	movs	r2, #96	@ 0x60
 8002974:	e7e3      	b.n	800293e <I2C_Enable_IRQ+0x36>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002976:	2940      	cmp	r1, #64	@ 0x40
 8002978:	d0e9      	beq.n	800294e <I2C_Enable_IRQ+0x46>
 800297a:	e7e1      	b.n	8002940 <I2C_Enable_IRQ+0x38>
 800297c:	08003495 	.word	0x08003495
 8002980:	080038d9 	.word	0x080038d9
 8002984:	08003339 	.word	0x08003339

08002988 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 8002988:	2300      	movs	r3, #0
{
 800298a:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800298c:	07ca      	lsls	r2, r1, #31
 800298e:	d508      	bpl.n	80029a2 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002990:	0003      	movs	r3, r0
 8002992:	3341      	adds	r3, #65	@ 0x41
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	2328      	movs	r3, #40	@ 0x28
 8002998:	401a      	ands	r2, r3
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800299a:	33ca      	adds	r3, #202	@ 0xca
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800299c:	2a28      	cmp	r2, #40	@ 0x28
 800299e:	d100      	bne.n	80029a2 <I2C_Disable_IRQ+0x1a>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029a0:	3bb0      	subs	r3, #176	@ 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029a2:	078a      	lsls	r2, r1, #30
 80029a4:	d508      	bpl.n	80029b8 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029a6:	0002      	movs	r2, r0
 80029a8:	2428      	movs	r4, #40	@ 0x28
 80029aa:	3241      	adds	r2, #65	@ 0x41
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4022      	ands	r2, r4
 80029b0:	42a2      	cmp	r2, r4
 80029b2:	d10b      	bne.n	80029cc <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029b4:	2244      	movs	r2, #68	@ 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029b6:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029b8:	b209      	sxth	r1, r1
 80029ba:	2900      	cmp	r1, #0
 80029bc:	da01      	bge.n	80029c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029be:	22b8      	movs	r2, #184	@ 0xb8
 80029c0:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029c2:	6801      	ldr	r1, [r0, #0]
 80029c4:	680a      	ldr	r2, [r1, #0]
 80029c6:	439a      	bics	r2, r3
 80029c8:	600a      	str	r2, [r1, #0]
}
 80029ca:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029cc:	22f4      	movs	r2, #244	@ 0xf4
 80029ce:	e7f2      	b.n	80029b6 <I2C_Disable_IRQ+0x2e>

080029d0 <I2C_IsErrorOccurred>:
{
 80029d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029d2:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80029d4:	6802      	ldr	r2, [r0, #0]
{
 80029d6:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80029d8:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029da:	2310      	movs	r3, #16
 80029dc:	000f      	movs	r7, r1
{
 80029de:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029e0:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029e4:	4219      	tst	r1, r3
 80029e6:	d00d      	beq.n	8002a04 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ea:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80029ec:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	2120      	movs	r1, #32
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	420a      	tst	r2, r1
 80029f6:	d15f      	bne.n	8002ab8 <I2C_IsErrorOccurred+0xe8>
 80029f8:	2f00      	cmp	r7, #0
 80029fa:	d031      	beq.n	8002a60 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 80029fc:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002a00:	9b01      	ldr	r3, [sp, #4]
 8002a02:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a04:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002a06:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a08:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8002a0a:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a0c:	4213      	tst	r3, r2
 8002a0e:	d002      	beq.n	8002a16 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8002a10:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a12:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002a14:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	00d2      	lsls	r2, r2, #3
 8002a1a:	4213      	tst	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8002a1e:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8002a22:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a24:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4213      	tst	r3, r2
 8002a2c:	d049      	beq.n	8002ac2 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a2e:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a30:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a32:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8002a34:	0020      	movs	r0, r4
 8002a36:	f7ff ff43 	bl	80028c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002a3a:	686b      	ldr	r3, [r5, #4]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8002a3e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002a40:	4013      	ands	r3, r2
 8002a42:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8002a44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002a48:	433b      	orrs	r3, r7
 8002a4a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	0023      	movs	r3, r4
 8002a4e:	3341      	adds	r3, #65	@ 0x41
 8002a50:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	0022      	movs	r2, r4
 8002a54:	2300      	movs	r3, #0
 8002a56:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002a58:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002a5c:	7023      	strb	r3, [r4, #0]
 8002a5e:	e032      	b.n	8002ac6 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8002a60:	1c72      	adds	r2, r6, #1
 8002a62:	d0c5      	beq.n	80029f0 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	f7ff fa24 	bl	8001eb0 <HAL_GetTick>
 8002a68:	1b40      	subs	r0, r0, r5
 8002a6a:	42b0      	cmp	r0, r6
 8002a6c:	d801      	bhi.n	8002a72 <I2C_IsErrorOccurred+0xa2>
 8002a6e:	2e00      	cmp	r6, #0
 8002a70:	d1bd      	bne.n	80029ee <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8002a72:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a74:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002a76:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a78:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002a7a:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a7c:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 8002a7e:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	d50b      	bpl.n	8002a9c <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a88:	4210      	tst	r0, r2
 8002a8a:	d107      	bne.n	8002a9c <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a8c:	2920      	cmp	r1, #32
 8002a8e:	d005      	beq.n	8002a9c <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002a96:	f7ff fa0b 	bl	8001eb0 <HAL_GetTick>
 8002a9a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4213      	tst	r3, r2
 8002aa4:	d1a3      	bne.n	80029ee <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aa6:	f7ff fa03 	bl	8001eb0 <HAL_GetTick>
 8002aaa:	1b40      	subs	r0, r0, r5
 8002aac:	2819      	cmp	r0, #25
 8002aae:	d9f5      	bls.n	8002a9c <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8002ab2:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	e79a      	b.n	80029ee <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	d19f      	bne.n	80029fc <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abc:	2220      	movs	r2, #32
 8002abe:	61da      	str	r2, [r3, #28]
 8002ac0:	e79c      	b.n	80029fc <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d1b6      	bne.n	8002a34 <I2C_IsErrorOccurred+0x64>
}
 8002ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ac8:	fe00e800 	.word	0xfe00e800

08002acc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	0004      	movs	r4, r0
 8002ad0:	000d      	movs	r5, r1
 8002ad2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad4:	2702      	movs	r7, #2
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	423b      	tst	r3, r7
 8002adc:	d001      	beq.n	8002ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e021      	b.n	8002b26 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	0032      	movs	r2, r6
 8002ae4:	0029      	movs	r1, r5
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	f7ff ff72 	bl	80029d0 <I2C_IsErrorOccurred>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d119      	bne.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8002af0:	1c6b      	adds	r3, r5, #1
 8002af2:	d0f0      	beq.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7ff f9dc 	bl	8001eb0 <HAL_GetTick>
 8002af8:	1b80      	subs	r0, r0, r6
 8002afa:	42a8      	cmp	r0, r5
 8002afc:	d801      	bhi.n	8002b02 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	d1e9      	bne.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	6999      	ldr	r1, [r3, #24]
 8002b06:	2302      	movs	r3, #2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	4219      	tst	r1, r3
 8002b0e:	d1e2      	bne.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	2120      	movs	r1, #32
 8002b12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002b1a:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	3341      	adds	r3, #65	@ 0x41
 8002b1e:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8002b22:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
}
 8002b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b28 <I2C_WaitOnFlagUntilTimeout>:
{
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	0004      	movs	r4, r0
 8002b2c:	000d      	movs	r5, r1
 8002b2e:	0017      	movs	r7, r2
 8002b30:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	402b      	ands	r3, r5
 8002b38:	1b5b      	subs	r3, r3, r5
 8002b3a:	425a      	negs	r2, r3
 8002b3c:	4153      	adcs	r3, r2
 8002b3e:	42bb      	cmp	r3, r7
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
 8002b44:	e026      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	0031      	movs	r1, r6
 8002b48:	0020      	movs	r0, r4
 8002b4a:	9a06      	ldr	r2, [sp, #24]
 8002b4c:	f7ff ff40 	bl	80029d0 <I2C_IsErrorOccurred>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d11e      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	1c73      	adds	r3, r6, #1
 8002b56:	d0ec      	beq.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7ff f9aa 	bl	8001eb0 <HAL_GetTick>
 8002b5c:	9b06      	ldr	r3, [sp, #24]
 8002b5e:	1ac0      	subs	r0, r0, r3
 8002b60:	42b0      	cmp	r0, r6
 8002b62:	d801      	bhi.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x40>
 8002b64:	2e00      	cmp	r6, #0
 8002b66:	d1e4      	bne.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	402b      	ands	r3, r5
 8002b6e:	1b5b      	subs	r3, r3, r5
 8002b70:	425a      	negs	r2, r3
 8002b72:	4153      	adcs	r3, r2
 8002b74:	42bb      	cmp	r3, r7
 8002b76:	d1dc      	bne.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	2220      	movs	r2, #32
 8002b7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	0023      	movs	r3, r4
 8002b82:	3341      	adds	r3, #65	@ 0x41
 8002b84:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	0022      	movs	r2, r4
 8002b88:	2300      	movs	r3, #0
 8002b8a:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002b8c:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8e:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002b90:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002b92:	2001      	movs	r0, #1
}
 8002b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b96 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b98:	0004      	movs	r4, r0
 8002b9a:	000e      	movs	r6, r1
 8002b9c:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9e:	2520      	movs	r5, #32
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	422b      	tst	r3, r5
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002ba8:	2000      	movs	r0, #0
 8002baa:	e01d      	b.n	8002be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	003a      	movs	r2, r7
 8002bae:	0031      	movs	r1, r6
 8002bb0:	0020      	movs	r0, r4
 8002bb2:	f7ff ff0d 	bl	80029d0 <I2C_IsErrorOccurred>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d115      	bne.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7ff f979 	bl	8001eb0 <HAL_GetTick>
 8002bbe:	1bc0      	subs	r0, r0, r7
 8002bc0:	42b0      	cmp	r0, r6
 8002bc2:	d801      	bhi.n	8002bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	d1eb      	bne.n	8002ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	001a      	movs	r2, r3
 8002bce:	402a      	ands	r2, r5
 8002bd0:	422b      	tst	r3, r5
 8002bd2:	d1e5      	bne.n	8002ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002bd6:	432b      	orrs	r3, r5
 8002bd8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002bdc:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	3341      	adds	r3, #65	@ 0x41
 8002be0:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002be4:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
}
 8002be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bec <HAL_I2C_Init>:
{
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d04e      	beq.n	8002c94 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	0025      	movs	r5, r4
 8002bf8:	3541      	adds	r5, #65	@ 0x41
 8002bfa:	782b      	ldrb	r3, [r5, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	0023      	movs	r3, r4
 8002c04:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002c06:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002c08:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002c0a:	f7fe ffed 	bl	8001be8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0e:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c12:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002c14:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c16:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c1a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c20:	491d      	ldr	r1, [pc, #116]	@ (8002c98 <HAL_I2C_Init+0xac>)
 8002c22:	6862      	ldr	r2, [r4, #4]
 8002c24:	400a      	ands	r2, r1
 8002c26:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	491c      	ldr	r1, [pc, #112]	@ (8002c9c <HAL_I2C_Init+0xb0>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c30:	2801      	cmp	r0, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	0212      	lsls	r2, r2, #8
 8002c38:	4332      	orrs	r2, r6
 8002c3a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4818      	ldr	r0, [pc, #96]	@ (8002ca0 <HAL_I2C_Init+0xb4>)
 8002c40:	4002      	ands	r2, r0
 8002c42:	e009      	b.n	8002c58 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c44:	2284      	movs	r2, #132	@ 0x84
 8002c46:	0212      	lsls	r2, r2, #8
 8002c48:	4332      	orrs	r2, r6
 8002c4a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c4c:	2802      	cmp	r0, #2
 8002c4e:	d1f5      	bne.n	8002c3c <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	6858      	ldr	r0, [r3, #4]
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c58:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c5a:	6858      	ldr	r0, [r3, #4]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_I2C_Init+0xb8>)
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c62:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c66:	400a      	ands	r2, r1
 8002c68:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6a:	6961      	ldr	r1, [r4, #20]
 8002c6c:	6922      	ldr	r2, [r4, #16]
 8002c6e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c70:	69a1      	ldr	r1, [r4, #24]
 8002c72:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	69e2      	ldr	r2, [r4, #28]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c80:	2201      	movs	r2, #1
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	3442      	adds	r4, #66	@ 0x42
 8002c92:	7020      	strb	r0, [r4, #0]
}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	f0ffffff 	.word	0xf0ffffff
 8002c9c:	ffff7fff 	.word	0xffff7fff
 8002ca0:	fffff7ff 	.word	0xfffff7ff
 8002ca4:	02008000 	.word	0x02008000

08002ca8 <HAL_I2C_Mem_Write>:
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002caa:	0007      	movs	r7, r0
{
 8002cac:	b087      	sub	sp, #28
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	ab0c      	add	r3, sp, #48	@ 0x30
 8002cb2:	9202      	str	r2, [sp, #8]
 8002cb4:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	3741      	adds	r7, #65	@ 0x41
{
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	9204      	str	r2, [sp, #16]
 8002cbc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	783b      	ldrb	r3, [r7, #0]
{
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8002cc4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d108      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x2c>
 8002cce:	9b05      	ldr	r3, [sp, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
}
 8002cdc:	b007      	add	sp, #28
 8002cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	3340      	adds	r3, #64	@ 0x40
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	2a01      	cmp	r2, #1
 8002cea:	d0f7      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x34>
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002cf0:	f7ff f8de 	bl	8001eb0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002cf6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf8:	9000      	str	r0, [sp, #0]
 8002cfa:	2319      	movs	r3, #25
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	0020      	movs	r0, r4
 8002d00:	0209      	lsls	r1, r1, #8
 8002d02:	f7ff ff11 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1e7      	bne.n	8002cda <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d0a:	2321      	movs	r3, #33	@ 0x21
 8002d0c:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d0e:	0027      	movs	r7, r4
 8002d10:	331f      	adds	r3, #31
 8002d12:	3742      	adds	r7, #66	@ 0x42
 8002d14:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8002d16:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002d1a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d1c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002d1e:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8002d20:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d22:	466b      	mov	r3, sp
 8002d24:	7b1a      	ldrb	r2, [r3, #12]
 8002d26:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_I2C_Mem_Write+0x1ac>)
 8002d28:	0031      	movs	r1, r6
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	0020      	movs	r0, r4
 8002d30:	045b      	lsls	r3, r3, #17
 8002d32:	f7ff fdd3 	bl	80028dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	002a      	movs	r2, r5
 8002d38:	0020      	movs	r0, r4
 8002d3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002d3c:	f7ff fec6 	bl	8002acc <I2C_WaitOnTXISFlagUntilTimeout>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d129      	bne.n	8002d98 <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d44:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d48:	2a01      	cmp	r2, #1
 8002d4a:	d116      	bne.n	8002d7a <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	466a      	mov	r2, sp
 8002d4e:	7a12      	ldrb	r2, [r2, #8]
 8002d50:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0020      	movs	r0, r4
 8002d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d5a:	9500      	str	r5, [sp, #0]
 8002d5c:	f7ff fee4 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d119      	bne.n	8002d98 <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d66:	2bff      	cmp	r3, #255	@ 0xff
 8002d68:	d81a      	bhi.n	8002da0 <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6a:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002d6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6e:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002d70:	b292      	uxth	r2, r2
 8002d72:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	9000      	str	r0, [sp, #0]
 8002d78:	e017      	b.n	8002daa <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7a:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7c:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7e:	0a12      	lsrs	r2, r2, #8
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002d84:	002a      	movs	r2, r5
 8002d86:	f7ff fea1 	bl	8002acc <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8e:	466b      	mov	r3, sp
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	7a1b      	ldrb	r3, [r3, #8]
 8002d94:	6293      	str	r3, [r2, #40]	@ 0x28
 8002d96:	e7dc      	b.n	8002d52 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	3440      	adds	r4, #64	@ 0x40
 8002d9c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002d9e:	e79c      	b.n	8002cda <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da0:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002da2:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002da6:	045b      	lsls	r3, r3, #17
 8002da8:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002daa:	0031      	movs	r1, r6
 8002dac:	0020      	movs	r0, r4
 8002dae:	f7ff fd95 	bl	80028dc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db2:	002a      	movs	r2, r5
 8002db4:	0020      	movs	r0, r4
 8002db6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002db8:	f7ff fe88 	bl	8002acc <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d000      	beq.n	8002dc2 <HAL_I2C_Mem_Write+0x11a>
 8002dc0:	e78b      	b.n	8002cda <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002dc8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dca:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002dcc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002dce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <HAL_I2C_Mem_Write+0x16a>
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d114      	bne.n	8002e12 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	0020      	movs	r0, r4
 8002dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002dee:	9500      	str	r5, [sp, #0]
 8002df0:	f7ff fe9a 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d000      	beq.n	8002dfa <HAL_I2C_Mem_Write+0x152>
 8002df8:	e76f      	b.n	8002cda <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002dfc:	2bff      	cmp	r3, #255	@ 0xff
 8002dfe:	d921      	bls.n	8002e44 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e00:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e02:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e04:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e06:	045b      	lsls	r3, r3, #17
 8002e08:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0a:	0031      	movs	r1, r6
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7ff fd65 	bl	80028dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002e12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1cc      	bne.n	8002db2 <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	002a      	movs	r2, r5
 8002e1a:	0020      	movs	r0, r4
 8002e1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e1e:	f7ff feba 	bl	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d000      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x180>
 8002e26:	e758      	b.n	8002cda <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e28:	2120      	movs	r1, #32
 8002e2a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002e2c:	4d0a      	ldr	r5, [pc, #40]	@ (8002e58 <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	402a      	ands	r2, r5
 8002e34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002e38:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	3341      	adds	r3, #65	@ 0x41
 8002e3c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e3e:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002e40:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002e42:	e74b      	b.n	8002cdc <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e44:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002e46:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e48:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	9000      	str	r0, [sp, #0]
 8002e52:	e7da      	b.n	8002e0a <HAL_I2C_Mem_Write+0x162>
 8002e54:	80002000 	.word	0x80002000
 8002e58:	fe00e800 	.word	0xfe00e800

08002e5c <HAL_I2C_Mem_Read_IT>:
{
 8002e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5e:	0006      	movs	r6, r0
{
 8002e60:	b087      	sub	sp, #28
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	ab0c      	add	r3, sp, #48	@ 0x30
 8002e66:	cb20      	ldmia	r3!, {r5}
 8002e68:	9202      	str	r2, [sp, #8]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6c:	3641      	adds	r6, #65	@ 0x41
{
 8002e6e:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e70:	7833      	ldrb	r3, [r6, #0]
{
 8002e72:	0004      	movs	r4, r0
      return HAL_BUSY;
 8002e74:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d108      	bne.n	8002e8c <HAL_I2C_Mem_Read_IT+0x30>
    if ((pData == NULL) || (Size == 0U))
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_I2C_Mem_Read_IT+0x28>
 8002e7e:	9b04      	ldr	r3, [sp, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_I2C_Mem_Read_IT+0x34>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e84:	2380      	movs	r3, #128	@ 0x80
      return  HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8002e8c:	b007      	add	sp, #28
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	2780      	movs	r7, #128	@ 0x80
 8002e94:	6998      	ldr	r0, [r3, #24]
 8002e96:	023f      	lsls	r7, r7, #8
 8002e98:	4684      	mov	ip, r0
 8002e9a:	4662      	mov	r2, ip
 8002e9c:	4038      	ands	r0, r7
 8002e9e:	9005      	str	r0, [sp, #20]
      return HAL_BUSY;
 8002ea0:	2002      	movs	r0, #2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ea2:	423a      	tst	r2, r7
 8002ea4:	d1f2      	bne.n	8002e8c <HAL_I2C_Mem_Read_IT+0x30>
    __HAL_LOCK(hi2c);
 8002ea6:	0027      	movs	r7, r4
 8002ea8:	3740      	adds	r7, #64	@ 0x40
 8002eaa:	783a      	ldrb	r2, [r7, #0]
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	d0ed      	beq.n	8002e8c <HAL_I2C_Mem_Read_IT+0x30>
 8002eb0:	3801      	subs	r0, #1
 8002eb2:	7038      	strb	r0, [r7, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eb4:	3021      	adds	r0, #33	@ 0x21
 8002eb6:	7030      	strb	r0, [r6, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002eb8:	0020      	movs	r0, r4
 8002eba:	2640      	movs	r6, #64	@ 0x40
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ebc:	9a05      	ldr	r2, [sp, #20]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002ebe:	3042      	adds	r0, #66	@ 0x42
 8002ec0:	7006      	strb	r6, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec2:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8002ec4:	9a04      	ldr	r2, [sp, #16]
    hi2c->pBuffPtr    = pData;
 8002ec6:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ec8:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_I2C_Mem_Read_IT+0xb8>)
 8002ecc:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002ece:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <HAL_I2C_Mem_Read_IT+0xbc>)
    hi2c->Devaddress  = DevAddress;
 8002ed0:	64e1      	str	r1, [r4, #76]	@ 0x4c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002ed2:	6362      	str	r2, [r4, #52]	@ 0x34
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed4:	466a      	mov	r2, sp
 8002ed6:	7a10      	ldrb	r0, [r2, #8]
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed8:	9a03      	ldr	r2, [sp, #12]
 8002eda:	2a01      	cmp	r2, #1
 8002edc:	d115      	bne.n	8002f0a <HAL_I2C_Mem_Read_IT+0xae>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	6298      	str	r0, [r3, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	6523      	str	r3, [r4, #80]	@ 0x50
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ee6:	466b      	mov	r3, sp
 8002ee8:	7b1a      	ldrb	r2, [r3, #12]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <HAL_I2C_Mem_Read_IT+0xc0>)
 8002eec:	0020      	movs	r0, r4
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f7ff fcf3 	bl	80028dc <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8002ef6:	0023      	movs	r3, r4
 8002ef8:	2500      	movs	r5, #0
 8002efa:	3340      	adds	r3, #64	@ 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002efc:	0020      	movs	r0, r4
 8002efe:	2101      	movs	r1, #1
    __HAL_UNLOCK(hi2c);
 8002f00:	701d      	strb	r5, [r3, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f02:	f7ff fd01 	bl	8002908 <I2C_Enable_IRQ>
    return HAL_OK;
 8002f06:	0028      	movs	r0, r5
 8002f08:	e7c0      	b.n	8002e8c <HAL_I2C_Mem_Read_IT+0x30>
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f0a:	9a02      	ldr	r2, [sp, #8]
 8002f0c:	0a12      	lsrs	r2, r2, #8
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002f10:	6520      	str	r0, [r4, #80]	@ 0x50
 8002f12:	e7e8      	b.n	8002ee6 <HAL_I2C_Mem_Read_IT+0x8a>
 8002f14:	ffff0000 	.word	0xffff0000
 8002f18:	0800359d 	.word	0x0800359d
 8002f1c:	80002000 	.word	0x80002000

08002f20 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f20:	6803      	ldr	r3, [r0, #0]
{
 8002f22:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f24:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f26:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002f28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d000      	beq.n	8002f30 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f2e:	4798      	blx	r3
}
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002f34:	4770      	bx	lr

08002f36 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	0003      	movs	r3, r0
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	0006      	movs	r6, r0
 8002f40:	3342      	adds	r3, #66	@ 0x42
 8002f42:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f44:	3b01      	subs	r3, #1
 8002f46:	7819      	ldrb	r1, [r3, #0]
{
 8002f48:	0004      	movs	r4, r0
 8002f4a:	3640      	adds	r6, #64	@ 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f4c:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f4e:	2921      	cmp	r1, #33	@ 0x21
 8002f50:	d10a      	bne.n	8002f68 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f52:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8002f54:	6345      	str	r5, [r0, #52]	@ 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f56:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f58:	3920      	subs	r1, #32
 8002f5a:	f7ff fd15 	bl	8002988 <I2C_Disable_IRQ>
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f5e:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002f60:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f62:	f7ff ffe6 	bl	8002f32 <HAL_I2C_MasterTxCpltCallback>
}
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f68:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 8002f6a:	6345      	str	r5, [r0, #52]	@ 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f6c:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f6e:	2102      	movs	r1, #2
 8002f70:	f7ff fd0a 	bl	8002988 <I2C_Disable_IRQ>
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f74:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002f76:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f78:	f7ff ffdc 	bl	8002f34 <HAL_I2C_MasterRxCpltCallback>
}
 8002f7c:	e7f3      	b.n	8002f66 <I2C_ITMasterSeqCplt+0x30>

08002f7e <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002f80:	4770      	bx	lr
	...

08002f84 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f86:	6803      	ldr	r3, [r0, #0]
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f8e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	3142      	adds	r1, #66	@ 0x42
 8002f92:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f94:	0451      	lsls	r1, r2, #17
 8002f96:	d518      	bpl.n	8002fca <I2C_ITSlaveSeqCplt+0x46>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4918      	ldr	r1, [pc, #96]	@ (8002ffc <I2C_ITSlaveSeqCplt+0x78>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fa0:	0023      	movs	r3, r4
 8002fa2:	3341      	adds	r3, #65	@ 0x41
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	2a29      	cmp	r2, #41	@ 0x29
 8002fa8:	d114      	bne.n	8002fd4 <I2C_ITSlaveSeqCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002faa:	3a01      	subs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fae:	2321      	movs	r3, #33	@ 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fb0:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb2:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	f7ff fce7 	bl	8002988 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fba:	0023      	movs	r3, r4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002fc2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc4:	f7ff ffdb 	bl	8002f7e <HAL_I2C_SlaveTxCpltCallback>
}
 8002fc8:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fca:	0412      	lsls	r2, r2, #16
 8002fcc:	d5e8      	bpl.n	8002fa0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	490b      	ldr	r1, [pc, #44]	@ (8003000 <I2C_ITSlaveSeqCplt+0x7c>)
 8002fd2:	e7e3      	b.n	8002f9c <I2C_ITSlaveSeqCplt+0x18>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	2a2a      	cmp	r2, #42	@ 0x2a
 8002fd8:	d1f6      	bne.n	8002fc8 <I2C_ITSlaveSeqCplt+0x44>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fda:	3a02      	subs	r2, #2
 8002fdc:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fde:	2322      	movs	r3, #34	@ 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fe0:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fe2:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	f7ff fccf 	bl	8002988 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fea:	0023      	movs	r3, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002ff2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff4:	f7ff ffc4 	bl	8002f80 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff8:	e7e6      	b.n	8002fc8 <I2C_ITSlaveSeqCplt+0x44>
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	ffffbfff 	.word	0xffffbfff
 8003000:	ffff7fff 	.word	0xffff7fff

08003004 <HAL_I2C_AddrCallback>:
}
 8003004:	4770      	bx	lr

08003006 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003006:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800300a:	2228      	movs	r2, #40	@ 0x28
 800300c:	3341      	adds	r3, #65	@ 0x41
 800300e:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003010:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8003012:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003014:	4013      	ands	r3, r2
 8003016:	4293      	cmp	r3, r2
 8003018:	d13c      	bne.n	8003094 <I2C_ITAddrCplt.constprop.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800301a:	27fe      	movs	r7, #254	@ 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 800301c:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800301e:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003020:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003022:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8003024:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003026:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003028:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800302a:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800302c:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800302e:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003030:	2a02      	cmp	r2, #2
 8003032:	d125      	bne.n	8003080 <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003034:	059b      	lsls	r3, r3, #22
 8003036:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003038:	0f5b      	lsrs	r3, r3, #29
 800303a:	4073      	eors	r3, r6
 800303c:	0018      	movs	r0, r3
 800303e:	2606      	movs	r6, #6
 8003040:	4030      	ands	r0, r6
 8003042:	4233      	tst	r3, r6
 8003044:	d110      	bne.n	8003068 <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 8003046:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003048:	3301      	adds	r3, #1
 800304a:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800304c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800304e:	2b02      	cmp	r3, #2
 8003050:	d109      	bne.n	8003066 <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003052:	199b      	adds	r3, r3, r6
          hi2c->AddrEventCount = 0U;
 8003054:	64a0      	str	r0, [r4, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003056:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8003058:	0023      	movs	r3, r4
 800305a:	3340      	adds	r3, #64	@ 0x40
 800305c:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800305e:	0029      	movs	r1, r5
 8003060:	0020      	movs	r0, r4
 8003062:	f7ff ffcf 	bl	8003004 <HAL_I2C_AddrCallback>
}
 8003066:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003068:	2180      	movs	r1, #128	@ 0x80
 800306a:	0020      	movs	r0, r4
 800306c:	0209      	lsls	r1, r1, #8
 800306e:	f7ff fc8b 	bl	8002988 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003072:	0023      	movs	r3, r4
 8003074:	2200      	movs	r2, #0
 8003076:	3340      	adds	r3, #64	@ 0x40
 8003078:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800307a:	9a01      	ldr	r2, [sp, #4]
 800307c:	403a      	ands	r2, r7
 800307e:	e7ee      	b.n	800305e <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	0209      	lsls	r1, r1, #8
 8003084:	f7ff fc80 	bl	8002988 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003088:	0023      	movs	r3, r4
 800308a:	2200      	movs	r2, #0
 800308c:	3340      	adds	r3, #64	@ 0x40
 800308e:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003090:	0032      	movs	r2, r6
 8003092:	e7e4      	b.n	800305e <I2C_ITAddrCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003094:	2308      	movs	r3, #8
 8003096:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	3440      	adds	r4, #64	@ 0x40
 800309c:	7023      	strb	r3, [r4, #0]
}
 800309e:	e7e2      	b.n	8003066 <I2C_ITAddrCplt.constprop.0+0x60>

080030a0 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 80030a0:	4770      	bx	lr
	...

080030a4 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <I2C_ITListenCplt+0x64>)
{
 80030a6:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	6303      	str	r3, [r0, #48]	@ 0x30
{
 80030b0:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	2020      	movs	r0, #32
 80030b4:	3241      	adds	r2, #65	@ 0x41
 80030b6:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030ba:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 80030bc:	6363      	str	r3, [r4, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030be:	4211      	tst	r1, r2
 80030c0:	d012      	beq.n	80030e8 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030c8:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80030ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030cc:	3301      	adds	r3, #1
 80030ce:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80030d0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80030d6:	3b01      	subs	r3, #1
 80030d8:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80030da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80030e4:	431a      	orrs	r2, r3
 80030e6:	6462      	str	r2, [r4, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030e8:	0020      	movs	r0, r4
 80030ea:	4908      	ldr	r1, [pc, #32]	@ (800310c <I2C_ITListenCplt+0x68>)
 80030ec:	f7ff fc4c 	bl	8002988 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	2210      	movs	r2, #16
 80030f2:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80030f4:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80030f8:	0023      	movs	r3, r4
 80030fa:	2200      	movs	r2, #0
 80030fc:	3340      	adds	r3, #64	@ 0x40
 80030fe:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003100:	f7ff ffce 	bl	80030a0 <HAL_I2C_ListenCpltCallback>
}
 8003104:	bd10      	pop	{r4, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	00008003 	.word	0x00008003

08003110 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003110:	4770      	bx	lr

08003112 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8003112:	4770      	bx	lr

08003114 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8003114:	4770      	bx	lr

08003116 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003116:	0001      	movs	r1, r0
 8003118:	0002      	movs	r2, r0
{
 800311a:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800311c:	3141      	adds	r1, #65	@ 0x41
 800311e:	780c      	ldrb	r4, [r1, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	3240      	adds	r2, #64	@ 0x40
 8003124:	2c60      	cmp	r4, #96	@ 0x60
 8003126:	d106      	bne.n	8003136 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	3c40      	subs	r4, #64	@ 0x40
 800312a:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800312e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003130:	f7ff fff0 	bl	8003114 <HAL_I2C_AbortCpltCallback>
}
 8003134:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8003136:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003138:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800313a:	f7ff ffea 	bl	8003112 <HAL_I2C_ErrorCallback>
}
 800313e:	e7f9      	b.n	8003134 <I2C_TreatErrorCallback+0x1e>

08003140 <I2C_ITError>:
{
 8003140:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003142:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003144:	2200      	movs	r2, #0
{
 8003146:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003148:	3541      	adds	r5, #65	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314a:	3042      	adds	r0, #66	@ 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800314c:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314e:	7002      	strb	r2, [r0, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003150:	483a      	ldr	r0, [pc, #232]	@ (800323c <I2C_ITError+0xfc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003152:	3b28      	subs	r3, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003154:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003156:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003158:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800315a:	430a      	orrs	r2, r1
 800315c:	6462      	str	r2, [r4, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800315e:	2b02      	cmp	r3, #2
 8003160:	d82b      	bhi.n	80031ba <I2C_ITError+0x7a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003162:	2103      	movs	r1, #3
 8003164:	0020      	movs	r0, r4
 8003166:	f7ff fc0f 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800316a:	2328      	movs	r3, #40	@ 0x28
 800316c:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <I2C_ITError+0x100>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003170:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003172:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8003174:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003176:	2800      	cmp	r0, #0
 8003178:	d040      	beq.n	80031fc <I2C_ITError+0xbc>
 800317a:	001a      	movs	r2, r3
 800317c:	2110      	movs	r1, #16
 800317e:	3a11      	subs	r2, #17
 8003180:	438a      	bics	r2, r1
 8003182:	d13b      	bne.n	80031fc <I2C_ITError+0xbc>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	0452      	lsls	r2, r2, #17
 800318a:	d503      	bpl.n	8003194 <I2C_ITError+0x54>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	492d      	ldr	r1, [pc, #180]	@ (8003244 <I2C_ITError+0x104>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003194:	f7ff fad2 	bl	800273c <HAL_DMA_GetState>
 8003198:	2801      	cmp	r0, #1
 800319a:	d02b      	beq.n	80031f4 <I2C_ITError+0xb4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800319c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800319e:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <I2C_ITError+0x108>)
      __HAL_UNLOCK(hi2c);
 80031a0:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031a2:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 80031a4:	0023      	movs	r3, r4
 80031a6:	3340      	adds	r3, #64	@ 0x40
 80031a8:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031aa:	f7ff fa39 	bl	8002620 <HAL_DMA_Abort_IT>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d023      	beq.n	80031fa <I2C_ITError+0xba>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031b4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80031b6:	4798      	blx	r3
}
 80031b8:	e01f      	b.n	80031fa <I2C_ITError+0xba>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031ba:	0020      	movs	r0, r4
 80031bc:	4923      	ldr	r1, [pc, #140]	@ (800324c <I2C_ITError+0x10c>)
 80031be:	f7ff fbe3 	bl	8002988 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80031c2:	0020      	movs	r0, r4
 80031c4:	f7ff fb7c 	bl	80028c0 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80031c8:	782b      	ldrb	r3, [r5, #0]
 80031ca:	2b60      	cmp	r3, #96	@ 0x60
 80031cc:	d010      	beq.n	80031f0 <I2C_ITError+0xb0>
      hi2c->State         = HAL_I2C_STATE_READY;
 80031ce:	2220      	movs	r2, #32
 80031d0:	702a      	strb	r2, [r5, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	4211      	tst	r1, r2
 80031d8:	d00a      	beq.n	80031f0 <I2C_ITError+0xb0>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	3a10      	subs	r2, #16
 80031de:	4211      	tst	r1, r2
 80031e0:	d004      	beq.n	80031ec <I2C_ITError+0xac>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80031e6:	3a0c      	subs	r2, #12
 80031e8:	430a      	orrs	r2, r1
 80031ea:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	2220      	movs	r2, #32
 80031ee:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e7bd      	b.n	8003170 <I2C_ITError+0x30>
      I2C_TreatErrorCallback(hi2c);
 80031f4:	0020      	movs	r0, r4
 80031f6:	f7ff ff8e 	bl	8003116 <I2C_TreatErrorCallback>
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80031fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031fe:	2800      	cmp	r0, #0
 8003200:	d0f8      	beq.n	80031f4 <I2C_ITError+0xb4>
 8003202:	2210      	movs	r2, #16
 8003204:	3b12      	subs	r3, #18
 8003206:	4393      	bics	r3, r2
 8003208:	d1f4      	bne.n	80031f4 <I2C_ITError+0xb4>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	0412      	lsls	r2, r2, #16
 8003210:	d503      	bpl.n	800321a <I2C_ITError+0xda>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	490e      	ldr	r1, [pc, #56]	@ (8003250 <I2C_ITError+0x110>)
 8003216:	400a      	ands	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800321a:	f7ff fa8f 	bl	800273c <HAL_DMA_GetState>
 800321e:	2801      	cmp	r0, #1
 8003220:	d0e8      	beq.n	80031f4 <I2C_ITError+0xb4>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003222:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003224:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <I2C_ITError+0x108>)
      __HAL_UNLOCK(hi2c);
 8003226:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003228:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 800322a:	0023      	movs	r3, r4
 800322c:	3340      	adds	r3, #64	@ 0x40
 800322e:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003230:	f7ff f9f6 	bl	8002620 <HAL_DMA_Abort_IT>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0e0      	beq.n	80031fa <I2C_ITError+0xba>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003238:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800323a:	e7bb      	b.n	80031b4 <I2C_ITError+0x74>
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	080039e5 	.word	0x080039e5
 8003244:	ffffbfff 	.word	0xffffbfff
 8003248:	08003b01 	.word	0x08003b01
 800324c:	00008003 	.word	0x00008003
 8003250:	ffff7fff 	.word	0xffff7fff

08003254 <I2C_ITMasterCplt>:
{
 8003254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003256:	2320      	movs	r3, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003258:	0005      	movs	r5, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325a:	6806      	ldr	r6, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800325c:	3541      	adds	r5, #65	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	61f3      	str	r3, [r6, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003260:	782b      	ldrb	r3, [r5, #0]
{
 8003262:	0004      	movs	r4, r0
 8003264:	000f      	movs	r7, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003266:	2b21      	cmp	r3, #33	@ 0x21
 8003268:	d12b      	bne.n	80032c2 <I2C_ITMasterCplt+0x6e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800326a:	2101      	movs	r1, #1
 800326c:	f7ff fb8c 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003270:	2311      	movs	r3, #17
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003272:	6323      	str	r3, [r4, #48]	@ 0x30
  I2C_RESET_CR2(hi2c);
 8003274:	6873      	ldr	r3, [r6, #4]
 8003276:	4a2e      	ldr	r2, [pc, #184]	@ (8003330 <I2C_ITMasterCplt+0xdc>)
 8003278:	4013      	ands	r3, r2
 800327a:	6073      	str	r3, [r6, #4]
  hi2c->XferISR       = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003280:	4b2c      	ldr	r3, [pc, #176]	@ (8003334 <I2C_ITMasterCplt+0xe0>)
 8003282:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003284:	2310      	movs	r3, #16
 8003286:	421f      	tst	r7, r3
 8003288:	d004      	beq.n	8003294 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	61f3      	str	r3, [r6, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800328e:	3b0c      	subs	r3, #12
 8003290:	4313      	orrs	r3, r2
 8003292:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003294:	782b      	ldrb	r3, [r5, #0]
 8003296:	2b60      	cmp	r3, #96	@ 0x60
 8003298:	d105      	bne.n	80032a6 <I2C_ITMasterCplt+0x52>
 800329a:	077f      	lsls	r7, r7, #29
 800329c:	d503      	bpl.n	80032a6 <I2C_ITMasterCplt+0x52>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800329e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 80032a4:	9b01      	ldr	r3, [sp, #4]
  I2C_Flush_TXDR(hi2c);
 80032a6:	0020      	movs	r0, r4
 80032a8:	f7ff fb0a 	bl	80028c0 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 80032ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80032ae:	782a      	ldrb	r2, [r5, #0]
 80032b0:	2a60      	cmp	r2, #96	@ 0x60
 80032b2:	d001      	beq.n	80032b8 <I2C_ITMasterCplt+0x64>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00c      	beq.n	80032d2 <I2C_ITMasterCplt+0x7e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032b8:	0020      	movs	r0, r4
 80032ba:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80032bc:	f7ff ff40 	bl	8003140 <I2C_ITError>
}
 80032c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032c2:	782b      	ldrb	r3, [r5, #0]
 80032c4:	2b22      	cmp	r3, #34	@ 0x22
 80032c6:	d1d5      	bne.n	8003274 <I2C_ITMasterCplt+0x20>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032c8:	2102      	movs	r1, #2
 80032ca:	f7ff fb5d 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032ce:	2312      	movs	r3, #18
 80032d0:	e7cf      	b.n	8003272 <I2C_ITMasterCplt+0x1e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032d2:	782a      	ldrb	r2, [r5, #0]
 80032d4:	2a21      	cmp	r2, #33	@ 0x21
 80032d6:	d113      	bne.n	8003300 <I2C_ITMasterCplt+0xac>
    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	3a01      	subs	r2, #1
 80032da:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032dc:	0022      	movs	r2, r4
 80032de:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e0:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032e2:	3242      	adds	r2, #66	@ 0x42
 80032e4:	7810      	ldrb	r0, [r2, #0]
 80032e6:	3140      	adds	r1, #64	@ 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80032ea:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ec:	2840      	cmp	r0, #64	@ 0x40
 80032ee:	d103      	bne.n	80032f8 <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032f0:	0020      	movs	r0, r4
 80032f2:	f7ff ff0d 	bl	8003110 <HAL_I2C_MemTxCpltCallback>
 80032f6:	e7e3      	b.n	80032c0 <I2C_ITMasterCplt+0x6c>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f8:	0020      	movs	r0, r4
 80032fa:	f7ff fe1a 	bl	8002f32 <HAL_I2C_MasterTxCpltCallback>
 80032fe:	e7df      	b.n	80032c0 <I2C_ITMasterCplt+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003300:	782a      	ldrb	r2, [r5, #0]
 8003302:	2a22      	cmp	r2, #34	@ 0x22
 8003304:	d1dc      	bne.n	80032c0 <I2C_ITMasterCplt+0x6c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	3a02      	subs	r2, #2
 8003308:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800330a:	0022      	movs	r2, r4
 800330c:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003310:	3242      	adds	r2, #66	@ 0x42
 8003312:	7810      	ldrb	r0, [r2, #0]
 8003314:	3140      	adds	r1, #64	@ 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003318:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800331a:	2840      	cmp	r0, #64	@ 0x40
 800331c:	d103      	bne.n	8003326 <I2C_ITMasterCplt+0xd2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800331e:	0020      	movs	r0, r4
 8003320:	f7fe fbbe 	bl	8001aa0 <HAL_I2C_MemRxCpltCallback>
 8003324:	e7cc      	b.n	80032c0 <I2C_ITMasterCplt+0x6c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003326:	0020      	movs	r0, r4
 8003328:	f7ff fe04 	bl	8002f34 <HAL_I2C_MasterRxCpltCallback>
}
 800332c:	e7c8      	b.n	80032c0 <I2C_ITMasterCplt+0x6c>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	fe00e800 	.word	0xfe00e800
 8003334:	ffff0000 	.word	0xffff0000

08003338 <I2C_Mem_ISR_DMA>:
{
 8003338:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 800333a:	0005      	movs	r5, r0
 800333c:	3540      	adds	r5, #64	@ 0x40
 800333e:	782b      	ldrb	r3, [r5, #0]
{
 8003340:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8003342:	2002      	movs	r0, #2
 8003344:	2b01      	cmp	r3, #1
 8003346:	d015      	beq.n	8003374 <I2C_Mem_ISR_DMA+0x3c>
 8003348:	2301      	movs	r3, #1
 800334a:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800334c:	330f      	adds	r3, #15
 800334e:	4219      	tst	r1, r3
 8003350:	d011      	beq.n	8003376 <I2C_Mem_ISR_DMA+0x3e>
 8003352:	421a      	tst	r2, r3
 8003354:	d00f      	beq.n	8003376 <I2C_Mem_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003356:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003358:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335a:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800335e:	3b0c      	subs	r3, #12
 8003360:	4313      	orrs	r3, r2
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003362:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003364:	6463      	str	r3, [r4, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003366:	f7ff facf 	bl	8002908 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800336a:	0020      	movs	r0, r4
 800336c:	f7ff faa8 	bl	80028c0 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8003370:	2000      	movs	r0, #0
 8003372:	7028      	strb	r0, [r5, #0]
}
 8003374:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003376:	2302      	movs	r3, #2
 8003378:	4219      	tst	r1, r3
 800337a:	d008      	beq.n	800338e <I2C_Mem_ISR_DMA+0x56>
 800337c:	421a      	tst	r2, r3
 800337e:	d006      	beq.n	800338e <I2C_Mem_ISR_DMA+0x56>
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003384:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003386:	2301      	movs	r3, #1
 8003388:	425b      	negs	r3, r3
 800338a:	6523      	str	r3, [r4, #80]	@ 0x50
 800338c:	e7f0      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800338e:	2640      	movs	r6, #64	@ 0x40
 8003390:	060b      	lsls	r3, r1, #24
 8003392:	d53b      	bpl.n	800340c <I2C_Mem_ISR_DMA+0xd4>
 8003394:	4232      	tst	r2, r6
 8003396:	d039      	beq.n	800340c <I2C_Mem_ISR_DMA+0xd4>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003398:	2101      	movs	r1, #1
 800339a:	0020      	movs	r0, r4
 800339c:	f7ff faf4 	bl	8002988 <I2C_Disable_IRQ>
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033a0:	2110      	movs	r1, #16
 80033a2:	0020      	movs	r0, r4
 80033a4:	f7ff fab0 	bl	8002908 <I2C_Enable_IRQ>
    if (hi2c->XferCount != 0U)
 80033a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d029      	beq.n	8003402 <I2C_Mem_ISR_DMA+0xca>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033b0:	2bff      	cmp	r3, #255	@ 0xff
 80033b2:	d91b      	bls.n	80033ec <I2C_Mem_ISR_DMA+0xb4>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033b4:	2300      	movs	r3, #0
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80033b6:	22ff      	movs	r2, #255	@ 0xff
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033b8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ba:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	b289      	uxth	r1, r1
 80033c2:	045b      	lsls	r3, r3, #17
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033c4:	0020      	movs	r0, r4
 80033c6:	f7ff fa89 	bl	80028dc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80033ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033cc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033d4:	0023      	movs	r3, r4
 80033d6:	3341      	adds	r3, #65	@ 0x41
 80033d8:	781a      	ldrb	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	6819      	ldr	r1, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033de:	2a22      	cmp	r2, #34	@ 0x22
 80033e0:	d147      	bne.n	8003472 <I2C_Mem_ISR_DMA+0x13a>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e7c1      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033ec:	2300      	movs	r3, #0
        hi2c->XferSize = hi2c->XferCount;
 80033ee:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033f0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
        hi2c->XferSize = hi2c->XferCount;
 80033f2:	b292      	uxth	r2, r2
 80033f4:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	b289      	uxth	r1, r1
 80033fe:	049b      	lsls	r3, r3, #18
 8003400:	e7e0      	b.n	80033c4 <I2C_Mem_ISR_DMA+0x8c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003402:	0031      	movs	r1, r6
 8003404:	0020      	movs	r0, r4
 8003406:	f7ff fe9b 	bl	8003140 <I2C_ITError>
 800340a:	e7b1      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800340c:	4231      	tst	r1, r6
 800340e:	d033      	beq.n	8003478 <I2C_Mem_ISR_DMA+0x140>
 8003410:	4232      	tst	r2, r6
 8003412:	d031      	beq.n	8003478 <I2C_Mem_ISR_DMA+0x140>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003414:	0026      	movs	r6, r4
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7ff fab5 	bl	8002988 <I2C_Disable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800341e:	3641      	adds	r6, #65	@ 0x41
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003420:	2110      	movs	r1, #16
 8003422:	0020      	movs	r0, r4
 8003424:	f7ff fa70 	bl	8002908 <I2C_Enable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003428:	7833      	ldrb	r3, [r6, #0]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800342a:	3b22      	subs	r3, #34	@ 0x22
 800342c:	425a      	negs	r2, r3
 800342e:	4153      	adcs	r3, r2
 8003430:	4a17      	ldr	r2, [pc, #92]	@ (8003490 <I2C_Mem_ISR_DMA+0x158>)
 8003432:	029b      	lsls	r3, r3, #10
 8003434:	189b      	adds	r3, r3, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003436:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003438:	2aff      	cmp	r2, #255	@ 0xff
 800343a:	d910      	bls.n	800345e <I2C_Mem_ISR_DMA+0x126>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800343c:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800343e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003440:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	b289      	uxth	r1, r1
 8003448:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800344a:	0020      	movs	r0, r4
 800344c:	f7ff fa46 	bl	80028dc <I2C_TransferConfig>
    hi2c->XferCount -= hi2c->XferSize;
 8003450:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003452:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800345a:	7832      	ldrb	r2, [r6, #0]
 800345c:	e7bd      	b.n	80033da <I2C_Mem_ISR_DMA+0xa2>
      hi2c->XferSize = hi2c->XferCount;
 800345e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003460:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      hi2c->XferSize = hi2c->XferCount;
 8003462:	b292      	uxth	r2, r2
 8003464:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	b289      	uxth	r1, r1
 800346e:	049b      	lsls	r3, r3, #18
 8003470:	e7eb      	b.n	800344a <I2C_Mem_ISR_DMA+0x112>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003472:	2280      	movs	r2, #128	@ 0x80
 8003474:	01d2      	lsls	r2, r2, #7
 8003476:	e7b6      	b.n	80033e6 <I2C_Mem_ISR_DMA+0xae>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003478:	2320      	movs	r3, #32
 800347a:	4219      	tst	r1, r3
 800347c:	d100      	bne.n	8003480 <I2C_Mem_ISR_DMA+0x148>
 800347e:	e777      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
 8003480:	421a      	tst	r2, r3
 8003482:	d100      	bne.n	8003486 <I2C_Mem_ISR_DMA+0x14e>
 8003484:	e774      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003486:	0020      	movs	r0, r4
 8003488:	f7ff fee4 	bl	8003254 <I2C_ITMasterCplt>
 800348c:	e770      	b.n	8003370 <I2C_Mem_ISR_DMA+0x38>
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	80002000 	.word	0x80002000

08003494 <I2C_Master_ISR_DMA>:
{
 8003494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003496:	0006      	movs	r6, r0
 8003498:	3640      	adds	r6, #64	@ 0x40
 800349a:	7833      	ldrb	r3, [r6, #0]
{
 800349c:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 800349e:	2002      	movs	r0, #2
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d015      	beq.n	80034d0 <I2C_Master_ISR_DMA+0x3c>
 80034a4:	2301      	movs	r3, #1
 80034a6:	7033      	strb	r3, [r6, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034a8:	330f      	adds	r3, #15
 80034aa:	4219      	tst	r1, r3
 80034ac:	d011      	beq.n	80034d2 <I2C_Master_ISR_DMA+0x3e>
 80034ae:	421a      	tst	r2, r3
 80034b0:	d00f      	beq.n	80034d2 <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80034b4:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b6:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80034ba:	3b0c      	subs	r3, #12
 80034bc:	4313      	orrs	r3, r2
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80034be:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034c0:	6463      	str	r3, [r4, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80034c2:	f7ff fa21 	bl	8002908 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80034c6:	0020      	movs	r0, r4
 80034c8:	f7ff f9fa 	bl	80028c0 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80034cc:	2000      	movs	r0, #0
 80034ce:	7030      	strb	r0, [r6, #0]
}
 80034d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80034d2:	2340      	movs	r3, #64	@ 0x40
 80034d4:	0608      	lsls	r0, r1, #24
 80034d6:	d541      	bpl.n	800355c <I2C_Master_ISR_DMA+0xc8>
 80034d8:	421a      	tst	r2, r3
 80034da:	d03f      	beq.n	800355c <I2C_Master_ISR_DMA+0xc8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	682a      	ldr	r2, [r5, #0]
 80034e0:	439a      	bics	r2, r3
 80034e2:	602a      	str	r2, [r5, #0]
    if (hi2c->XferCount != 0U)
 80034e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02c      	beq.n	8003544 <I2C_Master_ISR_DMA+0xb0>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80034ea:	6869      	ldr	r1, [r5, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80034ee:	0589      	lsls	r1, r1, #22
 80034f0:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f2:	2bff      	cmp	r3, #255	@ 0xff
 80034f4:	d918      	bls.n	8003528 <I2C_Master_ISR_DMA+0x94>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f6:	23ff      	movs	r3, #255	@ 0xff
 80034f8:	8523      	strh	r3, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034fe:	2000      	movs	r0, #0
 8003500:	8d27      	ldrh	r7, [r4, #40]	@ 0x28
 8003502:	9000      	str	r0, [sp, #0]
 8003504:	b2fa      	uxtb	r2, r7
 8003506:	0020      	movs	r0, r4
 8003508:	f7ff f9e8 	bl	80028dc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800350c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800350e:	1bdb      	subs	r3, r3, r7
 8003510:	b29b      	uxth	r3, r3
 8003512:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003514:	3441      	adds	r4, #65	@ 0x41
 8003516:	7823      	ldrb	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003518:	682a      	ldr	r2, [r5, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800351a:	2b22      	cmp	r3, #34	@ 0x22
 800351c:	d10f      	bne.n	800353e <I2C_Master_ISR_DMA+0xaa>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	021b      	lsls	r3, r3, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003522:	4313      	orrs	r3, r2
 8003524:	602b      	str	r3, [r5, #0]
 8003526:	e7d1      	b.n	80034cc <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8003528:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800352a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800352c:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800352e:	4b1a      	ldr	r3, [pc, #104]	@ (8003598 <I2C_Master_ISR_DMA+0x104>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <I2C_Master_ISR_DMA+0xa4>
          xfermode = hi2c->XferOptions;
 8003534:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003536:	e7e2      	b.n	80034fe <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	049b      	lsls	r3, r3, #18
 800353c:	e7df      	b.n	80034fe <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	01db      	lsls	r3, r3, #7
 8003542:	e7ee      	b.n	8003522 <I2C_Master_ISR_DMA+0x8e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003544:	686b      	ldr	r3, [r5, #4]
 8003546:	019b      	lsls	r3, r3, #6
 8003548:	d403      	bmi.n	8003552 <I2C_Master_ISR_DMA+0xbe>
        I2C_ITMasterSeqCplt(hi2c);
 800354a:	0020      	movs	r0, r4
 800354c:	f7ff fcf3 	bl	8002f36 <I2C_ITMasterSeqCplt>
 8003550:	e7bc      	b.n	80034cc <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003552:	2140      	movs	r1, #64	@ 0x40
 8003554:	0020      	movs	r0, r4
 8003556:	f7ff fdf3 	bl	8003140 <I2C_ITError>
 800355a:	e7b7      	b.n	80034cc <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800355c:	4219      	tst	r1, r3
 800355e:	d012      	beq.n	8003586 <I2C_Master_ISR_DMA+0xf2>
 8003560:	421a      	tst	r2, r3
 8003562:	d010      	beq.n	8003586 <I2C_Master_ISR_DMA+0xf2>
    if (hi2c->XferCount == 0U)
 8003564:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f3      	bne.n	8003552 <I2C_Master_ISR_DMA+0xbe>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6853      	ldr	r3, [r2, #4]
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	d4ac      	bmi.n	80034cc <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003572:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <I2C_Master_ISR_DMA+0x104>)
 8003576:	4299      	cmp	r1, r3
 8003578:	d1e7      	bne.n	800354a <I2C_Master_ISR_DMA+0xb6>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	6851      	ldr	r1, [r2, #4]
 800357e:	01db      	lsls	r3, r3, #7
 8003580:	430b      	orrs	r3, r1
 8003582:	6053      	str	r3, [r2, #4]
 8003584:	e7a2      	b.n	80034cc <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003586:	2320      	movs	r3, #32
 8003588:	4219      	tst	r1, r3
 800358a:	d09f      	beq.n	80034cc <I2C_Master_ISR_DMA+0x38>
 800358c:	421a      	tst	r2, r3
 800358e:	d09d      	beq.n	80034cc <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003590:	0020      	movs	r0, r4
 8003592:	f7ff fe5f 	bl	8003254 <I2C_ITMasterCplt>
 8003596:	e799      	b.n	80034cc <I2C_Master_ISR_DMA+0x38>
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_Mem_ISR_IT>:
{
 800359c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800359e:	0007      	movs	r7, r0
 80035a0:	3740      	adds	r7, #64	@ 0x40
 80035a2:	783b      	ldrb	r3, [r7, #0]
{
 80035a4:	0004      	movs	r4, r0
 80035a6:	000d      	movs	r5, r1
 80035a8:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80035aa:	2002      	movs	r0, #2
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d01a      	beq.n	80035e6 <I2C_Mem_ISR_IT+0x4a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	703b      	strb	r3, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035b4:	330f      	adds	r3, #15
 80035b6:	4219      	tst	r1, r3
 80035b8:	d016      	beq.n	80035e8 <I2C_Mem_ISR_IT+0x4c>
 80035ba:	421a      	tst	r2, r3
 80035bc:	d014      	beq.n	80035e8 <I2C_Mem_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	6822      	ldr	r2, [r4, #0]
    I2C_Flush_TXDR(hi2c);
 80035c0:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c2:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80035c6:	3b0c      	subs	r3, #12
 80035c8:	4313      	orrs	r3, r2
 80035ca:	6463      	str	r3, [r4, #68]	@ 0x44
    I2C_Flush_TXDR(hi2c);
 80035cc:	f7ff f978 	bl	80028c0 <I2C_Flush_TXDR>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035d0:	2320      	movs	r3, #32
 80035d2:	421d      	tst	r5, r3
 80035d4:	d005      	beq.n	80035e2 <I2C_Mem_ISR_IT+0x46>
 80035d6:	421e      	tst	r6, r3
 80035d8:	d003      	beq.n	80035e2 <I2C_Mem_ISR_IT+0x46>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80035da:	0029      	movs	r1, r5
 80035dc:	0020      	movs	r0, r4
 80035de:	f7ff fe39 	bl	8003254 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 80035e2:	2000      	movs	r0, #0
 80035e4:	7038      	strb	r0, [r7, #0]
}
 80035e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035e8:	2304      	movs	r3, #4
 80035ea:	421d      	tst	r5, r3
 80035ec:	d011      	beq.n	8003612 <I2C_Mem_ISR_IT+0x76>
 80035ee:	421e      	tst	r6, r3
 80035f0:	d00f      	beq.n	8003612 <I2C_Mem_ISR_IT+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035f2:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->pBuffPtr++;
 80035fe:	3301      	adds	r3, #1
 8003600:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003602:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003608:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800360a:	3b01      	subs	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003610:	e7de      	b.n	80035d0 <I2C_Mem_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003612:	2302      	movs	r3, #2
 8003614:	421d      	tst	r5, r3
 8003616:	d00f      	beq.n	8003638 <I2C_Mem_ISR_IT+0x9c>
 8003618:	421e      	tst	r6, r3
 800361a:	d00d      	beq.n	8003638 <I2C_Mem_ISR_IT+0x9c>
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800361c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	6822      	ldr	r2, [r4, #0]
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003620:	3301      	adds	r3, #1
 8003622:	d103      	bne.n	800362c <I2C_Mem_ISR_IT+0x90>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003624:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003626:	7819      	ldrb	r1, [r3, #0]
 8003628:	6291      	str	r1, [r2, #40]	@ 0x28
 800362a:	e7e8      	b.n	80035fe <I2C_Mem_ISR_IT+0x62>
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800362c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800362e:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003630:	2301      	movs	r3, #1
 8003632:	425b      	negs	r3, r3
 8003634:	6523      	str	r3, [r4, #80]	@ 0x50
 8003636:	e7cb      	b.n	80035d0 <I2C_Mem_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003638:	2340      	movs	r3, #64	@ 0x40
 800363a:	062a      	lsls	r2, r5, #24
 800363c:	d51a      	bpl.n	8003674 <I2C_Mem_ISR_IT+0xd8>
 800363e:	421e      	tst	r6, r3
 8003640:	d018      	beq.n	8003674 <I2C_Mem_ISR_IT+0xd8>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003642:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <I2C_Mem_ISR_IT+0xce>
 8003648:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <I2C_Mem_ISR_IT+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800364e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003650:	2aff      	cmp	r2, #255	@ 0xff
 8003652:	d925      	bls.n	80036a0 <I2C_Mem_ISR_IT+0x104>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003654:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003656:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003658:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	b289      	uxth	r1, r1
 8003660:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003662:	0020      	movs	r0, r4
 8003664:	f7ff f93a 	bl	80028dc <I2C_TransferConfig>
 8003668:	e7b2      	b.n	80035d0 <I2C_Mem_ISR_IT+0x34>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	0020      	movs	r0, r4
 800366e:	f7ff fd67 	bl	8003140 <I2C_ITError>
 8003672:	e7ad      	b.n	80035d0 <I2C_Mem_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003674:	421d      	tst	r5, r3
 8003676:	d0ab      	beq.n	80035d0 <I2C_Mem_ISR_IT+0x34>
 8003678:	421e      	tst	r6, r3
 800367a:	d0a9      	beq.n	80035d0 <I2C_Mem_ISR_IT+0x34>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800367c:	2101      	movs	r1, #1
 800367e:	0020      	movs	r0, r4
 8003680:	f7ff f982 	bl	8002988 <I2C_Disable_IRQ>
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003684:	2102      	movs	r1, #2
 8003686:	0020      	movs	r0, r4
 8003688:	f7ff f93e 	bl	8002908 <I2C_Enable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800368c:	0023      	movs	r3, r4
 800368e:	3341      	adds	r3, #65	@ 0x41
 8003690:	781b      	ldrb	r3, [r3, #0]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003692:	3b22      	subs	r3, #34	@ 0x22
 8003694:	425a      	negs	r2, r3
 8003696:	4153      	adcs	r3, r2
 8003698:	4a06      	ldr	r2, [pc, #24]	@ (80036b4 <I2C_Mem_ISR_IT+0x118>)
 800369a:	029b      	lsls	r3, r3, #10
 800369c:	189b      	adds	r3, r3, r2
 800369e:	e7d6      	b.n	800364e <I2C_Mem_ISR_IT+0xb2>
      hi2c->XferSize = hi2c->XferCount;
 80036a0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036a2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      hi2c->XferSize = hi2c->XferCount;
 80036a4:	b292      	uxth	r2, r2
 80036a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	b289      	uxth	r1, r1
 80036b0:	049b      	lsls	r3, r3, #18
 80036b2:	e7d6      	b.n	8003662 <I2C_Mem_ISR_IT+0xc6>
 80036b4:	80002000 	.word	0x80002000

080036b8 <HAL_I2C_ER_IRQHandler>:
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036ba:	2580      	movs	r5, #128	@ 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80036bc:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036be:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80036c0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80036c2:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036c4:	4229      	tst	r1, r5
 80036c6:	d006      	beq.n	80036d6 <HAL_I2C_ER_IRQHandler+0x1e>
 80036c8:	0614      	lsls	r4, r2, #24
 80036ca:	d504      	bpl.n	80036d6 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80036cc:	2401      	movs	r4, #1
 80036ce:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80036d0:	4334      	orrs	r4, r6
 80036d2:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036d4:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036d6:	2580      	movs	r5, #128	@ 0x80
 80036d8:	00ed      	lsls	r5, r5, #3
 80036da:	4229      	tst	r1, r5
 80036dc:	d006      	beq.n	80036ec <HAL_I2C_ER_IRQHandler+0x34>
 80036de:	0614      	lsls	r4, r2, #24
 80036e0:	d504      	bpl.n	80036ec <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80036e2:	2408      	movs	r4, #8
 80036e4:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80036e6:	4334      	orrs	r4, r6
 80036e8:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ea:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036ec:	2480      	movs	r4, #128	@ 0x80
 80036ee:	00a4      	lsls	r4, r4, #2
 80036f0:	4221      	tst	r1, r4
 80036f2:	d006      	beq.n	8003702 <HAL_I2C_ER_IRQHandler+0x4a>
 80036f4:	0612      	lsls	r2, r2, #24
 80036f6:	d504      	bpl.n	8003702 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80036f8:	2202      	movs	r2, #2
 80036fa:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80036fc:	430a      	orrs	r2, r1
 80036fe:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003700:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003702:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8003704:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003706:	4219      	tst	r1, r3
 8003708:	d001      	beq.n	800370e <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 800370a:	f7ff fd19 	bl	8003140 <I2C_ITError>
}
 800370e:	bd70      	pop	{r4, r5, r6, pc}

08003710 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003712:	6805      	ldr	r5, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003714:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003716:	682b      	ldr	r3, [r5, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003718:	3641      	adds	r6, #65	@ 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800371a:	9300      	str	r3, [sp, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 800371c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800371e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003720:	9301      	str	r3, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	2320      	movs	r3, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003724:	7830      	ldrb	r0, [r6, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003726:	000f      	movs	r7, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003728:	3821      	subs	r0, #33	@ 0x21
 800372a:	61eb      	str	r3, [r5, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800372c:	2809      	cmp	r0, #9
 800372e:	d80c      	bhi.n	800374a <I2C_ITSlaveCplt.constprop.0+0x3a>
 8003730:	f7fc fce6 	bl	8000100 <__gnu_thumb1_case_uqi>
 8003734:	0b0b6805 	.word	0x0b0b6805
 8003738:	6e0b0b0b 	.word	0x6e0b0b0b
 800373c:	6805      	.short	0x6805
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800373e:	0020      	movs	r0, r4
 8003740:	495d      	ldr	r1, [pc, #372]	@ (80038b8 <I2C_ITSlaveCplt.constprop.0+0x1a8>)
 8003742:	f7ff f921 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003746:	2321      	movs	r3, #33	@ 0x21
    hi2c->PreviousState = I2C_STATE_NONE;
 8003748:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	686b      	ldr	r3, [r5, #4]
 800374e:	0212      	lsls	r2, r2, #8
 8003750:	4313      	orrs	r3, r2
 8003752:	606b      	str	r3, [r5, #4]
  I2C_RESET_CR2(hi2c);
 8003754:	686b      	ldr	r3, [r5, #4]
 8003756:	4a59      	ldr	r2, [pc, #356]	@ (80038bc <I2C_ITSlaveCplt.constprop.0+0x1ac>)
  I2C_Flush_TXDR(hi2c);
 8003758:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 800375a:	4013      	ands	r3, r2
 800375c:	606b      	str	r3, [r5, #4]
  I2C_Flush_TXDR(hi2c);
 800375e:	f7ff f8af 	bl	80028c0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003762:	9b00      	ldr	r3, [sp, #0]
 8003764:	045b      	lsls	r3, r3, #17
 8003766:	d559      	bpl.n	800381c <I2C_ITSlaveCplt.constprop.0+0x10c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	4a55      	ldr	r2, [pc, #340]	@ (80038c0 <I2C_ITSlaveCplt.constprop.0+0x1b0>)
 800376c:	4013      	ands	r3, r2
 800376e:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmatx != NULL)
 8003770:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if (hi2c->hdmarx != NULL)
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <I2C_ITSlaveCplt.constprop.0+0x6e>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	b29b      	uxth	r3, r3
 800377c:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800377e:	2304      	movs	r3, #4
 8003780:	421f      	tst	r7, r3
 8003782:	d00f      	beq.n	80037a4 <I2C_ITSlaveCplt.constprop.0+0x94>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003784:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003786:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003788:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800378a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800378e:	3301      	adds	r3, #1
 8003790:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8003792:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <I2C_ITSlaveCplt.constprop.0+0x94>
      hi2c->XferSize--;
 8003798:	3b01      	subs	r3, #1
 800379a:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800379c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 80037a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <I2C_ITSlaveCplt.constprop.0+0xa2>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037aa:	2304      	movs	r3, #4
 80037ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80037ae:	4313      	orrs	r3, r2
 80037b0:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037b2:	2310      	movs	r3, #16
 80037b4:	421f      	tst	r7, r3
 80037b6:	d011      	beq.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
 80037b8:	9a00      	ldr	r2, [sp, #0]
 80037ba:	421a      	tst	r2, r3
 80037bc:	d00e      	beq.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
    if (hi2c->XferCount == 0U)
 80037be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	d149      	bne.n	8003858 <I2C_ITSlaveCplt.constprop.0+0x148>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037c4:	7833      	ldrb	r3, [r6, #0]
 80037c6:	2b28      	cmp	r3, #40	@ 0x28
 80037c8:	d133      	bne.n	8003832 <I2C_ITSlaveCplt.constprop.0+0x122>
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	9a01      	ldr	r2, [sp, #4]
 80037ce:	049b      	lsls	r3, r3, #18
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d12e      	bne.n	8003832 <I2C_ITSlaveCplt.constprop.0+0x122>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037d4:	0039      	movs	r1, r7
 80037d6:	0020      	movs	r0, r4
 80037d8:	f7ff fc64 	bl	80030a4 <I2C_ITListenCplt>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	0023      	movs	r3, r4
 80037de:	2200      	movs	r2, #0
 80037e0:	3342      	adds	r3, #66	@ 0x42
 80037e2:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037e4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  hi2c->XferISR = NULL;
 80037e6:	6362      	str	r2, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037e8:	4295      	cmp	r5, r2
 80037ea:	d044      	beq.n	8003876 <I2C_ITSlaveCplt.constprop.0+0x166>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037ec:	0020      	movs	r0, r4
 80037ee:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80037f0:	f7ff fca6 	bl	8003140 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037f4:	7833      	ldrb	r3, [r6, #0]
 80037f6:	2b28      	cmp	r3, #40	@ 0x28
 80037f8:	d103      	bne.n	8003802 <I2C_ITSlaveCplt.constprop.0+0xf2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80037fa:	0039      	movs	r1, r7
 80037fc:	0020      	movs	r0, r4
 80037fe:	f7ff fc51 	bl	80030a4 <I2C_ITListenCplt>
}
 8003802:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003804:	0020      	movs	r0, r4
 8003806:	492f      	ldr	r1, [pc, #188]	@ (80038c4 <I2C_ITSlaveCplt.constprop.0+0x1b4>)
 8003808:	f7ff f8be 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800380c:	2322      	movs	r3, #34	@ 0x22
 800380e:	e79b      	b.n	8003748 <I2C_ITSlaveCplt.constprop.0+0x38>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003810:	0020      	movs	r0, r4
 8003812:	492d      	ldr	r1, [pc, #180]	@ (80038c8 <I2C_ITSlaveCplt.constprop.0+0x1b8>)
 8003814:	f7ff f8b8 	bl	8002988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	e795      	b.n	8003748 <I2C_ITSlaveCplt.constprop.0+0x38>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	9b00      	ldr	r3, [sp, #0]
 8003820:	0212      	lsls	r2, r2, #8
 8003822:	4213      	tst	r3, r2
 8003824:	d0ab      	beq.n	800377e <I2C_ITSlaveCplt.constprop.0+0x6e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	4a28      	ldr	r2, [pc, #160]	@ (80038cc <I2C_ITSlaveCplt.constprop.0+0x1bc>)
 800382a:	4013      	ands	r3, r2
 800382c:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmarx != NULL)
 800382e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003830:	e79f      	b.n	8003772 <I2C_ITSlaveCplt.constprop.0+0x62>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003832:	7831      	ldrb	r1, [r6, #0]
 8003834:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003836:	6823      	ldr	r3, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003838:	2929      	cmp	r1, #41	@ 0x29
 800383a:	d10b      	bne.n	8003854 <I2C_ITSlaveCplt.constprop.0+0x144>
 800383c:	4924      	ldr	r1, [pc, #144]	@ (80038d0 <I2C_ITSlaveCplt.constprop.0+0x1c0>)
 800383e:	9801      	ldr	r0, [sp, #4]
 8003840:	4288      	cmp	r0, r1
 8003842:	d007      	beq.n	8003854 <I2C_ITSlaveCplt.constprop.0+0x144>
        I2C_Flush_TXDR(hi2c);
 8003844:	0020      	movs	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8003848:	f7ff f83a 	bl	80028c0 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800384c:	0020      	movs	r0, r4
 800384e:	f7ff fb99 	bl	8002f84 <I2C_ITSlaveSeqCplt>
 8003852:	e7c3      	b.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	61da      	str	r2, [r3, #28]
 8003856:	e7c1      	b.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800385c:	2304      	movs	r3, #4
 800385e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003860:	4313      	orrs	r3, r2
 8003862:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003864:	9a01      	ldr	r2, [sp, #4]
 8003866:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <I2C_ITSlaveCplt.constprop.0+0x1c4>)
 8003868:	421a      	tst	r2, r3
 800386a:	d1b7      	bne.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800386c:	0020      	movs	r0, r4
 800386e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003870:	f7ff fc66 	bl	8003140 <I2C_ITError>
 8003874:	e7b2      	b.n	80037dc <I2C_ITSlaveCplt.constprop.0+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003876:	0027      	movs	r7, r4
 8003878:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800387a:	4a15      	ldr	r2, [pc, #84]	@ (80038d0 <I2C_ITSlaveCplt.constprop.0+0x1c0>)
 800387c:	3740      	adds	r7, #64	@ 0x40
 800387e:	4293      	cmp	r3, r2
 8003880:	d00c      	beq.n	800389c <I2C_ITSlaveCplt.constprop.0+0x18c>
    I2C_ITSlaveSeqCplt(hi2c);
 8003882:	0020      	movs	r0, r4
 8003884:	f7ff fb7e 	bl	8002f84 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388a:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <I2C_ITSlaveCplt.constprop.0+0x1c0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800388c:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003892:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003894:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003896:	f7ff fc03 	bl	80030a0 <HAL_I2C_ListenCpltCallback>
 800389a:	e7b2      	b.n	8003802 <I2C_ITSlaveCplt.constprop.0+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800389c:	2320      	movs	r3, #32
 800389e:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a0:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80038a6:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a8:	2a22      	cmp	r2, #34	@ 0x22
 80038aa:	d102      	bne.n	80038b2 <I2C_ITSlaveCplt.constprop.0+0x1a2>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ac:	f7ff fb68 	bl	8002f80 <HAL_I2C_SlaveRxCpltCallback>
 80038b0:	e7a7      	b.n	8003802 <I2C_ITSlaveCplt.constprop.0+0xf2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038b2:	f7ff fb64 	bl	8002f7e <HAL_I2C_SlaveTxCpltCallback>
}
 80038b6:	e7a4      	b.n	8003802 <I2C_ITSlaveCplt.constprop.0+0xf2>
 80038b8:	00008001 	.word	0x00008001
 80038bc:	fe00e800 	.word	0xfe00e800
 80038c0:	ffffbfff 	.word	0xffffbfff
 80038c4:	00008002 	.word	0x00008002
 80038c8:	00008003 	.word	0x00008003
 80038cc:	ffff7fff 	.word	0xffff7fff
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	feffffff 	.word	0xfeffffff

080038d8 <I2C_Slave_ISR_DMA>:
{
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80038da:	0005      	movs	r5, r0
 80038dc:	3540      	adds	r5, #64	@ 0x40
 80038de:	782e      	ldrb	r6, [r5, #0]
{
 80038e0:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80038e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 80038e4:	2002      	movs	r0, #2
 80038e6:	2e01      	cmp	r6, #1
 80038e8:	d00b      	beq.n	8003902 <I2C_Slave_ISR_DMA+0x2a>
 80038ea:	3801      	subs	r0, #1
 80038ec:	7028      	strb	r0, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038ee:	301f      	adds	r0, #31
 80038f0:	4201      	tst	r1, r0
 80038f2:	d007      	beq.n	8003904 <I2C_Slave_ISR_DMA+0x2c>
 80038f4:	4202      	tst	r2, r0
 80038f6:	d005      	beq.n	8003904 <I2C_Slave_ISR_DMA+0x2c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80038f8:	0020      	movs	r0, r4
 80038fa:	f7ff ff09 	bl	8003710 <I2C_ITSlaveCplt.constprop.0>
  __HAL_UNLOCK(hi2c);
 80038fe:	2000      	movs	r0, #0
 8003900:	7028      	strb	r0, [r5, #0]
}
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003904:	2610      	movs	r6, #16
 8003906:	4231      	tst	r1, r6
 8003908:	d05e      	beq.n	80039c8 <I2C_Slave_ISR_DMA+0xf0>
 800390a:	4232      	tst	r2, r6
 800390c:	d05c      	beq.n	80039c8 <I2C_Slave_ISR_DMA+0xf0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800390e:	2780      	movs	r7, #128	@ 0x80
 8003910:	0450      	lsls	r0, r2, #17
 8003912:	023f      	lsls	r7, r7, #8
 8003914:	0fc0      	lsrs	r0, r0, #31
 8003916:	403a      	ands	r2, r7
 8003918:	0007      	movs	r7, r0
 800391a:	4317      	orrs	r7, r2
 800391c:	d051      	beq.n	80039c2 <I2C_Slave_ISR_DMA+0xea>
      if (hi2c->hdmarx != NULL)
 800391e:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8003920:	2e00      	cmp	r6, #0
 8003922:	d01d      	beq.n	8003960 <I2C_Slave_ISR_DMA+0x88>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003924:	2a00      	cmp	r2, #0
 8003926:	d003      	beq.n	8003930 <I2C_Slave_ISR_DMA+0x58>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003928:	6832      	ldr	r2, [r6, #0]
 800392a:	6852      	ldr	r2, [r2, #4]
 800392c:	4256      	negs	r6, r2
 800392e:	4172      	adcs	r2, r6
      if (hi2c->hdmatx != NULL)
 8003930:	0026      	movs	r6, r4
 8003932:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8003934:	3641      	adds	r6, #65	@ 0x41
 8003936:	2f00      	cmp	r7, #0
 8003938:	d005      	beq.n	8003946 <I2C_Slave_ISR_DMA+0x6e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800393a:	2800      	cmp	r0, #0
 800393c:	d003      	beq.n	8003946 <I2C_Slave_ISR_DMA+0x6e>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800393e:	6838      	ldr	r0, [r7, #0]
 8003940:	6840      	ldr	r0, [r0, #4]
 8003942:	2800      	cmp	r0, #0
 8003944:	d001      	beq.n	800394a <I2C_Slave_ISR_DMA+0x72>
      if (treatdmanack == 1U)
 8003946:	2a01      	cmp	r2, #1
 8003948:	d11c      	bne.n	8003984 <I2C_Slave_ISR_DMA+0xac>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800394a:	7832      	ldrb	r2, [r6, #0]
 800394c:	2a28      	cmp	r2, #40	@ 0x28
 800394e:	d109      	bne.n	8003964 <I2C_Slave_ISR_DMA+0x8c>
 8003950:	2280      	movs	r2, #128	@ 0x80
 8003952:	0492      	lsls	r2, r2, #18
 8003954:	4293      	cmp	r3, r2
 8003956:	d105      	bne.n	8003964 <I2C_Slave_ISR_DMA+0x8c>
          I2C_ITListenCplt(hi2c, ITFlags);
 8003958:	0020      	movs	r0, r4
 800395a:	f7ff fba3 	bl	80030a4 <I2C_ITListenCplt>
 800395e:	e7ce      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
  uint32_t treatdmanack = 0U;
 8003960:	0032      	movs	r2, r6
 8003962:	e7e5      	b.n	8003930 <I2C_Slave_ISR_DMA+0x58>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003964:	2110      	movs	r1, #16
 8003966:	7830      	ldrb	r0, [r6, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	6822      	ldr	r2, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	61d1      	str	r1, [r2, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800396c:	2829      	cmp	r0, #41	@ 0x29
 800396e:	d1c6      	bne.n	80038fe <I2C_Slave_ISR_DMA+0x26>
 8003970:	481a      	ldr	r0, [pc, #104]	@ (80039dc <I2C_Slave_ISR_DMA+0x104>)
 8003972:	4283      	cmp	r3, r0
 8003974:	d0c3      	beq.n	80038fe <I2C_Slave_ISR_DMA+0x26>
          I2C_Flush_TXDR(hi2c);
 8003976:	0020      	movs	r0, r4
 8003978:	f7fe ffa2 	bl	80028c0 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800397c:	0020      	movs	r0, r4
 800397e:	f7ff fb01 	bl	8002f84 <I2C_ITSlaveSeqCplt>
 8003982:	e7bc      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	2110      	movs	r1, #16
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	61d1      	str	r1, [r2, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800398a:	2204      	movs	r2, #4
 800398c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800398e:	430a      	orrs	r2, r1
 8003990:	6462      	str	r2, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 8003992:	7830      	ldrb	r0, [r6, #0]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003994:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <I2C_Slave_ISR_DMA+0x108>)
        tmpstate = hi2c->State;
 8003996:	b2c0      	uxtb	r0, r0
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003998:	4213      	tst	r3, r2
 800399a:	d1b0      	bne.n	80038fe <I2C_Slave_ISR_DMA+0x26>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800399c:	3821      	subs	r0, #33	@ 0x21
 800399e:	2809      	cmp	r0, #9
 80039a0:	d808      	bhi.n	80039b4 <I2C_Slave_ISR_DMA+0xdc>
 80039a2:	f7fc fbad 	bl	8000100 <__gnu_thumb1_case_uqi>
 80039a6:	0c05      	.short	0x0c05
 80039a8:	07070707 	.word	0x07070707
 80039ac:	0c050707 	.word	0x0c050707
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039b0:	2321      	movs	r3, #33	@ 0x21
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039b2:	6323      	str	r3, [r4, #48]	@ 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039b4:	0020      	movs	r0, r4
 80039b6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80039b8:	f7ff fbc2 	bl	8003140 <I2C_ITError>
 80039bc:	e79f      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039be:	2322      	movs	r3, #34	@ 0x22
 80039c0:	e7f7      	b.n	80039b2 <I2C_Slave_ISR_DMA+0xda>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	61de      	str	r6, [r3, #28]
 80039c6:	e79a      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039c8:	2308      	movs	r3, #8
 80039ca:	4219      	tst	r1, r3
 80039cc:	d097      	beq.n	80038fe <I2C_Slave_ISR_DMA+0x26>
 80039ce:	421a      	tst	r2, r3
 80039d0:	d100      	bne.n	80039d4 <I2C_Slave_ISR_DMA+0xfc>
 80039d2:	e794      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7ff fb16 	bl	8003006 <I2C_ITAddrCplt.constprop.0>
 80039da:	e790      	b.n	80038fe <I2C_Slave_ISR_DMA+0x26>
 80039dc:	ffff0000 	.word	0xffff0000
 80039e0:	feffffff 	.word	0xfeffffff

080039e4 <I2C_Slave_ISR_IT>:
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 80039e6:	0005      	movs	r5, r0
 80039e8:	3540      	adds	r5, #64	@ 0x40
 80039ea:	782e      	ldrb	r6, [r5, #0]
{
 80039ec:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80039ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 80039f0:	2002      	movs	r0, #2
 80039f2:	2e01      	cmp	r6, #1
 80039f4:	d00b      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x2a>
 80039f6:	3801      	subs	r0, #1
 80039f8:	7028      	strb	r0, [r5, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039fa:	301f      	adds	r0, #31
 80039fc:	4201      	tst	r1, r0
 80039fe:	d007      	beq.n	8003a10 <I2C_Slave_ISR_IT+0x2c>
 8003a00:	4202      	tst	r2, r0
 8003a02:	d005      	beq.n	8003a10 <I2C_Slave_ISR_IT+0x2c>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a04:	0020      	movs	r0, r4
 8003a06:	f7ff fe83 	bl	8003710 <I2C_ITSlaveCplt.constprop.0>
  __HAL_UNLOCK(hi2c);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	7028      	strb	r0, [r5, #0]
}
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a10:	2010      	movs	r0, #16
 8003a12:	4201      	tst	r1, r0
 8003a14:	d02f      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x92>
 8003a16:	4202      	tst	r2, r0
 8003a18:	d02d      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x92>
    if (hi2c->XferCount == 0U)
 8003a1a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d11c      	bne.n	8003a5a <I2C_Slave_ISR_IT+0x76>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a20:	0022      	movs	r2, r4
 8003a22:	3241      	adds	r2, #65	@ 0x41
 8003a24:	7810      	ldrb	r0, [r2, #0]
 8003a26:	2828      	cmp	r0, #40	@ 0x28
 8003a28:	d107      	bne.n	8003a3a <I2C_Slave_ISR_IT+0x56>
 8003a2a:	2080      	movs	r0, #128	@ 0x80
 8003a2c:	0480      	lsls	r0, r0, #18
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	d103      	bne.n	8003a3a <I2C_Slave_ISR_IT+0x56>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7ff fb36 	bl	80030a4 <I2C_ITListenCplt>
 8003a38:	e7e7      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	7810      	ldrb	r0, [r2, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a42:	2829      	cmp	r0, #41	@ 0x29
 8003a44:	d1e1      	bne.n	8003a0a <I2C_Slave_ISR_IT+0x26>
 8003a46:	482c      	ldr	r0, [pc, #176]	@ (8003af8 <I2C_Slave_ISR_IT+0x114>)
 8003a48:	4283      	cmp	r3, r0
 8003a4a:	d0de      	beq.n	8003a0a <I2C_Slave_ISR_IT+0x26>
        I2C_Flush_TXDR(hi2c);
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f7fe ff37 	bl	80028c0 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 8003a52:	0020      	movs	r0, r4
 8003a54:	f7ff fa96 	bl	8002f84 <I2C_ITSlaveSeqCplt>
 8003a58:	e7d7      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	61d0      	str	r0, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a5e:	2204      	movs	r2, #4
 8003a60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a62:	430a      	orrs	r2, r1
 8003a64:	6462      	str	r2, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a66:	4a25      	ldr	r2, [pc, #148]	@ (8003afc <I2C_Slave_ISR_IT+0x118>)
 8003a68:	4213      	tst	r3, r2
 8003a6a:	d1ce      	bne.n	8003a0a <I2C_Slave_ISR_IT+0x26>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a70:	f7ff fb66 	bl	8003140 <I2C_ITError>
 8003a74:	e7c9      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a76:	2004      	movs	r0, #4
 8003a78:	4201      	tst	r1, r0
 8003a7a:	d019      	beq.n	8003ab0 <I2C_Slave_ISR_IT+0xcc>
 8003a7c:	4202      	tst	r2, r0
 8003a7e:	d017      	beq.n	8003ab0 <I2C_Slave_ISR_IT+0xcc>
    if (hi2c->XferCount > 0U)
 8003a80:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_Slave_ISR_IT+0xbe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8003a8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a8c:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8003a8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a90:	3201      	adds	r2, #1
 8003a92:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003a94:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8003a96:	3a01      	subs	r2, #1
 8003a98:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003a9a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003aa2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d1b0      	bne.n	8003a0a <I2C_Slave_ISR_IT+0x26>
 8003aa8:	4a13      	ldr	r2, [pc, #76]	@ (8003af8 <I2C_Slave_ISR_IT+0x114>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d0ad      	beq.n	8003a0a <I2C_Slave_ISR_IT+0x26>
 8003aae:	e7d0      	b.n	8003a52 <I2C_Slave_ISR_IT+0x6e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ab0:	2008      	movs	r0, #8
 8003ab2:	4201      	tst	r1, r0
 8003ab4:	d005      	beq.n	8003ac2 <I2C_Slave_ISR_IT+0xde>
 8003ab6:	4202      	tst	r2, r0
 8003ab8:	d003      	beq.n	8003ac2 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003aba:	0020      	movs	r0, r4
 8003abc:	f7ff faa3 	bl	8003006 <I2C_ITAddrCplt.constprop.0>
 8003ac0:	e7a3      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	4201      	tst	r1, r0
 8003ac6:	d0a0      	beq.n	8003a0a <I2C_Slave_ISR_IT+0x26>
 8003ac8:	4202      	tst	r2, r0
 8003aca:	d09e      	beq.n	8003a0a <I2C_Slave_ISR_IT+0x26>
    if (hi2c->XferCount > 0U)
 8003acc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d00d      	beq.n	8003aee <I2C_Slave_ISR_IT+0x10a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003ad8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ada:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003adc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003ade:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ae6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003aec:	e78d      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003aee:	4a03      	ldr	r2, [pc, #12]	@ (8003afc <I2C_Slave_ISR_IT+0x118>)
 8003af0:	4213      	tst	r3, r2
 8003af2:	d000      	beq.n	8003af6 <I2C_Slave_ISR_IT+0x112>
 8003af4:	e789      	b.n	8003a0a <I2C_Slave_ISR_IT+0x26>
 8003af6:	e7ac      	b.n	8003a52 <I2C_Slave_ISR_IT+0x6e>
 8003af8:	ffff0000 	.word	0xffff0000
 8003afc:	feffffff 	.word	0xfeffffff

08003b00 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b00:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003b02:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8003b04:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hi2c->hdmarx != NULL)
 8003b0e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b14:	2200      	movs	r2, #0
 8003b16:	639a      	str	r2, [r3, #56]	@ 0x38
  I2C_TreatErrorCallback(hi2c);
 8003b18:	f7ff fafd 	bl	8003116 <I2C_TreatErrorCallback>
}
 8003b1c:	bd10      	pop	{r4, pc}
	...

08003b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	0004      	movs	r4, r0
 8003b24:	3441      	adds	r4, #65	@ 0x41
 8003b26:	7822      	ldrb	r2, [r4, #0]
{
 8003b28:	0003      	movs	r3, r0
 8003b2a:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2e:	b2d6      	uxtb	r6, r2
 8003b30:	2a20      	cmp	r2, #32
 8003b32:	d118      	bne.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003b34:	001d      	movs	r5, r3
 8003b36:	3540      	adds	r5, #64	@ 0x40
 8003b38:	782a      	ldrb	r2, [r5, #0]
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	d013      	beq.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3e:	2224      	movs	r2, #36	@ 0x24
 8003b40:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3a23      	subs	r2, #35	@ 0x23
 8003b46:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b48:	4807      	ldr	r0, [pc, #28]	@ (8003b68 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003b4a:	4391      	bics	r1, r2
 8003b4c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b52:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b54:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	4339      	orrs	r1, r7
 8003b5a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003b64:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b68:	ffffefff 	.word	0xffffefff

08003b6c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	0002      	movs	r2, r0
{
 8003b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b70:	3241      	adds	r2, #65	@ 0x41
 8003b72:	7814      	ldrb	r4, [r2, #0]
{
 8003b74:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b76:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	2c20      	cmp	r4, #32
 8003b7c:	d117      	bne.n	8003bae <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003b7e:	001c      	movs	r4, r3
 8003b80:	3440      	adds	r4, #64	@ 0x40
 8003b82:	7826      	ldrb	r6, [r4, #0]
 8003b84:	2e01      	cmp	r6, #1
 8003b86:	d012      	beq.n	8003bae <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	3022      	adds	r0, #34	@ 0x22
 8003b8a:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3823      	subs	r0, #35	@ 0x23
 8003b90:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b92:	4f07      	ldr	r7, [pc, #28]	@ (8003bb0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003b94:	4386      	bics	r6, r0
 8003b96:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003b98:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b9a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003b9e:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	4308      	orrs	r0, r1
 8003ba6:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003bac:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb0:	fffff0ff 	.word	0xfffff0ff

08003bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003bb6:	4c11      	ldr	r4, [pc, #68]	@ (8003bfc <HAL_PWREx_ControlVoltageScaling+0x48>)
 8003bb8:	4911      	ldr	r1, [pc, #68]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8003bba:	6823      	ldr	r3, [r4, #0]
{
 8003bbc:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4303      	orrs	r3, r0
 8003bc2:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc4:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003bc6:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10e      	bne.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003bce:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003bd0:	490d      	ldr	r1, [pc, #52]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	4358      	muls	r0, r3
 8003bd8:	f7fc fa9c 	bl	8000114 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bdc:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003bde:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003be0:	00d2      	lsls	r2, r2, #3
 8003be2:	6961      	ldr	r1, [r4, #20]
 8003be4:	0008      	movs	r0, r1
 8003be6:	4010      	ands	r0, r2
 8003be8:	4211      	tst	r1, r2
 8003bea:	d100      	bne.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8003bec:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	e7f5      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	e7f8      	b.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x38>
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	fffff9ff 	.word	0xfffff9ff
 8003c04:	20000008 	.word	0x20000008
 8003c08:	000f4240 	.word	0x000f4240

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	0004      	movs	r4, r0
 8003c10:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003c16:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8003c18:	b005      	add	sp, #20
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1c:	6803      	ldr	r3, [r0, #0]
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d410      	bmi.n	8003c44 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	079b      	lsls	r3, r3, #30
 8003c26:	d45c      	bmi.n	8003ce2 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	071b      	lsls	r3, r3, #28
 8003c2c:	d500      	bpl.n	8003c30 <HAL_RCC_OscConfig+0x24>
 8003c2e:	e0c1      	b.n	8003db4 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	075b      	lsls	r3, r3, #29
 8003c34:	d500      	bpl.n	8003c38 <HAL_RCC_OscConfig+0x2c>
 8003c36:	e0f2      	b.n	8003e1e <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c38:	69e3      	ldr	r3, [r4, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d000      	beq.n	8003c40 <HAL_RCC_OscConfig+0x34>
 8003c3e:	e179      	b.n	8003f34 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7e9      	b.n	8003c18 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c44:	2238      	movs	r2, #56	@ 0x38
 8003c46:	4daf      	ldr	r5, [pc, #700]	@ (8003f04 <HAL_RCC_OscConfig+0x2f8>)
 8003c48:	68ab      	ldr	r3, [r5, #8]
 8003c4a:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c52:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c54:	079b      	lsls	r3, r3, #30
 8003c56:	d108      	bne.n	8003c6a <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	039b      	lsls	r3, r3, #14
 8003c5c:	d5e1      	bpl.n	8003c22 <HAL_RCC_OscConfig+0x16>
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1de      	bne.n	8003c22 <HAL_RCC_OscConfig+0x16>
 8003c64:	e7d7      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d0f6      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6a:	2280      	movs	r2, #128	@ 0x80
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	0252      	lsls	r2, r2, #9
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d111      	bne.n	8003c98 <HAL_RCC_OscConfig+0x8c>
 8003c74:	682a      	ldr	r2, [r5, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c7a:	f7fe f919 	bl	8001eb0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003c80:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	02bf      	lsls	r7, r7, #10
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	423b      	tst	r3, r7
 8003c88:	d1cb      	bne.n	8003c22 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8a:	f7fe f911 	bl	8001eb0 <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	2864      	cmp	r0, #100	@ 0x64
 8003c92:	d9f7      	bls.n	8003c84 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8003c94:	2003      	movs	r0, #3
 8003c96:	e7bf      	b.n	8003c18 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c98:	21a0      	movs	r1, #160	@ 0xa0
 8003c9a:	02c9      	lsls	r1, r1, #11
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d108      	bne.n	8003cb2 <HAL_RCC_OscConfig+0xa6>
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	6829      	ldr	r1, [r5, #0]
 8003ca4:	02db      	lsls	r3, r3, #11
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	602b      	str	r3, [r5, #0]
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb0:	e7e3      	b.n	8003c7a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb2:	682a      	ldr	r2, [r5, #0]
 8003cb4:	4994      	ldr	r1, [pc, #592]	@ (8003f08 <HAL_RCC_OscConfig+0x2fc>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	602a      	str	r2, [r5, #0]
 8003cba:	682a      	ldr	r2, [r5, #0]
 8003cbc:	4993      	ldr	r1, [pc, #588]	@ (8003f0c <HAL_RCC_OscConfig+0x300>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003cc6:	f7fe f8f3 	bl	8001eb0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003ccc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cce:	02bf      	lsls	r7, r7, #10
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	423b      	tst	r3, r7
 8003cd4:	d0a5      	beq.n	8003c22 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd6:	f7fe f8eb 	bl	8001eb0 <HAL_GetTick>
 8003cda:	1b80      	subs	r0, r0, r6
 8003cdc:	2864      	cmp	r0, #100	@ 0x64
 8003cde:	d9f7      	bls.n	8003cd0 <HAL_RCC_OscConfig+0xc4>
 8003ce0:	e7d8      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce2:	2238      	movs	r2, #56	@ 0x38
 8003ce4:	4d87      	ldr	r5, [pc, #540]	@ (8003f04 <HAL_RCC_OscConfig+0x2f8>)
 8003ce6:	68ab      	ldr	r3, [r5, #8]
 8003ce8:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cea:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d128      	bne.n	8003d42 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf0:	2103      	movs	r1, #3
 8003cf2:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003cf4:	2a02      	cmp	r2, #2
 8003cf6:	d126      	bne.n	8003d46 <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	682a      	ldr	r2, [r5, #0]
 8003cfa:	0552      	lsls	r2, r2, #21
 8003cfc:	d503      	bpl.n	8003d06 <HAL_RCC_OscConfig+0xfa>
 8003cfe:	68e2      	ldr	r2, [r4, #12]
 8003d00:	2a00      	cmp	r2, #0
 8003d02:	d100      	bne.n	8003d06 <HAL_RCC_OscConfig+0xfa>
 8003d04:	e787      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	6869      	ldr	r1, [r5, #4]
 8003d08:	6962      	ldr	r2, [r4, #20]
 8003d0a:	4881      	ldr	r0, [pc, #516]	@ (8003f10 <HAL_RCC_OscConfig+0x304>)
 8003d0c:	0212      	lsls	r2, r2, #8
 8003d0e:	4001      	ands	r1, r0
 8003d10:	430a      	orrs	r2, r1
 8003d12:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d1c:	497e      	ldr	r1, [pc, #504]	@ (8003f18 <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d1e:	4013      	ands	r3, r2
 8003d20:	6922      	ldr	r2, [r4, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <HAL_RCC_OscConfig+0x310>)
 8003d2a:	049b      	lsls	r3, r3, #18
 8003d2c:	0f5b      	lsrs	r3, r3, #29
 8003d2e:	40da      	lsrs	r2, r3
 8003d30:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d32:	4b7b      	ldr	r3, [pc, #492]	@ (8003f20 <HAL_RCC_OscConfig+0x314>)
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	f7fe f873 	bl	8001e20 <HAL_InitTick>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d100      	bne.n	8003d40 <HAL_RCC_OscConfig+0x134>
 8003d3e:	e773      	b.n	8003c28 <HAL_RCC_OscConfig+0x1c>
 8003d40:	e769      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0d8      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	4a71      	ldr	r2, [pc, #452]	@ (8003f14 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d52:	4013      	ands	r3, r2
 8003d54:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d56:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	682a      	ldr	r2, [r5, #0]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d66:	f7fe f8a3 	bl	8001eb0 <HAL_GetTick>
 8003d6a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	423b      	tst	r3, r7
 8003d70:	d007      	beq.n	8003d82 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d72:	686a      	ldr	r2, [r5, #4]
 8003d74:	6963      	ldr	r3, [r4, #20]
 8003d76:	4966      	ldr	r1, [pc, #408]	@ (8003f10 <HAL_RCC_OscConfig+0x304>)
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	606b      	str	r3, [r5, #4]
 8003d80:	e752      	b.n	8003c28 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fe f895 	bl	8001eb0 <HAL_GetTick>
 8003d86:	1b80      	subs	r0, r0, r6
 8003d88:	2802      	cmp	r0, #2
 8003d8a:	d9ef      	bls.n	8003d6c <HAL_RCC_OscConfig+0x160>
 8003d8c:	e782      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	4a64      	ldr	r2, [pc, #400]	@ (8003f24 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d92:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8003d94:	4013      	ands	r3, r2
 8003d96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d98:	f7fe f88a 	bl	8001eb0 <HAL_GetTick>
 8003d9c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9e:	00ff      	lsls	r7, r7, #3
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	423b      	tst	r3, r7
 8003da4:	d100      	bne.n	8003da8 <HAL_RCC_OscConfig+0x19c>
 8003da6:	e73f      	b.n	8003c28 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fe f882 	bl	8001eb0 <HAL_GetTick>
 8003dac:	1b80      	subs	r0, r0, r6
 8003dae:	2802      	cmp	r0, #2
 8003db0:	d9f6      	bls.n	8003da0 <HAL_RCC_OscConfig+0x194>
 8003db2:	e76f      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003db4:	2238      	movs	r2, #56	@ 0x38
 8003db6:	4d53      	ldr	r5, [pc, #332]	@ (8003f04 <HAL_RCC_OscConfig+0x2f8>)
 8003db8:	68ab      	ldr	r3, [r5, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b18      	cmp	r3, #24
 8003dbe:	d108      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003dc0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003dc2:	079b      	lsls	r3, r3, #30
 8003dc4:	d400      	bmi.n	8003dc8 <HAL_RCC_OscConfig+0x1bc>
 8003dc6:	e733      	b.n	8003c30 <HAL_RCC_OscConfig+0x24>
 8003dc8:	69a3      	ldr	r3, [r4, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d000      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x1c4>
 8003dce:	e72f      	b.n	8003c30 <HAL_RCC_OscConfig+0x24>
 8003dd0:	e721      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd2:	69a2      	ldr	r2, [r4, #24]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8003dda:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ddc:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003dde:	4313      	orrs	r3, r2
 8003de0:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003de2:	f7fe f865 	bl	8001eb0 <HAL_GetTick>
 8003de6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003dea:	423b      	tst	r3, r7
 8003dec:	d000      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1e4>
 8003dee:	e71f      	b.n	8003c30 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fe f85e 	bl	8001eb0 <HAL_GetTick>
 8003df4:	1b80      	subs	r0, r0, r6
 8003df6:	2802      	cmp	r0, #2
 8003df8:	d9f6      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1dc>
 8003dfa:	e74b      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8003dfc:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfe:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003e00:	439a      	bics	r2, r3
 8003e02:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003e04:	f7fe f854 	bl	8001eb0 <HAL_GetTick>
 8003e08:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003e0c:	423b      	tst	r3, r7
 8003e0e:	d100      	bne.n	8003e12 <HAL_RCC_OscConfig+0x206>
 8003e10:	e70e      	b.n	8003c30 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fe f84d 	bl	8001eb0 <HAL_GetTick>
 8003e16:	1b80      	subs	r0, r0, r6
 8003e18:	2802      	cmp	r0, #2
 8003e1a:	d9f6      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1fe>
 8003e1c:	e73a      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e1e:	2238      	movs	r2, #56	@ 0x38
 8003e20:	4d38      	ldr	r5, [pc, #224]	@ (8003f04 <HAL_RCC_OscConfig+0x2f8>)
 8003e22:	68ab      	ldr	r3, [r5, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d108      	bne.n	8003e3c <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e2a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003e2c:	079b      	lsls	r3, r3, #30
 8003e2e:	d400      	bmi.n	8003e32 <HAL_RCC_OscConfig+0x226>
 8003e30:	e702      	b.n	8003c38 <HAL_RCC_OscConfig+0x2c>
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d000      	beq.n	8003e3a <HAL_RCC_OscConfig+0x22e>
 8003e38:	e6fe      	b.n	8003c38 <HAL_RCC_OscConfig+0x2c>
 8003e3a:	e6ec      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e3c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e40:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003e42:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8003e44:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e46:	4213      	tst	r3, r2
 8003e48:	d108      	bne.n	8003e5c <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8003e50:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003e52:	4013      	ands	r3, r2
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	2780      	movs	r7, #128	@ 0x80
 8003e5e:	4e32      	ldr	r6, [pc, #200]	@ (8003f28 <HAL_RCC_OscConfig+0x31c>)
 8003e60:	007f      	lsls	r7, r7, #1
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	423b      	tst	r3, r7
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d122      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2a8>
 8003e6e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003e70:	4313      	orrs	r3, r2
 8003e72:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003e74:	f7fe f81c 	bl	8001eb0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003e7a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003e7e:	423b      	tst	r3, r7
 8003e80:	d038      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8003e82:	9b00      	ldr	r3, [sp, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d000      	beq.n	8003e8a <HAL_RCC_OscConfig+0x27e>
 8003e88:	e6d6      	b.n	8003c38 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003e8c:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <HAL_RCC_OscConfig+0x320>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8003e92:	e6d1      	b.n	8003c38 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	433b      	orrs	r3, r7
 8003e98:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003e9a:	f7fe f809 	bl	8001eb0 <HAL_GetTick>
 8003e9e:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	423b      	tst	r3, r7
 8003ea4:	d1e0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fe f803 	bl	8001eb0 <HAL_GetTick>
 8003eaa:	9b01      	ldr	r3, [sp, #4]
 8003eac:	1ac0      	subs	r0, r0, r3
 8003eae:	2802      	cmp	r0, #2
 8003eb0:	d9f6      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x294>
 8003eb2:	e6ef      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ba>
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8003ec0:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e7d4      	b.n	8003e70 <HAL_RCC_OscConfig+0x264>
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	438a      	bics	r2, r1
 8003eca:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8003ecc:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003ece:	3103      	adds	r1, #3
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1cd      	bne.n	8003e74 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 8003ed8:	f7fd ffea 	bl	8001eb0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003edc:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003ede:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003ee2:	423b      	tst	r3, r7
 8003ee4:	d0cd      	beq.n	8003e82 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd ffe3 	bl	8001eb0 <HAL_GetTick>
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_RCC_OscConfig+0x324>)
 8003eec:	1b80      	subs	r0, r0, r6
 8003eee:	4298      	cmp	r0, r3
 8003ef0:	d9f6      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2d4>
 8003ef2:	e6cf      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd ffdc 	bl	8001eb0 <HAL_GetTick>
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <HAL_RCC_OscConfig+0x324>)
 8003efa:	1b80      	subs	r0, r0, r6
 8003efc:	4298      	cmp	r0, r3
 8003efe:	d9bd      	bls.n	8003e7c <HAL_RCC_OscConfig+0x270>
 8003f00:	e6c8      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	40021000 	.word	0x40021000
 8003f08:	fffeffff 	.word	0xfffeffff
 8003f0c:	fffbffff 	.word	0xfffbffff
 8003f10:	ffff80ff 	.word	0xffff80ff
 8003f14:	ffffc7ff 	.word	0xffffc7ff
 8003f18:	20000008 	.word	0x20000008
 8003f1c:	00f42400 	.word	0x00f42400
 8003f20:	20000010 	.word	0x20000010
 8003f24:	fffffeff 	.word	0xfffffeff
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	efffffff 	.word	0xefffffff
 8003f30:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f34:	2138      	movs	r1, #56	@ 0x38
 8003f36:	4d3f      	ldr	r5, [pc, #252]	@ (8004034 <HAL_RCC_OscConfig+0x428>)
 8003f38:	68aa      	ldr	r2, [r5, #8]
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	2a10      	cmp	r2, #16
 8003f3e:	d051      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f40:	4a3d      	ldr	r2, [pc, #244]	@ (8004038 <HAL_RCC_OscConfig+0x42c>)
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d138      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 8003f46:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f48:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f4e:	f7fd ffaf 	bl	8001eb0 <HAL_GetTick>
 8003f52:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	04bf      	lsls	r7, r7, #18
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	423b      	tst	r3, r7
 8003f5a:	d127      	bne.n	8003fac <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003f5e:	6a23      	ldr	r3, [r4, #32]
 8003f60:	68ea      	ldr	r2, [r5, #12]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	4935      	ldr	r1, [pc, #212]	@ (800403c <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	400a      	ands	r2, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f70:	4313      	orrs	r3, r2
 8003f72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f74:	4313      	orrs	r3, r2
 8003f76:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003f78:	0212      	lsls	r2, r2, #8
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	682a      	ldr	r2, [r5, #0]
 8003f82:	045b      	lsls	r3, r3, #17
 8003f84:	4313      	orrs	r3, r2
 8003f86:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	68ea      	ldr	r2, [r5, #12]
 8003f8c:	055b      	lsls	r3, r3, #21
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003f92:	f7fd ff8d 	bl	8001eb0 <HAL_GetTick>
 8003f96:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	4233      	tst	r3, r6
 8003f9c:	d000      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x394>
 8003f9e:	e64f      	b.n	8003c40 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd ff86 	bl	8001eb0 <HAL_GetTick>
 8003fa4:	1b00      	subs	r0, r0, r4
 8003fa6:	2802      	cmp	r0, #2
 8003fa8:	d9f6      	bls.n	8003f98 <HAL_RCC_OscConfig+0x38c>
 8003faa:	e673      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd ff80 	bl	8001eb0 <HAL_GetTick>
 8003fb0:	1b80      	subs	r0, r0, r6
 8003fb2:	2802      	cmp	r0, #2
 8003fb4:	d9cf      	bls.n	8003f56 <HAL_RCC_OscConfig+0x34a>
 8003fb6:	e66d      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fba:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ff76 	bl	8001eb0 <HAL_GetTick>
 8003fc4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc6:	04b6      	lsls	r6, r6, #18
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	4233      	tst	r3, r6
 8003fcc:	d104      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003fce:	68eb      	ldr	r3, [r5, #12]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x434>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60eb      	str	r3, [r5, #12]
 8003fd6:	e633      	b.n	8003c40 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd ff6a 	bl	8001eb0 <HAL_GetTick>
 8003fdc:	1b00      	subs	r0, r0, r4
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9f2      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x3bc>
 8003fe2:	e657      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d100      	bne.n	8003fea <HAL_RCC_OscConfig+0x3de>
 8003fe8:	e615      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003fec:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	6a21      	ldr	r1, [r4, #32]
 8003ff0:	4002      	ands	r2, r0
 8003ff2:	428a      	cmp	r2, r1
 8003ff4:	d000      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
 8003ff6:	e60e      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffc:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	428a      	cmp	r2, r1
 8004000:	d000      	beq.n	8004004 <HAL_RCC_OscConfig+0x3f8>
 8004002:	e608      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004004:	21fe      	movs	r1, #254	@ 0xfe
 8004006:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004008:	01c9      	lsls	r1, r1, #7
 800400a:	4001      	ands	r1, r0
 800400c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400e:	4291      	cmp	r1, r2
 8004010:	d000      	beq.n	8004014 <HAL_RCC_OscConfig+0x408>
 8004012:	e600      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004014:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004018:	0392      	lsls	r2, r2, #14
 800401a:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401c:	428a      	cmp	r2, r1
 800401e:	d000      	beq.n	8004022 <HAL_RCC_OscConfig+0x416>
 8004020:	e5f9      	b.n	8003c16 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004022:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004024:	0f40      	lsrs	r0, r0, #29
 8004026:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004028:	1ac0      	subs	r0, r0, r3
 800402a:	1e43      	subs	r3, r0, #1
 800402c:	4198      	sbcs	r0, r3
 800402e:	b2c0      	uxtb	r0, r0
 8004030:	e5f2      	b.n	8003c18 <HAL_RCC_OscConfig+0xc>
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	40021000 	.word	0x40021000
 8004038:	feffffff 	.word	0xfeffffff
 800403c:	1fc1808c 	.word	0x1fc1808c
 8004040:	effefffc 	.word	0xeffefffc

08004044 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004044:	2338      	movs	r3, #56	@ 0x38
{
 8004046:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004048:	4c1d      	ldr	r4, [pc, #116]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800404a:	68a2      	ldr	r2, [r4, #8]
 800404c:	421a      	tst	r2, r3
 800404e:	d105      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004050:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004052:	481c      	ldr	r0, [pc, #112]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004054:	049b      	lsls	r3, r3, #18
 8004056:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004058:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800405a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800405c:	68a2      	ldr	r2, [r4, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	2a08      	cmp	r2, #8
 8004062:	d027      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004064:	68a2      	ldr	r2, [r4, #8]
 8004066:	401a      	ands	r2, r3
 8004068:	2a10      	cmp	r2, #16
 800406a:	d117      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800406c:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800406e:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004070:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004072:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004074:	0649      	lsls	r1, r1, #25
 8004076:	0f49      	lsrs	r1, r1, #29
 8004078:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800407a:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800407c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800407e:	4015      	ands	r5, r2
    switch (pllsource)
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d109      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004084:	4810      	ldr	r0, [pc, #64]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004086:	f7fc f845 	bl	8000114 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800408a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800408c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800408e:	0f49      	lsrs	r1, r1, #29
 8004090:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004092:	f7fc f83f 	bl	8000114 <__udivsi3>
 8004096:	e7e0      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004098:	480a      	ldr	r0, [pc, #40]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x80>)
 800409a:	e7f4      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800409c:	68a2      	ldr	r2, [r4, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	2a20      	cmp	r2, #32
 80040a2:	d009      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040a4:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 80040a6:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b18      	cmp	r3, #24
 80040ac:	d1d5      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 80040ae:	20fa      	movs	r0, #250	@ 0xfa
 80040b0:	01c0      	lsls	r0, r0, #7
 80040b2:	e7d2      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80040b4:	4804      	ldr	r0, [pc, #16]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x84>)
 80040b6:	e7d0      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80040b8:	2080      	movs	r0, #128	@ 0x80
 80040ba:	0200      	lsls	r0, r0, #8
 80040bc:	e7cd      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x16>
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	40021000 	.word	0x40021000
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_ClockConfig>:
{
 80040cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ce:	0004      	movs	r4, r0
 80040d0:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
}
 80040d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040da:	2707      	movs	r7, #7
 80040dc:	4e48      	ldr	r6, [pc, #288]	@ (8004200 <HAL_RCC_ClockConfig+0x134>)
 80040de:	6833      	ldr	r3, [r6, #0]
 80040e0:	403b      	ands	r3, r7
 80040e2:	428b      	cmp	r3, r1
 80040e4:	d32a      	bcc.n	800413c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	0793      	lsls	r3, r2, #30
 80040ea:	d43b      	bmi.n	8004164 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ec:	07d2      	lsls	r2, r2, #31
 80040ee:	d448      	bmi.n	8004182 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	2707      	movs	r7, #7
 80040f2:	6833      	ldr	r3, [r6, #0]
 80040f4:	403b      	ands	r3, r7
 80040f6:	42ab      	cmp	r3, r5
 80040f8:	d90a      	bls.n	8004110 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	6833      	ldr	r3, [r6, #0]
 80040fc:	43bb      	bics	r3, r7
 80040fe:	432b      	orrs	r3, r5
 8004100:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004102:	f7fd fed5 	bl	8001eb0 <HAL_GetTick>
 8004106:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	403b      	ands	r3, r7
 800410c:	42ab      	cmp	r3, r5
 800410e:	d168      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	4d3c      	ldr	r5, [pc, #240]	@ (8004204 <HAL_RCC_ClockConfig+0x138>)
 8004114:	075b      	lsls	r3, r3, #29
 8004116:	d46c      	bmi.n	80041f2 <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004118:	f7ff ff94 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 800411c:	68ab      	ldr	r3, [r5, #8]
 800411e:	493a      	ldr	r1, [pc, #232]	@ (8004208 <HAL_RCC_ClockConfig+0x13c>)
 8004120:	051b      	lsls	r3, r3, #20
 8004122:	0f1b      	lsrs	r3, r3, #28
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	585b      	ldr	r3, [r3, r1]
 8004128:	211f      	movs	r1, #31
 800412a:	400b      	ands	r3, r1
 800412c:	40d8      	lsrs	r0, r3
 800412e:	4a37      	ldr	r2, [pc, #220]	@ (800420c <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 8004130:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004132:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f7fd fe73 	bl	8001e20 <HAL_InitTick>
 800413a:	e7cd      	b.n	80040d8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	43bb      	bics	r3, r7
 8004140:	430b      	orrs	r3, r1
 8004142:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004144:	f7fd feb4 	bl	8001eb0 <HAL_GetTick>
 8004148:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800414a:	6833      	ldr	r3, [r6, #0]
 800414c:	403b      	ands	r3, r7
 800414e:	42ab      	cmp	r3, r5
 8004150:	d0c9      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004152:	f7fd fead 	bl	8001eb0 <HAL_GetTick>
 8004156:	9b01      	ldr	r3, [sp, #4]
 8004158:	1ac0      	subs	r0, r0, r3
 800415a:	4b2e      	ldr	r3, [pc, #184]	@ (8004214 <HAL_RCC_ClockConfig+0x148>)
 800415c:	4298      	cmp	r0, r3
 800415e:	d9f4      	bls.n	800414a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004160:	2003      	movs	r0, #3
 8004162:	e7b9      	b.n	80040d8 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	4927      	ldr	r1, [pc, #156]	@ (8004204 <HAL_RCC_ClockConfig+0x138>)
 8004166:	0753      	lsls	r3, r2, #29
 8004168:	d504      	bpl.n	8004174 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800416a:	23e0      	movs	r3, #224	@ 0xe0
 800416c:	6888      	ldr	r0, [r1, #8]
 800416e:	01db      	lsls	r3, r3, #7
 8004170:	4303      	orrs	r3, r0
 8004172:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	688b      	ldr	r3, [r1, #8]
 8004176:	4828      	ldr	r0, [pc, #160]	@ (8004218 <HAL_RCC_ClockConfig+0x14c>)
 8004178:	4003      	ands	r3, r0
 800417a:	68a0      	ldr	r0, [r4, #8]
 800417c:	4303      	orrs	r3, r0
 800417e:	608b      	str	r3, [r1, #8]
 8004180:	e7b4      	b.n	80040ec <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	6860      	ldr	r0, [r4, #4]
 8004184:	4f1f      	ldr	r7, [pc, #124]	@ (8004204 <HAL_RCC_ClockConfig+0x138>)
 8004186:	2803      	cmp	r0, #3
 8004188:	d829      	bhi.n	80041de <HAL_RCC_ClockConfig+0x112>
 800418a:	f7fb ffb9 	bl	8000100 <__gnu_thumb1_case_uqi>
 800418e:	0220      	.short	0x0220
 8004190:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	039b      	lsls	r3, r3, #14
 8004196:	d59e      	bpl.n	80040d6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004198:	2207      	movs	r2, #7
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4393      	bics	r3, r2
 800419e:	4303      	orrs	r3, r0
 80041a0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80041a2:	f7fd fe85 	bl	8001eb0 <HAL_GetTick>
 80041a6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	2338      	movs	r3, #56	@ 0x38
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	401a      	ands	r2, r3
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d09c      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b6:	f7fd fe7b 	bl	8001eb0 <HAL_GetTick>
 80041ba:	9b01      	ldr	r3, [sp, #4]
 80041bc:	1ac0      	subs	r0, r0, r3
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <HAL_RCC_ClockConfig+0x148>)
 80041c0:	4298      	cmp	r0, r3
 80041c2:	d9f1      	bls.n	80041a8 <HAL_RCC_ClockConfig+0xdc>
 80041c4:	e7cc      	b.n	8004160 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	d4e5      	bmi.n	8004198 <HAL_RCC_ClockConfig+0xcc>
 80041cc:	e783      	b.n	80040d6 <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	055b      	lsls	r3, r3, #21
 80041d2:	d4e1      	bmi.n	8004198 <HAL_RCC_ClockConfig+0xcc>
 80041d4:	e77f      	b.n	80040d6 <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d8:	079b      	lsls	r3, r3, #30
 80041da:	d4dd      	bmi.n	8004198 <HAL_RCC_ClockConfig+0xcc>
 80041dc:	e77b      	b.n	80040d6 <HAL_RCC_ClockConfig+0xa>
 80041de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e0:	e7fa      	b.n	80041d8 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e2:	f7fd fe65 	bl	8001eb0 <HAL_GetTick>
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	1ac0      	subs	r0, r0, r3
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x148>)
 80041ec:	4298      	cmp	r0, r3
 80041ee:	d98b      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
 80041f0:	e7b6      	b.n	8004160 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041f2:	68ab      	ldr	r3, [r5, #8]
 80041f4:	4a09      	ldr	r2, [pc, #36]	@ (800421c <HAL_RCC_ClockConfig+0x150>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	68e2      	ldr	r2, [r4, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60ab      	str	r3, [r5, #8]
 80041fe:	e78b      	b.n	8004118 <HAL_RCC_ClockConfig+0x4c>
 8004200:	40022000 	.word	0x40022000
 8004204:	40021000 	.word	0x40021000
 8004208:	0800617c 	.word	0x0800617c
 800420c:	20000008 	.word	0x20000008
 8004210:	20000010 	.word	0x20000010
 8004214:	00001388 	.word	0x00001388
 8004218:	fffff0ff 	.word	0xfffff0ff
 800421c:	ffff8fff 	.word	0xffff8fff

08004220 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004222:	4907      	ldr	r1, [pc, #28]	@ (8004240 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004226:	4a07      	ldr	r2, [pc, #28]	@ (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004228:	045b      	lsls	r3, r3, #17
 800422a:	0f5b      	lsrs	r3, r3, #29
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	585b      	ldr	r3, [r3, r1]
 8004230:	211f      	movs	r1, #31
 8004232:	6810      	ldr	r0, [r2, #0]
 8004234:	400b      	ands	r3, r1
 8004236:	40d8      	lsrs	r0, r3
}
 8004238:	4770      	bx	lr
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	40021000 	.word	0x40021000
 8004240:	0800615c 	.word	0x0800615c
 8004244:	20000008 	.word	0x20000008

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800424a:	6803      	ldr	r3, [r0, #0]
{
 800424c:	0005      	movs	r5, r0
 800424e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004250:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004252:	039b      	lsls	r3, r3, #14
 8004254:	d551      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	2280      	movs	r2, #128	@ 0x80
 8004258:	4c48      	ldr	r4, [pc, #288]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800425a:	0552      	lsls	r2, r2, #21
 800425c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800425e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004260:	4213      	tst	r3, r2
 8004262:	d108      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004266:	4313      	orrs	r3, r2
 8004268:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800426a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800426c:	4013      	ands	r3, r2
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004272:	2301      	movs	r3, #1
 8004274:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004276:	2780      	movs	r7, #128	@ 0x80
 8004278:	4e41      	ldr	r6, [pc, #260]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800427a:	007f      	lsls	r7, r7, #1
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	433b      	orrs	r3, r7
 8004280:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004282:	f7fd fe15 	bl	8001eb0 <HAL_GetTick>
 8004286:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	423b      	tst	r3, r7
 800428c:	d027      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x96>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800428e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004290:	23c0      	movs	r3, #192	@ 0xc0
 8004292:	0010      	movs	r0, r2
 8004294:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004296:	6969      	ldr	r1, [r5, #20]
 8004298:	4e3a      	ldr	r6, [pc, #232]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800429a:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800429c:	421a      	tst	r2, r3
 800429e:	d017      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80042a0:	4281      	cmp	r1, r0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a4:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042aa:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ac:	0252      	lsls	r2, r2, #9
 80042ae:	4302      	orrs	r2, r0
 80042b0:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80042b4:	4834      	ldr	r0, [pc, #208]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x140>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b6:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b8:	4002      	ands	r2, r0
 80042ba:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042bc:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042be:	07db      	lsls	r3, r3, #31
 80042c0:	d506      	bpl.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd fdf5 	bl	8001eb0 <HAL_GetTick>
 80042c6:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c8:	2202      	movs	r2, #2
 80042ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80042cc:	4213      	tst	r3, r2
 80042ce:	d04d      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80042d2:	696a      	ldr	r2, [r5, #20]
 80042d4:	4033      	ands	r3, r6
 80042d6:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d8:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042da:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042de:	f7fd fde7 	bl	8001eb0 <HAL_GetTick>
 80042e2:	9b01      	ldr	r3, [sp, #4]
 80042e4:	1ac0      	subs	r0, r0, r3
 80042e6:	2802      	cmp	r0, #2
 80042e8:	d9ce      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ea:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ec:	9b00      	ldr	r3, [sp, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d103      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80042f4:	4a25      	ldr	r2, [pc, #148]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fa:	682a      	ldr	r2, [r5, #0]
 80042fc:	07d3      	lsls	r3, r2, #31
 80042fe:	d506      	bpl.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004300:	2403      	movs	r4, #3
 8004302:	491e      	ldr	r1, [pc, #120]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004304:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8004306:	43a3      	bics	r3, r4
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	4323      	orrs	r3, r4
 800430c:	654b      	str	r3, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430e:	0693      	lsls	r3, r2, #26
 8004310:	d506      	bpl.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004312:	491a      	ldr	r1, [pc, #104]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004314:	4c1e      	ldr	r4, [pc, #120]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004316:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8004318:	4023      	ands	r3, r4
 800431a:	68ac      	ldr	r4, [r5, #8]
 800431c:	4323      	orrs	r3, r4
 800431e:	654b      	str	r3, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004320:	0453      	lsls	r3, r2, #17
 8004322:	d50f      	bpl.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4915      	ldr	r1, [pc, #84]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004326:	692c      	ldr	r4, [r5, #16]
 8004328:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	4323      	orrs	r3, r4
 8004330:	654b      	str	r3, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	05db      	lsls	r3, r3, #23
 8004336:	429c      	cmp	r4, r3
 8004338:	d104      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	68cc      	ldr	r4, [r1, #12]
 800433e:	025b      	lsls	r3, r3, #9
 8004340:	4323      	orrs	r3, r4
 8004342:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004344:	0512      	lsls	r2, r2, #20
 8004346:	d50f      	bpl.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004348:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800434a:	4c12      	ldr	r4, [pc, #72]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800434c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800434e:	68e9      	ldr	r1, [r5, #12]
 8004350:	4023      	ands	r3, r4
 8004352:	430b      	orrs	r3, r1
 8004354:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	01db      	lsls	r3, r3, #7
 800435a:	4299      	cmp	r1, r3
 800435c:	d104      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	68d1      	ldr	r1, [r2, #12]
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	430b      	orrs	r3, r1
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8004368:	b005      	add	sp, #20
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd fda0 	bl	8001eb0 <HAL_GetTick>
 8004370:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004372:	1bc0      	subs	r0, r0, r7
 8004374:	4298      	cmp	r0, r3
 8004376:	d9a7      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8004378:	e7b7      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	fffffcff 	.word	0xfffffcff
 8004388:	fffeffff 	.word	0xfffeffff
 800438c:	efffffff 	.word	0xefffffff
 8004390:	ffffcfff 	.word	0xffffcfff
 8004394:	ffff3fff 	.word	0xffff3fff
 8004398:	00001388 	.word	0x00001388

0800439c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 80043a0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a2:	6a02      	ldr	r2, [r0, #32]
 80043a4:	43a2      	bics	r2, r4
 80043a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 80043ac:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ae:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	680a      	ldr	r2, [r1, #0]
 80043b2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b4:	2202      	movs	r2, #2
 80043b6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b8:	688a      	ldr	r2, [r1, #8]
 80043ba:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043bc:	4a0e      	ldr	r2, [pc, #56]	@ (80043f8 <TIM_OC1_SetConfig+0x5c>)
 80043be:	4290      	cmp	r0, r2
 80043c0:	d005      	beq.n	80043ce <TIM_OC1_SetConfig+0x32>
 80043c2:	4a0e      	ldr	r2, [pc, #56]	@ (80043fc <TIM_OC1_SetConfig+0x60>)
 80043c4:	4290      	cmp	r0, r2
 80043c6:	d002      	beq.n	80043ce <TIM_OC1_SetConfig+0x32>
 80043c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <TIM_OC1_SetConfig+0x64>)
 80043ca:	4290      	cmp	r0, r2
 80043cc:	d10b      	bne.n	80043e6 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ce:	2208      	movs	r2, #8
 80043d0:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d4:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80043d6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d8:	2204      	movs	r2, #4
 80043da:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043dc:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <TIM_OC1_SetConfig+0x68>)
 80043de:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e0:	694c      	ldr	r4, [r1, #20]
 80043e2:	4334      	orrs	r4, r6
 80043e4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80043e8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80043ec:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	6203      	str	r3, [r0, #32]
}
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	fffeff8c 	.word	0xfffeff8c
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	fffffcff 	.word	0xfffffcff

08004408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 800440c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440e:	6a03      	ldr	r3, [r0, #32]
 8004410:	4013      	ands	r3, r2
 8004412:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004416:	4b15      	ldr	r3, [pc, #84]	@ (800446c <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 8004418:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800441a:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	680b      	ldr	r3, [r1, #0]
 800441e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004420:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <TIM_OC3_SetConfig+0x68>)
 8004422:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004424:	688b      	ldr	r3, [r1, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442a:	4d12      	ldr	r5, [pc, #72]	@ (8004474 <TIM_OC3_SetConfig+0x6c>)
 800442c:	42a8      	cmp	r0, r5
 800442e:	d10e      	bne.n	800444e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004430:	4d11      	ldr	r5, [pc, #68]	@ (8004478 <TIM_OC3_SetConfig+0x70>)
 8004432:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004434:	68cb      	ldr	r3, [r1, #12]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443a:	4d10      	ldr	r5, [pc, #64]	@ (800447c <TIM_OC3_SetConfig+0x74>)
 800443c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800443e:	4d10      	ldr	r5, [pc, #64]	@ (8004480 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004440:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004442:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004444:	694a      	ldr	r2, [r1, #20]
 8004446:	4332      	orrs	r2, r6
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	432a      	orrs	r2, r5
 800444c:	e005      	b.n	800445a <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444e:	4d0d      	ldr	r5, [pc, #52]	@ (8004484 <TIM_OC3_SetConfig+0x7c>)
 8004450:	42a8      	cmp	r0, r5
 8004452:	d0f4      	beq.n	800443e <TIM_OC3_SetConfig+0x36>
 8004454:	4d0c      	ldr	r5, [pc, #48]	@ (8004488 <TIM_OC3_SetConfig+0x80>)
 8004456:	42a8      	cmp	r0, r5
 8004458:	d0f1      	beq.n	800443e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800445e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004460:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004462:	6203      	str	r3, [r0, #32]
}
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	fffffeff 	.word	0xfffffeff
 800446c:	fffeff8c 	.word	0xfffeff8c
 8004470:	fffffdff 	.word	0xfffffdff
 8004474:	40012c00 	.word	0x40012c00
 8004478:	fffff7ff 	.word	0xfffff7ff
 800447c:	fffffbff 	.word	0xfffffbff
 8004480:	ffffcfff 	.word	0xffffcfff
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8004490:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004492:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004494:	4d11      	ldr	r5, [pc, #68]	@ (80044dc <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004496:	4013      	ands	r3, r2
 8004498:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800449a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800449c:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	680d      	ldr	r5, [r1, #0]
 80044a2:	022d      	lsls	r5, r5, #8
 80044a4:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a6:	4a0e      	ldr	r2, [pc, #56]	@ (80044e0 <TIM_OC4_SetConfig+0x54>)
 80044a8:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044aa:	688a      	ldr	r2, [r1, #8]
 80044ac:	0312      	lsls	r2, r2, #12
 80044ae:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	4c0c      	ldr	r4, [pc, #48]	@ (80044e4 <TIM_OC4_SetConfig+0x58>)
 80044b2:	42a0      	cmp	r0, r4
 80044b4:	d005      	beq.n	80044c2 <TIM_OC4_SetConfig+0x36>
 80044b6:	4c0c      	ldr	r4, [pc, #48]	@ (80044e8 <TIM_OC4_SetConfig+0x5c>)
 80044b8:	42a0      	cmp	r0, r4
 80044ba:	d002      	beq.n	80044c2 <TIM_OC4_SetConfig+0x36>
 80044bc:	4c0b      	ldr	r4, [pc, #44]	@ (80044ec <TIM_OC4_SetConfig+0x60>)
 80044be:	42a0      	cmp	r0, r4
 80044c0:	d104      	bne.n	80044cc <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c2:	4c0b      	ldr	r4, [pc, #44]	@ (80044f0 <TIM_OC4_SetConfig+0x64>)
 80044c4:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044c6:	694b      	ldr	r3, [r1, #20]
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044ce:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80044d0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80044d2:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d4:	6202      	str	r2, [r0, #32]
}
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	ffffefff 	.word	0xffffefff
 80044dc:	feff8cff 	.word	0xfeff8cff
 80044e0:	ffffdfff 	.word	0xffffdfff
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800
 80044f0:	ffffbfff 	.word	0xffffbfff

080044f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044f8:	4c10      	ldr	r4, [pc, #64]	@ (800453c <TIM_OC5_SetConfig+0x48>)
 80044fa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044fc:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044fe:	4023      	ands	r3, r4
 8004500:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004502:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004504:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004506:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	680a      	ldr	r2, [r1, #0]
 800450a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800450c:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <TIM_OC5_SetConfig+0x50>)
 800450e:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	0412      	lsls	r2, r2, #16
 8004514:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	4e0c      	ldr	r6, [pc, #48]	@ (8004548 <TIM_OC5_SetConfig+0x54>)
 8004518:	42b0      	cmp	r0, r6
 800451a:	d005      	beq.n	8004528 <TIM_OC5_SetConfig+0x34>
 800451c:	4e0b      	ldr	r6, [pc, #44]	@ (800454c <TIM_OC5_SetConfig+0x58>)
 800451e:	42b0      	cmp	r0, r6
 8004520:	d002      	beq.n	8004528 <TIM_OC5_SetConfig+0x34>
 8004522:	4e0b      	ldr	r6, [pc, #44]	@ (8004550 <TIM_OC5_SetConfig+0x5c>)
 8004524:	42b0      	cmp	r0, r6
 8004526:	d103      	bne.n	8004530 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004528:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800452a:	694b      	ldr	r3, [r1, #20]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004532:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004534:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004536:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004538:	6202      	str	r2, [r0, #32]
}
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	fffeffff 	.word	0xfffeffff
 8004540:	fffeff8f 	.word	0xfffeff8f
 8004544:	fffdffff 	.word	0xfffdffff
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8004558:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800455a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800455c:	4d11      	ldr	r5, [pc, #68]	@ (80045a4 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800455e:	4013      	ands	r3, r2
 8004560:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004562:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004564:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004566:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	680d      	ldr	r5, [r1, #0]
 800456a:	022d      	lsls	r5, r5, #8
 800456c:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800456e:	4a0e      	ldr	r2, [pc, #56]	@ (80045a8 <TIM_OC6_SetConfig+0x54>)
 8004570:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004572:	688a      	ldr	r2, [r1, #8]
 8004574:	0512      	lsls	r2, r2, #20
 8004576:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	4c0c      	ldr	r4, [pc, #48]	@ (80045ac <TIM_OC6_SetConfig+0x58>)
 800457a:	42a0      	cmp	r0, r4
 800457c:	d005      	beq.n	800458a <TIM_OC6_SetConfig+0x36>
 800457e:	4c0c      	ldr	r4, [pc, #48]	@ (80045b0 <TIM_OC6_SetConfig+0x5c>)
 8004580:	42a0      	cmp	r0, r4
 8004582:	d002      	beq.n	800458a <TIM_OC6_SetConfig+0x36>
 8004584:	4c0b      	ldr	r4, [pc, #44]	@ (80045b4 <TIM_OC6_SetConfig+0x60>)
 8004586:	42a0      	cmp	r0, r4
 8004588:	d104      	bne.n	8004594 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800458a:	4c0b      	ldr	r4, [pc, #44]	@ (80045b8 <TIM_OC6_SetConfig+0x64>)
 800458c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800458e:	694b      	ldr	r3, [r1, #20]
 8004590:	029b      	lsls	r3, r3, #10
 8004592:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004596:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004598:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800459a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	6202      	str	r2, [r0, #32]
}
 800459e:	bd30      	pop	{r4, r5, pc}
 80045a0:	ffefffff 	.word	0xffefffff
 80045a4:	feff8fff 	.word	0xfeff8fff
 80045a8:	ffdfffff 	.word	0xffdfffff
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800
 80045b8:	fffbffff 	.word	0xfffbffff

080045bc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80045bc:	4770      	bx	lr
	...

080045c0 <TIM_Base_SetConfig>:
{
 80045c0:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c2:	4c1b      	ldr	r4, [pc, #108]	@ (8004630 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 80045c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c6:	42a0      	cmp	r0, r4
 80045c8:	d00a      	beq.n	80045e0 <TIM_Base_SetConfig+0x20>
 80045ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004634 <TIM_Base_SetConfig+0x74>)
 80045cc:	4290      	cmp	r0, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d0:	4a19      	ldr	r2, [pc, #100]	@ (8004638 <TIM_Base_SetConfig+0x78>)
 80045d2:	4290      	cmp	r0, r2
 80045d4:	d109      	bne.n	80045ea <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	4a19      	ldr	r2, [pc, #100]	@ (800463c <TIM_Base_SetConfig+0x7c>)
 80045d8:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045da:	68cb      	ldr	r3, [r1, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	e00a      	b.n	80045f6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	2270      	movs	r2, #112	@ 0x70
 80045e2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80045e4:	684a      	ldr	r2, [r1, #4]
 80045e6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e8:	e7f5      	b.n	80045d6 <TIM_Base_SetConfig+0x16>
 80045ea:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <TIM_Base_SetConfig+0x80>)
 80045ec:	4290      	cmp	r0, r2
 80045ee:	d0f2      	beq.n	80045d6 <TIM_Base_SetConfig+0x16>
 80045f0:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <TIM_Base_SetConfig+0x84>)
 80045f2:	4290      	cmp	r0, r2
 80045f4:	d0ef      	beq.n	80045d6 <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f6:	2280      	movs	r2, #128	@ 0x80
 80045f8:	4393      	bics	r3, r2
 80045fa:	694a      	ldr	r2, [r1, #20]
 80045fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80045fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	688b      	ldr	r3, [r1, #8]
 8004602:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004604:	680b      	ldr	r3, [r1, #0]
 8004606:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004608:	42a0      	cmp	r0, r4
 800460a:	d005      	beq.n	8004618 <TIM_Base_SetConfig+0x58>
 800460c:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <TIM_Base_SetConfig+0x80>)
 800460e:	4298      	cmp	r0, r3
 8004610:	d002      	beq.n	8004618 <TIM_Base_SetConfig+0x58>
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <TIM_Base_SetConfig+0x84>)
 8004614:	4298      	cmp	r0, r3
 8004616:	d101      	bne.n	800461c <TIM_Base_SetConfig+0x5c>
    TIMx->RCR = Structure->RepetitionCounter;
 8004618:	690b      	ldr	r3, [r1, #16]
 800461a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800461c:	2201      	movs	r2, #1
 800461e:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004620:	6903      	ldr	r3, [r0, #16]
 8004622:	4213      	tst	r3, r2
 8004624:	d002      	beq.n	800462c <TIM_Base_SetConfig+0x6c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004626:	6903      	ldr	r3, [r0, #16]
 8004628:	4393      	bics	r3, r2
 800462a:	6103      	str	r3, [r0, #16]
}
 800462c:	bd10      	pop	{r4, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40002000 	.word	0x40002000
 800463c:	fffffcff 	.word	0xfffffcff
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <HAL_TIM_Base_Init>:
{
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800464c:	2001      	movs	r0, #1
  if (htim == NULL)
 800464e:	2c00      	cmp	r4, #0
 8004650:	d023      	beq.n	800469a <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	0025      	movs	r5, r4
 8004654:	353d      	adds	r5, #61	@ 0x3d
 8004656:	782b      	ldrb	r3, [r5, #0]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800465e:	0023      	movs	r3, r4
 8004660:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004662:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004664:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004666:	f7fd fb09 	bl	8001c7c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	1d21      	adds	r1, r4, #4
 8004672:	f7ff ffa5 	bl	80045c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004676:	0022      	movs	r2, r4
 8004678:	2301      	movs	r3, #1
  return HAL_OK;
 800467a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	3248      	adds	r2, #72	@ 0x48
 800467e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	3a0a      	subs	r2, #10
 8004684:	7013      	strb	r3, [r2, #0]
 8004686:	7053      	strb	r3, [r2, #1]
 8004688:	7093      	strb	r3, [r2, #2]
 800468a:	70d3      	strb	r3, [r2, #3]
 800468c:	7113      	strb	r3, [r2, #4]
 800468e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	7193      	strb	r3, [r2, #6]
 8004692:	71d3      	strb	r3, [r2, #7]
 8004694:	7213      	strb	r3, [r2, #8]
 8004696:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004698:	702b      	strb	r3, [r5, #0]
}
 800469a:	bd70      	pop	{r4, r5, r6, pc}

0800469c <HAL_TIM_PWM_Init>:
{
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
  if (htim == NULL)
 80046a2:	2c00      	cmp	r4, #0
 80046a4:	d023      	beq.n	80046ee <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	0025      	movs	r5, r4
 80046a8:	353d      	adds	r5, #61	@ 0x3d
 80046aa:	782b      	ldrb	r3, [r5, #0]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80046b2:	0023      	movs	r3, r4
 80046b4:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80046b6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80046b8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80046ba:	f7ff ff7f 	bl	80045bc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d21      	adds	r1, r4, #4
 80046c6:	f7ff ff7b 	bl	80045c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ca:	0022      	movs	r2, r4
 80046cc:	2301      	movs	r3, #1
  return HAL_OK;
 80046ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	3248      	adds	r2, #72	@ 0x48
 80046d2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	3a0a      	subs	r2, #10
 80046d8:	7013      	strb	r3, [r2, #0]
 80046da:	7053      	strb	r3, [r2, #1]
 80046dc:	7093      	strb	r3, [r2, #2]
 80046de:	70d3      	strb	r3, [r2, #3]
 80046e0:	7113      	strb	r3, [r2, #4]
 80046e2:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	7193      	strb	r3, [r2, #6]
 80046e6:	71d3      	strb	r3, [r2, #7]
 80046e8:	7213      	strb	r3, [r2, #8]
 80046ea:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	702b      	strb	r3, [r5, #0]
}
 80046ee:	bd70      	pop	{r4, r5, r6, pc}

080046f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f0:	2210      	movs	r2, #16
{
 80046f2:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80046f4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f6:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046f8:	4c16      	ldr	r4, [pc, #88]	@ (8004754 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	4393      	bics	r3, r2
 80046fc:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046fe:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004700:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004702:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	680c      	ldr	r4, [r1, #0]
 8004706:	0224      	lsls	r4, r4, #8
 8004708:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800470a:	2320      	movs	r3, #32
 800470c:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800470e:	688b      	ldr	r3, [r1, #8]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004714:	4d10      	ldr	r5, [pc, #64]	@ (8004758 <TIM_OC2_SetConfig+0x68>)
 8004716:	42a8      	cmp	r0, r5
 8004718:	d10f      	bne.n	800473a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800471a:	2580      	movs	r5, #128	@ 0x80
 800471c:	43ab      	bics	r3, r5
 800471e:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004720:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8004722:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004728:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472a:	4d0c      	ldr	r5, [pc, #48]	@ (800475c <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800472c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004730:	694a      	ldr	r2, [r1, #20]
 8004732:	4332      	orrs	r2, r6
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	432a      	orrs	r2, r5
 8004738:	e005      	b.n	8004746 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	4d09      	ldr	r5, [pc, #36]	@ (8004760 <TIM_OC2_SetConfig+0x70>)
 800473c:	42a8      	cmp	r0, r5
 800473e:	d0f4      	beq.n	800472a <TIM_OC2_SetConfig+0x3a>
 8004740:	4d08      	ldr	r5, [pc, #32]	@ (8004764 <TIM_OC2_SetConfig+0x74>)
 8004742:	42a8      	cmp	r0, r5
 8004744:	d0f1      	beq.n	800472a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8004746:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004748:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800474a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800474c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800474e:	6203      	str	r3, [r0, #32]
}
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	feff8cff 	.word	0xfeff8cff
 8004758:	40012c00 	.word	0x40012c00
 800475c:	fffff3ff 	.word	0xfffff3ff
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <HAL_TIM_PWM_ConfigChannel>:
{
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800476a:	0007      	movs	r7, r0
 800476c:	373c      	adds	r7, #60	@ 0x3c
{
 800476e:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8004770:	783a      	ldrb	r2, [r7, #0]
{
 8004772:	0003      	movs	r3, r0
 8004774:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004776:	2002      	movs	r0, #2
 8004778:	2a01      	cmp	r2, #1
 800477a:	d00c      	beq.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x2e>
 800477c:	3801      	subs	r0, #1
 800477e:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8004780:	2d0c      	cmp	r5, #12
 8004782:	d051      	beq.n	8004828 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8004784:	d808      	bhi.n	8004798 <HAL_TIM_PWM_ConfigChannel+0x30>
 8004786:	2d04      	cmp	r5, #4
 8004788:	d02d      	beq.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x7e>
 800478a:	2d08      	cmp	r5, #8
 800478c:	d03c      	beq.n	8004808 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800478e:	2d00      	cmp	r5, #0
 8004790:	d017      	beq.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8004792:	2300      	movs	r3, #0
 8004794:	703b      	strb	r3, [r7, #0]
}
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004798:	2d10      	cmp	r5, #16
 800479a:	d058      	beq.n	800484e <HAL_TIM_PWM_ConfigChannel+0xe6>
 800479c:	2d14      	cmp	r5, #20
 800479e:	d1f8      	bne.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	0028      	movs	r0, r5
 80047a4:	f7ff fed6 	bl	8004554 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	4313      	orrs	r3, r2
 80047b0:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047b2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80047b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004870 <HAL_TIM_PWM_ConfigChannel+0x108>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	e053      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c2:	681d      	ldr	r5, [r3, #0]
 80047c4:	0028      	movs	r0, r5
 80047c6:	f7ff fde9 	bl	800439c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ca:	2308      	movs	r3, #8
 80047cc:	69aa      	ldr	r2, [r5, #24]
 80047ce:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d0:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d4:	69ab      	ldr	r3, [r5, #24]
 80047d6:	4393      	bics	r3, r2
 80047d8:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047da:	69ab      	ldr	r3, [r5, #24]
 80047dc:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047de:	4313      	orrs	r3, r2
 80047e0:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7d5      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e6:	681d      	ldr	r5, [r3, #0]
 80047e8:	0028      	movs	r0, r5
 80047ea:	f7ff ff81 	bl	80046f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	69aa      	ldr	r2, [r5, #24]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f8:	69ab      	ldr	r3, [r5, #24]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_TIM_PWM_ConfigChannel+0x108>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	69aa      	ldr	r2, [r5, #24]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	e7ea      	b.n	80047de <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004808:	681e      	ldr	r6, [r3, #0]
 800480a:	0030      	movs	r0, r6
 800480c:	f7ff fdfc 	bl	8004408 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004810:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	69f3      	ldr	r3, [r6, #28]
 8004814:	431d      	orrs	r5, r3
 8004816:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004818:	69f3      	ldr	r3, [r6, #28]
 800481a:	4393      	bics	r3, r2
 800481c:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800481e:	69f3      	ldr	r3, [r6, #28]
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61f3      	str	r3, [r6, #28]
      break;
 8004826:	e7dc      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	0028      	movs	r0, r5
 800482c:	f7ff fe2e 	bl	800448c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	69ea      	ldr	r2, [r5, #28]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	4313      	orrs	r3, r2
 8004838:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483a:	69eb      	ldr	r3, [r5, #28]
 800483c:	4a0c      	ldr	r2, [pc, #48]	@ (8004870 <HAL_TIM_PWM_ConfigChannel+0x108>)
 800483e:	4013      	ands	r3, r2
 8004840:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	69ea      	ldr	r2, [r5, #28]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4313      	orrs	r3, r2
 800484a:	61eb      	str	r3, [r5, #28]
      break;
 800484c:	e7c9      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800484e:	681d      	ldr	r5, [r3, #0]
 8004850:	0028      	movs	r0, r5
 8004852:	f7ff fe4f 	bl	80044f4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004856:	2308      	movs	r3, #8
 8004858:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800485a:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800485c:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800485e:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004860:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8004862:	4393      	bics	r3, r2
 8004864:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004866:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8004868:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800486a:	4313      	orrs	r3, r2
 800486c:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 800486e:	e7b8      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
 8004870:	fffffbff 	.word	0xfffffbff

08004874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004874:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004876:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	4d03      	ldr	r5, [pc, #12]	@ (8004888 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800487a:	430a      	orrs	r2, r1
 800487c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	4313      	orrs	r3, r2
 8004882:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	6083      	str	r3, [r0, #8]
}
 8004886:	bd30      	pop	{r4, r5, pc}
 8004888:	ffff00ff 	.word	0xffff00ff

0800488c <HAL_TIM_ConfigClockSource>:
{
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800488e:	0005      	movs	r5, r0
 8004890:	2202      	movs	r2, #2
 8004892:	353c      	adds	r5, #60	@ 0x3c
 8004894:	782c      	ldrb	r4, [r5, #0]
{
 8004896:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004898:	0010      	movs	r0, r2
 800489a:	2c01      	cmp	r4, #1
 800489c:	d01b      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800489e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80048a0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80048a2:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80048a4:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048aa:	4a41      	ldr	r2, [pc, #260]	@ (80049b0 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ae:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80048b0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	2b60      	cmp	r3, #96	@ 0x60
 80048b6:	d04e      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0xca>
 80048b8:	d82d      	bhi.n	8004916 <HAL_TIM_ConfigClockSource+0x8a>
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d062      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0xf8>
 80048be:	d813      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x5c>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d00b      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x50>
 80048c4:	d808      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x4c>
 80048c6:	2210      	movs	r2, #16
 80048c8:	0019      	movs	r1, r3
 80048ca:	4391      	bics	r1, r2
 80048cc:	d006      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80048ce:	2301      	movs	r3, #1
 80048d0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80048d2:	2300      	movs	r3, #0
 80048d4:	702b      	strb	r3, [r5, #0]
}
 80048d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80048d8:	2b30      	cmp	r3, #48	@ 0x30
 80048da:	d1f8      	bne.n	80048ce <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 80048dc:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048de:	4935      	ldr	r1, [pc, #212]	@ (80049b4 <HAL_TIM_ConfigClockSource+0x128>)
 80048e0:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e2:	4313      	orrs	r3, r2
 80048e4:	2207      	movs	r2, #7
 80048e6:	e028      	b.n	800493a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80048e8:	2b50      	cmp	r3, #80	@ 0x50
 80048ea:	d1f0      	bne.n	80048ce <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80048ec:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80048ee:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80048f0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f6:	4387      	bics	r7, r0
 80048f8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048fa:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048fe:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004900:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004902:	200a      	movs	r0, #10
 8004904:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8004906:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004908:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800490a:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 800490e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004910:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004912:	2357      	movs	r3, #87	@ 0x57
 8004914:	e011      	b.n	800493a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8004916:	2280      	movs	r2, #128	@ 0x80
 8004918:	0152      	lsls	r2, r2, #5
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xb2>
 800491e:	2280      	movs	r2, #128	@ 0x80
 8004920:	0192      	lsls	r2, r2, #6
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0xb6>
 8004926:	2b70      	cmp	r3, #112	@ 0x70
 8004928:	d1d1      	bne.n	80048ce <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	68cb      	ldr	r3, [r1, #12]
 800492c:	684a      	ldr	r2, [r1, #4]
 800492e:	0020      	movs	r0, r4
 8004930:	6889      	ldr	r1, [r1, #8]
 8004932:	f7ff ff9f 	bl	8004874 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004936:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004938:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493a:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 800493c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2000      	movs	r0, #0
 8004940:	e7c5      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8004942:	68cb      	ldr	r3, [r1, #12]
 8004944:	684a      	ldr	r2, [r1, #4]
 8004946:	0020      	movs	r0, r4
 8004948:	6889      	ldr	r1, [r1, #8]
 800494a:	f7ff ff93 	bl	8004874 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	68a2      	ldr	r2, [r4, #8]
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	e7f1      	b.n	800493a <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004956:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8004958:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800495a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800495c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004960:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004962:	43b8      	bics	r0, r7
 8004964:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004968:	4f13      	ldr	r7, [pc, #76]	@ (80049b8 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800496a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800496c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004970:	20a0      	movs	r0, #160	@ 0xa0
 8004972:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004974:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8004976:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004978:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800497a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800497c:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <HAL_TIM_ConfigClockSource+0x128>)
 800497e:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004980:	2367      	movs	r3, #103	@ 0x67
 8004982:	e7da      	b.n	800493a <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8004984:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004986:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004988:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800498c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498e:	4387      	bics	r7, r0
 8004990:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004992:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004994:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004996:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004998:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	200a      	movs	r0, #10
 800499c:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 800499e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80049a0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80049a2:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 80049a6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a8:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049aa:	2347      	movs	r3, #71	@ 0x47
 80049ac:	e7c5      	b.n	800493a <HAL_TIM_ConfigClockSource+0xae>
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	ffce0088 	.word	0xffce0088
 80049b4:	ffcfff8f 	.word	0xffcfff8f
 80049b8:	ffff0fff 	.word	0xffff0fff

080049bc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049bc:	231f      	movs	r3, #31
{
 80049be:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c0:	2401      	movs	r4, #1
 80049c2:	4019      	ands	r1, r3
 80049c4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c6:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80049c8:	6a03      	ldr	r3, [r0, #32]
 80049ca:	43a3      	bics	r3, r4
 80049cc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ce:	6a03      	ldr	r3, [r0, #32]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	6202      	str	r2, [r0, #32]
}
 80049d4:	bd10      	pop	{r4, pc}
	...

080049d8 <HAL_TIM_OC_Start>:
{
 80049d8:	0002      	movs	r2, r0
 80049da:	b510      	push	{r4, lr}
 80049dc:	2908      	cmp	r1, #8
 80049de:	d01c      	beq.n	8004a1a <HAL_TIM_OC_Start+0x42>
 80049e0:	d806      	bhi.n	80049f0 <HAL_TIM_OC_Start+0x18>
 80049e2:	2900      	cmp	r1, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_TIM_OC_Start+0x26>
 80049e6:	2904      	cmp	r1, #4
 80049e8:	d014      	beq.n	8004a14 <HAL_TIM_OC_Start+0x3c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	0013      	movs	r3, r2
 80049ec:	3343      	adds	r3, #67	@ 0x43
 80049ee:	e008      	b.n	8004a02 <HAL_TIM_OC_Start+0x2a>
 80049f0:	290c      	cmp	r1, #12
 80049f2:	d015      	beq.n	8004a20 <HAL_TIM_OC_Start+0x48>
 80049f4:	2910      	cmp	r1, #16
 80049f6:	d1f8      	bne.n	80049ea <HAL_TIM_OC_Start+0x12>
 80049f8:	0003      	movs	r3, r0
 80049fa:	3342      	adds	r3, #66	@ 0x42
 80049fc:	e001      	b.n	8004a02 <HAL_TIM_OC_Start+0x2a>
 80049fe:	0003      	movs	r3, r0
 8004a00:	333e      	adds	r3, #62	@ 0x3e
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	4183      	sbcs	r3, r0
 8004a0a:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8004a0c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_TIM_OC_Start+0x4e>
}
 8004a12:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a14:	0003      	movs	r3, r0
 8004a16:	333f      	adds	r3, #63	@ 0x3f
 8004a18:	e7f3      	b.n	8004a02 <HAL_TIM_OC_Start+0x2a>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	3340      	adds	r3, #64	@ 0x40
 8004a1e:	e7f0      	b.n	8004a02 <HAL_TIM_OC_Start+0x2a>
 8004a20:	0003      	movs	r3, r0
 8004a22:	3341      	adds	r3, #65	@ 0x41
 8004a24:	e7ed      	b.n	8004a02 <HAL_TIM_OC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	2302      	movs	r3, #2
 8004a28:	2908      	cmp	r1, #8
 8004a2a:	d030      	beq.n	8004a8e <HAL_TIM_OC_Start+0xb6>
 8004a2c:	d806      	bhi.n	8004a3c <HAL_TIM_OC_Start+0x64>
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_TIM_OC_Start+0x72>
 8004a32:	2904      	cmp	r1, #4
 8004a34:	d028      	beq.n	8004a88 <HAL_TIM_OC_Start+0xb0>
 8004a36:	0010      	movs	r0, r2
 8004a38:	3043      	adds	r0, #67	@ 0x43
 8004a3a:	e008      	b.n	8004a4e <HAL_TIM_OC_Start+0x76>
 8004a3c:	290c      	cmp	r1, #12
 8004a3e:	d029      	beq.n	8004a94 <HAL_TIM_OC_Start+0xbc>
 8004a40:	2910      	cmp	r1, #16
 8004a42:	d1f8      	bne.n	8004a36 <HAL_TIM_OC_Start+0x5e>
 8004a44:	0010      	movs	r0, r2
 8004a46:	3042      	adds	r0, #66	@ 0x42
 8004a48:	e001      	b.n	8004a4e <HAL_TIM_OC_Start+0x76>
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	303e      	adds	r0, #62	@ 0x3e
 8004a4e:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a50:	6814      	ldr	r4, [r2, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	0020      	movs	r0, r4
 8004a56:	f7ff ffb1 	bl	80049bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a5a:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <HAL_TIM_OC_Start+0xdc>)
 8004a5c:	4294      	cmp	r4, r2
 8004a5e:	d005      	beq.n	8004a6c <HAL_TIM_OC_Start+0x94>
 8004a60:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <HAL_TIM_OC_Start+0xe0>)
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d002      	beq.n	8004a6c <HAL_TIM_OC_Start+0x94>
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <HAL_TIM_OC_Start+0xe4>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d116      	bne.n	8004a9a <HAL_TIM_OC_Start+0xc2>
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6c:	2380      	movs	r3, #128	@ 0x80
 8004a6e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	4294      	cmp	r4, r2
 8004a78:	d112      	bne.n	8004aa0 <HAL_TIM_OC_Start+0xc8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	4a10      	ldr	r2, [pc, #64]	@ (8004ac0 <HAL_TIM_OC_Start+0xe8>)
 8004a7e:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d112      	bne.n	8004aaa <HAL_TIM_OC_Start+0xd2>
  return HAL_OK;
 8004a84:	2000      	movs	r0, #0
 8004a86:	e7c4      	b.n	8004a12 <HAL_TIM_OC_Start+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a88:	0010      	movs	r0, r2
 8004a8a:	303f      	adds	r0, #63	@ 0x3f
 8004a8c:	e7df      	b.n	8004a4e <HAL_TIM_OC_Start+0x76>
 8004a8e:	0010      	movs	r0, r2
 8004a90:	3040      	adds	r0, #64	@ 0x40
 8004a92:	e7dc      	b.n	8004a4e <HAL_TIM_OC_Start+0x76>
 8004a94:	0010      	movs	r0, r2
 8004a96:	3041      	adds	r0, #65	@ 0x41
 8004a98:	e7d9      	b.n	8004a4e <HAL_TIM_OC_Start+0x76>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_TIM_OC_Start+0xec>)
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	d0ec      	beq.n	8004a7a <HAL_TIM_OC_Start+0xa2>
      __HAL_TIM_ENABLE(htim);
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	e7ec      	b.n	8004a84 <HAL_TIM_OC_Start+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	2280      	movs	r2, #128	@ 0x80
 8004aac:	0252      	lsls	r2, r2, #9
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d1f6      	bne.n	8004aa0 <HAL_TIM_OC_Start+0xc8>
 8004ab2:	e7e7      	b.n	8004a84 <HAL_TIM_OC_Start+0xac>
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800
 8004ac0:	00010007 	.word	0x00010007
 8004ac4:	40000400 	.word	0x40000400

08004ac8 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	f7ff ff85 	bl	80049d8 <HAL_TIM_OC_Start>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad2:	0004      	movs	r4, r0
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	343c      	adds	r4, #60	@ 0x3c
 8004ad8:	7825      	ldrb	r5, [r4, #0]
{
 8004ada:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004adc:	0010      	movs	r0, r2
 8004ade:	2d01      	cmp	r5, #1
 8004ae0:	d01f      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	001d      	movs	r5, r3
 8004ae4:	353d      	adds	r5, #61	@ 0x3d
 8004ae6:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae8:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aea:	4e0e      	ldr	r6, [pc, #56]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8004aec:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004aee:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004af0:	42b2      	cmp	r2, r6
 8004af2:	d103      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af4:	4f0c      	ldr	r7, [pc, #48]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004af6:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af8:	684f      	ldr	r7, [r1, #4]
 8004afa:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	2770      	movs	r7, #112	@ 0x70
 8004afe:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b00:	680f      	ldr	r7, [r1, #0]
 8004b02:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b04:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	42b2      	cmp	r2, r6
 8004b08:	d002      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004b0a:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b14:	688b      	ldr	r3, [r1, #8]
 8004b16:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b18:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004b1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004b20:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	ff0fffff 	.word	0xff0fffff
 8004b2c:	40000400 	.word	0x40000400

08004b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b30:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b32:	0004      	movs	r4, r0
 8004b34:	343c      	adds	r4, #60	@ 0x3c
 8004b36:	7823      	ldrb	r3, [r4, #0]
{
 8004b38:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d039      	beq.n	8004bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b40:	481d      	ldr	r0, [pc, #116]	@ (8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8004b42:	68cb      	ldr	r3, [r1, #12]
 8004b44:	4003      	ands	r3, r0
 8004b46:	6888      	ldr	r0, [r1, #8]
 8004b48:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b4a:	481c      	ldr	r0, [pc, #112]	@ (8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004b4c:	4003      	ands	r3, r0
 8004b4e:	6848      	ldr	r0, [r1, #4]
 8004b50:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b52:	481b      	ldr	r0, [pc, #108]	@ (8004bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8004b54:	4003      	ands	r3, r0
 8004b56:	6808      	ldr	r0, [r1, #0]
 8004b58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b5a:	481a      	ldr	r0, [pc, #104]	@ (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004b5c:	4003      	ands	r3, r0
 8004b5e:	6908      	ldr	r0, [r1, #16]
 8004b60:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b62:	4819      	ldr	r0, [pc, #100]	@ (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004b64:	4003      	ands	r3, r0
 8004b66:	6948      	ldr	r0, [r1, #20]
 8004b68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b6a:	4818      	ldr	r0, [pc, #96]	@ (8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004b6c:	4003      	ands	r3, r0
 8004b6e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8004b70:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b72:	4817      	ldr	r0, [pc, #92]	@ (8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004b74:	4003      	ands	r3, r0
 8004b76:	6988      	ldr	r0, [r1, #24]
 8004b78:	0400      	lsls	r0, r0, #16
 8004b7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b7c:	4815      	ldr	r0, [pc, #84]	@ (8004bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004b7e:	4003      	ands	r3, r0
 8004b80:	69c8      	ldr	r0, [r1, #28]
 8004b82:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b84:	6810      	ldr	r0, [r2, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	@ (8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004b88:	4290      	cmp	r0, r2
 8004b8a:	d110      	bne.n	8004bae <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b8c:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004b92:	0512      	lsls	r2, r2, #20
 8004b94:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004b98:	401a      	ands	r2, r3
 8004b9a:	6a0b      	ldr	r3, [r1, #32]
 8004b9c:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b9e:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8004ba4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ba6:	4b10      	ldr	r3, [pc, #64]	@ (8004be8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004ba8:	401a      	ands	r2, r3
 8004baa:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004bac:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bae:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	fffffcff 	.word	0xfffffcff
 8004bbc:	fffffbff 	.word	0xfffffbff
 8004bc0:	fffff7ff 	.word	0xfffff7ff
 8004bc4:	ffffefff 	.word	0xffffefff
 8004bc8:	ffffdfff 	.word	0xffffdfff
 8004bcc:	ffffbfff 	.word	0xffffbfff
 8004bd0:	fff0ffff 	.word	0xfff0ffff
 8004bd4:	efffffff 	.word	0xefffffff
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	ff0fffff 	.word	0xff0fffff
 8004be0:	feffffff 	.word	0xfeffffff
 8004be4:	fdffffff 	.word	0xfdffffff
 8004be8:	dfffffff 	.word	0xdfffffff

08004bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bec:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bf8:	6801      	ldr	r1, [r0, #0]
 8004bfa:	4d13      	ldr	r5, [pc, #76]	@ (8004c48 <UART_EndRxTransfer+0x5c>)
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	402b      	ands	r3, r5
 8004c00:	600b      	str	r3, [r1, #0]
 8004c02:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c06:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c0e:	6802      	ldr	r2, [r0, #0]
 8004c10:	4c0e      	ldr	r4, [pc, #56]	@ (8004c4c <UART_EndRxTransfer+0x60>)
 8004c12:	6893      	ldr	r3, [r2, #8]
 8004c14:	4023      	ands	r3, r4
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10a      	bne.n	8004c38 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2a:	2410      	movs	r4, #16
 8004c2c:	6802      	ldr	r2, [r0, #0]
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	43a3      	bics	r3, r4
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	0003      	movs	r3, r0
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	338c      	adds	r3, #140	@ 0x8c
 8004c3e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	2300      	movs	r3, #0
 8004c42:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c44:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8004c46:	bd30      	pop	{r4, r5, pc}
 8004c48:	fffffedf 	.word	0xfffffedf
 8004c4c:	effffffe 	.word	0xeffffffe

08004c50 <UART_SetConfig>:
{
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c54:	6925      	ldr	r5, [r4, #16]
 8004c56:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5a:	4329      	orrs	r1, r5
 8004c5c:	6965      	ldr	r5, [r4, #20]
 8004c5e:	69c2      	ldr	r2, [r0, #28]
 8004c60:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4d49      	ldr	r5, [pc, #292]	@ (8004d8c <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c66:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	4028      	ands	r0, r5
 8004c6a:	4301      	orrs	r1, r0
 8004c6c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	4847      	ldr	r0, [pc, #284]	@ (8004d90 <UART_SetConfig+0x140>)
    tmpreg |= huart->Init.OneBitSampling;
 8004c72:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	4001      	ands	r1, r0
 8004c76:	68e0      	ldr	r0, [r4, #12]
 8004c78:	4301      	orrs	r1, r0
 8004c7a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c7c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7e:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004c80:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c82:	4d44      	ldr	r5, [pc, #272]	@ (8004d94 <UART_SetConfig+0x144>)
 8004c84:	4028      	ands	r0, r5
 8004c86:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c88:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c8e:	4381      	bics	r1, r0
 8004c90:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004c92:	4301      	orrs	r1, r0
 8004c94:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c96:	4940      	ldr	r1, [pc, #256]	@ (8004d98 <UART_SetConfig+0x148>)
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d115      	bne.n	8004cc8 <UART_SetConfig+0x78>
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <UART_SetConfig+0x14c>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d860      	bhi.n	8004d6c <UART_SetConfig+0x11c>
 8004caa:	493d      	ldr	r1, [pc, #244]	@ (8004da0 <UART_SetConfig+0x150>)
 8004cac:	5cc8      	ldrb	r0, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	2380      	movs	r3, #128	@ 0x80
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d12f      	bne.n	8004d16 <UART_SetConfig+0xc6>
    switch (clocksource)
 8004cb6:	2808      	cmp	r0, #8
 8004cb8:	d856      	bhi.n	8004d68 <UART_SetConfig+0x118>
 8004cba:	f7fb fa21 	bl	8000100 <__gnu_thumb1_case_uqi>
 8004cbe:	555b      	.short	0x555b
 8004cc0:	550b550e 	.word	0x550b550e
 8004cc4:	5555      	.short	0x5555
 8004cc6:	0f          	.byte	0x0f
 8004cc7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc8:	4936      	ldr	r1, [pc, #216]	@ (8004da4 <UART_SetConfig+0x154>)
 8004cca:	185b      	adds	r3, r3, r1
 8004ccc:	1e59      	subs	r1, r3, #1
 8004cce:	418b      	sbcs	r3, r1
 8004cd0:	0118      	lsls	r0, r3, #4
 8004cd2:	e7ec      	b.n	8004cae <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd4:	f7ff f9b6 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8004cd8:	e04e      	b.n	8004d78 <UART_SetConfig+0x128>
    switch (clocksource)
 8004cda:	4a33      	ldr	r2, [pc, #204]	@ (8004da8 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cdc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004cde:	4b33      	ldr	r3, [pc, #204]	@ (8004dac <UART_SetConfig+0x15c>)
 8004ce0:	0049      	lsls	r1, r1, #1
 8004ce2:	0010      	movs	r0, r2
 8004ce4:	5ac9      	ldrh	r1, [r1, r3]
 8004ce6:	f7fb fa15 	bl	8000114 <__udivsi3>
 8004cea:	6865      	ldr	r5, [r4, #4]
 8004cec:	0040      	lsls	r0, r0, #1
 8004cee:	086b      	lsrs	r3, r5, #1
 8004cf0:	18c0      	adds	r0, r0, r3
 8004cf2:	0029      	movs	r1, r5
 8004cf4:	f7fb fa0e 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <UART_SetConfig+0x160>)
 8004cfc:	3a10      	subs	r2, #16
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d832      	bhi.n	8004d68 <UART_SetConfig+0x118>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d02:	230f      	movs	r3, #15
 8004d04:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d06:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d08:	439a      	bics	r2, r3
 8004d0a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	4303      	orrs	r3, r0
 8004d12:	60d3      	str	r3, [r2, #12]
 8004d14:	e032      	b.n	8004d7c <UART_SetConfig+0x12c>
    switch (clocksource)
 8004d16:	2808      	cmp	r0, #8
 8004d18:	d826      	bhi.n	8004d68 <UART_SetConfig+0x118>
 8004d1a:	f7fb f9f1 	bl	8000100 <__gnu_thumb1_case_uqi>
 8004d1e:	251a      	.short	0x251a
 8004d20:	251f2505 	.word	0x251f2505
 8004d24:	2525      	.short	0x2525
 8004d26:	22          	.byte	0x22
 8004d27:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	481f      	ldr	r0, [pc, #124]	@ (8004da8 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <UART_SetConfig+0x15c>)
 8004d2e:	0052      	lsls	r2, r2, #1
 8004d30:	5ad1      	ldrh	r1, [r2, r3]
 8004d32:	f7fb f9ef 	bl	8000114 <__udivsi3>
 8004d36:	6865      	ldr	r5, [r4, #4]
 8004d38:	086b      	lsrs	r3, r5, #1
 8004d3a:	18c0      	adds	r0, r0, r3
 8004d3c:	0029      	movs	r1, r5
 8004d3e:	f7fb f9e9 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d42:	0002      	movs	r2, r0
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <UART_SetConfig+0x160>)
 8004d46:	3a10      	subs	r2, #16
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d80d      	bhi.n	8004d68 <UART_SetConfig+0x118>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	60d8      	str	r0, [r3, #12]
 8004d50:	e014      	b.n	8004d7c <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d52:	f7ff fa65 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d010      	beq.n	8004d7c <UART_SetConfig+0x12c>
 8004d5a:	e7e6      	b.n	8004d2a <UART_SetConfig+0xda>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5c:	f7ff f972 	bl	8004044 <HAL_RCC_GetSysClockFreq>
        break;
 8004d60:	e7f9      	b.n	8004d56 <UART_SetConfig+0x106>
    switch (clocksource)
 8004d62:	2080      	movs	r0, #128	@ 0x80
 8004d64:	0200      	lsls	r0, r0, #8
 8004d66:	e7e0      	b.n	8004d2a <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8004d68:	2001      	movs	r0, #1
 8004d6a:	e008      	b.n	8004d7e <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d1ee      	bne.n	8004d52 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7ff fa54 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d78:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8004d7a:	d1af      	bne.n	8004cdc <UART_SetConfig+0x8c>
        ret = HAL_ERROR;
 8004d7c:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <UART_SetConfig+0x164>)
 8004d80:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d86:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	cfff69f3 	.word	0xcfff69f3
 8004d90:	ffffcfff 	.word	0xffffcfff
 8004d94:	11fff4ff 	.word	0x11fff4ff
 8004d98:	40013800 	.word	0x40013800
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	080061bc 	.word	0x080061bc
 8004da4:	bfffbc00 	.word	0xbfffbc00
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	080061c0 	.word	0x080061c0
 8004db0:	0000ffef 	.word	0x0000ffef
 8004db4:	00010001 	.word	0x00010001

08004db8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004db8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8004dba:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dbc:	071a      	lsls	r2, r3, #28
 8004dbe:	d506      	bpl.n	8004dce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dc0:	6801      	ldr	r1, [r0, #0]
 8004dc2:	4c28      	ldr	r4, [pc, #160]	@ (8004e64 <UART_AdvFeatureConfig+0xac>)
 8004dc4:	684a      	ldr	r2, [r1, #4]
 8004dc6:	4022      	ands	r2, r4
 8004dc8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004dca:	4322      	orrs	r2, r4
 8004dcc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dce:	07da      	lsls	r2, r3, #31
 8004dd0:	d506      	bpl.n	8004de0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd2:	6801      	ldr	r1, [r0, #0]
 8004dd4:	4c24      	ldr	r4, [pc, #144]	@ (8004e68 <UART_AdvFeatureConfig+0xb0>)
 8004dd6:	684a      	ldr	r2, [r1, #4]
 8004dd8:	4022      	ands	r2, r4
 8004dda:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004ddc:	4322      	orrs	r2, r4
 8004dde:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de0:	079a      	lsls	r2, r3, #30
 8004de2:	d506      	bpl.n	8004df2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de4:	6801      	ldr	r1, [r0, #0]
 8004de6:	4c21      	ldr	r4, [pc, #132]	@ (8004e6c <UART_AdvFeatureConfig+0xb4>)
 8004de8:	684a      	ldr	r2, [r1, #4]
 8004dea:	4022      	ands	r2, r4
 8004dec:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004dee:	4322      	orrs	r2, r4
 8004df0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df2:	075a      	lsls	r2, r3, #29
 8004df4:	d506      	bpl.n	8004e04 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df6:	6801      	ldr	r1, [r0, #0]
 8004df8:	4c1d      	ldr	r4, [pc, #116]	@ (8004e70 <UART_AdvFeatureConfig+0xb8>)
 8004dfa:	684a      	ldr	r2, [r1, #4]
 8004dfc:	4022      	ands	r2, r4
 8004dfe:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004e00:	4322      	orrs	r2, r4
 8004e02:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e04:	06da      	lsls	r2, r3, #27
 8004e06:	d506      	bpl.n	8004e16 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	4c1a      	ldr	r4, [pc, #104]	@ (8004e74 <UART_AdvFeatureConfig+0xbc>)
 8004e0c:	688a      	ldr	r2, [r1, #8]
 8004e0e:	4022      	ands	r2, r4
 8004e10:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004e12:	4322      	orrs	r2, r4
 8004e14:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	069a      	lsls	r2, r3, #26
 8004e18:	d506      	bpl.n	8004e28 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1a:	6801      	ldr	r1, [r0, #0]
 8004e1c:	4c16      	ldr	r4, [pc, #88]	@ (8004e78 <UART_AdvFeatureConfig+0xc0>)
 8004e1e:	688a      	ldr	r2, [r1, #8]
 8004e20:	4022      	ands	r2, r4
 8004e22:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004e24:	4322      	orrs	r2, r4
 8004e26:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e28:	065a      	lsls	r2, r3, #25
 8004e2a:	d510      	bpl.n	8004e4e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e2c:	6801      	ldr	r1, [r0, #0]
 8004e2e:	4d13      	ldr	r5, [pc, #76]	@ (8004e7c <UART_AdvFeatureConfig+0xc4>)
 8004e30:	684a      	ldr	r2, [r1, #4]
 8004e32:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004e34:	402a      	ands	r2, r5
 8004e36:	4322      	orrs	r2, r4
 8004e38:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e3a:	2280      	movs	r2, #128	@ 0x80
 8004e3c:	0352      	lsls	r2, r2, #13
 8004e3e:	4294      	cmp	r4, r2
 8004e40:	d105      	bne.n	8004e4e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e42:	684a      	ldr	r2, [r1, #4]
 8004e44:	4c0e      	ldr	r4, [pc, #56]	@ (8004e80 <UART_AdvFeatureConfig+0xc8>)
 8004e46:	4022      	ands	r2, r4
 8004e48:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004e4a:	4322      	orrs	r2, r4
 8004e4c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4e:	061b      	lsls	r3, r3, #24
 8004e50:	d506      	bpl.n	8004e60 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	6802      	ldr	r2, [r0, #0]
 8004e54:	490b      	ldr	r1, [pc, #44]	@ (8004e84 <UART_AdvFeatureConfig+0xcc>)
 8004e56:	6853      	ldr	r3, [r2, #4]
 8004e58:	400b      	ands	r3, r1
 8004e5a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6053      	str	r3, [r2, #4]
}
 8004e60:	bd30      	pop	{r4, r5, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	ffff7fff 	.word	0xffff7fff
 8004e68:	fffdffff 	.word	0xfffdffff
 8004e6c:	fffeffff 	.word	0xfffeffff
 8004e70:	fffbffff 	.word	0xfffbffff
 8004e74:	ffffefff 	.word	0xffffefff
 8004e78:	ffffdfff 	.word	0xffffdfff
 8004e7c:	ffefffff 	.word	0xffefffff
 8004e80:	ff9fffff 	.word	0xff9fffff
 8004e84:	fff7ffff 	.word	0xfff7ffff

08004e88 <UART_WaitOnFlagUntilTimeout>:
{
 8004e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e8a:	0004      	movs	r4, r0
 8004e8c:	000d      	movs	r5, r1
 8004e8e:	0017      	movs	r7, r2
 8004e90:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	69d3      	ldr	r3, [r2, #28]
 8004e96:	402b      	ands	r3, r5
 8004e98:	1b5b      	subs	r3, r3, r5
 8004e9a:	4259      	negs	r1, r3
 8004e9c:	414b      	adcs	r3, r1
 8004e9e:	42bb      	cmp	r3, r7
 8004ea0:	d001      	beq.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e026      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8004ea6:	9b08      	ldr	r3, [sp, #32]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	d0f3      	beq.n	8004e94 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fd f800 	bl	8001eb0 <HAL_GetTick>
 8004eb0:	9b00      	ldr	r3, [sp, #0]
 8004eb2:	1ac0      	subs	r0, r0, r3
 8004eb4:	9b08      	ldr	r3, [sp, #32]
 8004eb6:	4298      	cmp	r0, r3
 8004eb8:	d82d      	bhi.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8e>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02b      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	0752      	lsls	r2, r2, #29
 8004ec4:	d5e5      	bpl.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xa>
 8004ec6:	002a      	movs	r2, r5
 8004ec8:	2140      	movs	r1, #64	@ 0x40
 8004eca:	3a40      	subs	r2, #64	@ 0x40
 8004ecc:	438a      	bics	r2, r1
 8004ece:	d0e0      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	2608      	movs	r6, #8
 8004ed4:	0011      	movs	r1, r2
 8004ed6:	4031      	ands	r1, r6
 8004ed8:	9101      	str	r1, [sp, #4]
 8004eda:	4232      	tst	r2, r6
 8004edc:	d00b      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8004ede:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee0:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8004ee2:	f7ff fe83 	bl	8004bec <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee6:	0023      	movs	r3, r4
 8004ee8:	3390      	adds	r3, #144	@ 0x90
 8004eea:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8004eec:	2300      	movs	r3, #0
          return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8004ef0:	3484      	adds	r4, #132	@ 0x84
 8004ef2:	7023      	strb	r3, [r4, #0]
}
 8004ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	69d9      	ldr	r1, [r3, #28]
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	4211      	tst	r1, r2
 8004efe:	d0c8      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f00:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004f02:	0020      	movs	r0, r4
 8004f04:	f7ff fe72 	bl	8004bec <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f08:	0023      	movs	r3, r4
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	3390      	adds	r3, #144	@ 0x90
 8004f0e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8004f10:	9b01      	ldr	r3, [sp, #4]
 8004f12:	3484      	adds	r4, #132	@ 0x84
 8004f14:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004f16:	2003      	movs	r0, #3
 8004f18:	e7ec      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
	...

08004f1c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	0003      	movs	r3, r0
{
 8004f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	2600      	movs	r6, #0
{
 8004f22:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	3390      	adds	r3, #144	@ 0x90
 8004f26:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8004f28:	f7fc ffc2 	bl	8001eb0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f2c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004f2e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	071b      	lsls	r3, r3, #28
 8004f34:	d51f      	bpl.n	8004f76 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f36:	2180      	movs	r1, #128	@ 0x80
 8004f38:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <UART_CheckIdleState+0xc0>)
 8004f3a:	0032      	movs	r2, r6
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	0389      	lsls	r1, r1, #14
 8004f40:	0003      	movs	r3, r0
 8004f42:	0020      	movs	r0, r4
 8004f44:	f7ff ffa0 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004f48:	42b0      	cmp	r0, r6
 8004f4a:	d014      	beq.n	8004f76 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f50:	2301      	movs	r3, #1
 8004f52:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f56:	2080      	movs	r0, #128	@ 0x80
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	4383      	bics	r3, r0
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004f64:	0023      	movs	r3, r4
 8004f66:	2220      	movs	r2, #32
 8004f68:	3388      	adds	r3, #136	@ 0x88
 8004f6a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8004f6c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	3484      	adds	r4, #132	@ 0x84
 8004f72:	7023      	strb	r3, [r4, #0]
}
 8004f74:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f76:	0026      	movs	r6, r4
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	368c      	adds	r6, #140	@ 0x8c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	075b      	lsls	r3, r3, #29
 8004f80:	d523      	bpl.n	8004fca <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f82:	2180      	movs	r1, #128	@ 0x80
 8004f84:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <UART_CheckIdleState+0xc0>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	002b      	movs	r3, r5
 8004f8e:	03c9      	lsls	r1, r1, #15
 8004f90:	f7ff ff7a 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d018      	beq.n	8004fca <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	4d0e      	ldr	r5, [pc, #56]	@ (8004fe0 <UART_CheckIdleState+0xc4>)
 8004fa6:	680b      	ldr	r3, [r1, #0]
 8004fa8:	402b      	ands	r3, r5
 8004faa:	600b      	str	r3, [r1, #0]
 8004fac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	6821      	ldr	r1, [r4, #0]
 8004fba:	688b      	ldr	r3, [r1, #8]
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]
 8004fc0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8004fc8:	e7d0      	b.n	8004f6c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8004fca:	0023      	movs	r3, r4
 8004fcc:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	3388      	adds	r3, #136	@ 0x88
 8004fd2:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd8:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8004fda:	e7c8      	b.n	8004f6e <UART_CheckIdleState+0x52>
 8004fdc:	01ffffff 	.word	0x01ffffff
 8004fe0:	fffffedf 	.word	0xfffffedf

08004fe4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe6:	0004      	movs	r4, r0
 8004fe8:	000e      	movs	r6, r1
 8004fea:	001d      	movs	r5, r3
 8004fec:	9201      	str	r2, [sp, #4]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RS485Ex_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8004ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	0007      	movs	r7, r0
 8004ff8:	3788      	adds	r7, #136	@ 0x88
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_RS485Ex_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 8005000:	0002      	movs	r2, r0
 8005002:	3284      	adds	r2, #132	@ 0x84
 8005004:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005006:	f7fc fe89 	bl	8001d1c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800500a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800500c:	2101      	movs	r1, #1
 800500e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	603b      	str	r3, [r7, #0]
  __HAL_UART_DISABLE(huart);
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	438b      	bics	r3, r1
 8005016:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005018:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_RS485Ex_Init+0x40>
    UART_AdvFeatureConfig(huart);
 800501e:	0020      	movs	r0, r4
 8005020:	f7ff feca 	bl	8004db8 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005024:	0020      	movs	r0, r4
 8005026:	f7ff fe13 	bl	8004c50 <UART_SetConfig>
 800502a:	2801      	cmp	r0, #1
 800502c:	d0e1      	beq.n	8004ff2 <HAL_RS485Ex_Init+0xe>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800502e:	2280      	movs	r2, #128	@ 0x80
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	01d2      	lsls	r2, r2, #7
 8005034:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005036:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	490a      	ldr	r1, [pc, #40]	@ (8005068 <HAL_RS485Ex_Init+0x84>)
  return (UART_CheckIdleState(huart));
 8005040:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005042:	400a      	ands	r2, r1
 8005044:	4332      	orrs	r2, r6
 8005046:	609a      	str	r2, [r3, #8]
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	0551      	lsls	r1, r2, #21
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800504c:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4906      	ldr	r1, [pc, #24]	@ (800506c <HAL_RS485Ex_Init+0x88>)
 8005052:	400a      	ands	r2, r1
 8005054:	4315      	orrs	r5, r2
  __HAL_UART_ENABLE(huart);
 8005056:	2201      	movs	r2, #1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005058:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005060:	f7ff ff5c 	bl	8004f1c <UART_CheckIdleState>
 8005064:	e7c6      	b.n	8004ff4 <HAL_RS485Ex_Init+0x10>
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	ffff7fff 	.word	0xffff7fff
 800506c:	fc00ffff 	.word	0xfc00ffff

08005070 <memset>:
 8005070:	0003      	movs	r3, r0
 8005072:	1882      	adds	r2, r0, r2
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	7019      	strb	r1, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <__libc_init_array>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	2600      	movs	r6, #0
 8005084:	4c0c      	ldr	r4, [pc, #48]	@ (80050b8 <__libc_init_array+0x38>)
 8005086:	4d0d      	ldr	r5, [pc, #52]	@ (80050bc <__libc_init_array+0x3c>)
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	42a6      	cmp	r6, r4
 800508e:	d109      	bne.n	80050a4 <__libc_init_array+0x24>
 8005090:	2600      	movs	r6, #0
 8005092:	f000 f819 	bl	80050c8 <_init>
 8005096:	4c0a      	ldr	r4, [pc, #40]	@ (80050c0 <__libc_init_array+0x40>)
 8005098:	4d0a      	ldr	r5, [pc, #40]	@ (80050c4 <__libc_init_array+0x44>)
 800509a:	1b64      	subs	r4, r4, r5
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	42a6      	cmp	r6, r4
 80050a0:	d105      	bne.n	80050ae <__libc_init_array+0x2e>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	00b3      	lsls	r3, r6, #2
 80050a6:	58eb      	ldr	r3, [r5, r3]
 80050a8:	4798      	blx	r3
 80050aa:	3601      	adds	r6, #1
 80050ac:	e7ee      	b.n	800508c <__libc_init_array+0xc>
 80050ae:	00b3      	lsls	r3, r6, #2
 80050b0:	58eb      	ldr	r3, [r5, r3]
 80050b2:	4798      	blx	r3
 80050b4:	3601      	adds	r6, #1
 80050b6:	e7f2      	b.n	800509e <__libc_init_array+0x1e>
 80050b8:	080061d8 	.word	0x080061d8
 80050bc:	080061d8 	.word	0x080061d8
 80050c0:	080061dc 	.word	0x080061dc
 80050c4:	080061d8 	.word	0x080061d8

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
